{"mappings":"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","sources":["src/loading2/decoder.worker.js","src/loading2/PointAttributes.ts","PointAttributes.ts"],"sourcesContent":["\n\nimport {PointAttribute, PointAttributeTypes} from \"./PointAttributes\";\n\nconst typedArrayMapping = {\n\t\"int8\":   Int8Array,\n\t\"int16\":  Int16Array,\n\t\"int32\":  Int32Array,\n\t\"int64\":  Float64Array,\n\t\"uint8\":  Uint8Array,\n\t\"uint16\": Uint16Array,\n\t\"uint32\": Uint32Array,\n\t\"uint64\": Float64Array,\n\t\"float\":  Float32Array,\n\t\"double\": Float64Array,\n};\n\nPotree = {};\n\nonmessage = function (event) {\n\n\tlet {buffer, pointAttributes, scale, name, min, max, size, offset, numPoints} = event.data;\n\n\tlet tStart = performance.now();\n\n\tlet view = new DataView(buffer);\n\t\n\tlet attributeBuffers = {};\n\tlet attributeOffset = 0;\n\n\tlet bytesPerPoint = 0;\n\tfor (let pointAttribute of pointAttributes.attributes) {\n\t\tbytesPerPoint += pointAttribute.byteSize;\n\t}\n\n\tlet gridSize = 32;\n\tlet grid = new Uint32Array(gridSize ** 3);\n\tlet toIndex = (x, y, z) => {\n\t\t// let dx = gridSize * (x - min.x) / size.x;\n\t\t// let dy = gridSize * (y - min.y) / size.y;\n\t\t// let dz = gridSize * (z - min.z) / size.z;\n\n\t\t// min is already subtracted\n\t\tlet dx = gridSize * x / size.x;\n\t\tlet dy = gridSize * y / size.y;\n\t\tlet dz = gridSize * z / size.z;\n\n\t\tlet ix = Math.min(parseInt(dx), gridSize - 1);\n\t\tlet iy = Math.min(parseInt(dy), gridSize - 1);\n\t\tlet iz = Math.min(parseInt(dz), gridSize - 1);\n\n\t\tlet index = ix + iy * gridSize + iz * gridSize * gridSize;\n\n\t\treturn index;\n\t};\n\n\tlet numOccupiedCells = 0;\n\tfor (let pointAttribute of pointAttributes.attributes) {\n\t\t\n\t\tif([\"POSITION_CARTESIAN\", \"position\"].includes(pointAttribute.name)){\n\t\t\tlet buff = new ArrayBuffer(numPoints * 4 * 3);\n\t\t\tlet positions = new Float32Array(buff);\n\t\t\n\t\t\tfor (let j = 0; j < numPoints; j++) {\n\t\t\t\t\n\t\t\t\tlet pointOffset = j * bytesPerPoint;\n\n\t\t\t\tlet x = (view.getInt32(pointOffset + attributeOffset + 0, true) * scale[0]) + offset[0] - min.x;\n\t\t\t\tlet y = (view.getInt32(pointOffset + attributeOffset + 4, true) * scale[1]) + offset[1] - min.y;\n\t\t\t\tlet z = (view.getInt32(pointOffset + attributeOffset + 8, true) * scale[2]) + offset[2] - min.z;\n\n\t\t\t\tlet index = toIndex(x, y, z);\n\t\t\t\tlet count = grid[index]++;\n\t\t\t\tif(count === 0){\n\t\t\t\t\tnumOccupiedCells++;\n\t\t\t\t}\n\n\t\t\t\tpositions[3 * j + 0] = x;\n\t\t\t\tpositions[3 * j + 1] = y;\n\t\t\t\tpositions[3 * j + 2] = z;\n\t\t\t}\n\n\t\t\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\n\t\t}else if([\"RGBA\", \"rgba\"].includes(pointAttribute.name)){\n\t\t\tlet buff = new ArrayBuffer(numPoints * 4);\n\t\t\tlet colors = new Uint8Array(buff);\n\n\t\t\tfor (let j = 0; j < numPoints; j++) {\n\t\t\t\tlet pointOffset = j * bytesPerPoint;\n\n\t\t\t\tlet r = view.getUint16(pointOffset + attributeOffset + 0, true);\n\t\t\t\tlet g = view.getUint16(pointOffset + attributeOffset + 2, true);\n\t\t\t\tlet b = view.getUint16(pointOffset + attributeOffset + 4, true);\n\n\t\t\t\tcolors[4 * j + 0] = r > 255 ? r / 256 : r;\n\t\t\t\tcolors[4 * j + 1] = g > 255 ? g / 256 : g;\n\t\t\t\tcolors[4 * j + 2] = b > 255 ? b / 256 : b;\n\t\t\t}\n\n\t\t\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\n\t\t}else{\n\t\t\tlet buff = new ArrayBuffer(numPoints * 4);\n\t\t\tlet f32 = new Float32Array(buff);\n\n\t\t\tlet TypedArray = typedArrayMapping[pointAttribute.type.name];\n\t\t\tpreciseBuffer = new TypedArray(numPoints);\n\n\t\t\tlet [offset, scale] = [0, 1];\n\n\t\t\tconst getterMap = {\n\t\t\t\t\"int8\":   view.getInt8,\n\t\t\t\t\"int16\":  view.getInt16,\n\t\t\t\t\"int32\":  view.getInt32,\n\t\t\t\t// \"int64\":  view.getInt64,\n\t\t\t\t\"uint8\":  view.getUint8,\n\t\t\t\t\"uint16\": view.getUint16,\n\t\t\t\t\"uint32\": view.getUint32,\n\t\t\t\t// \"uint64\": view.getUint64,\n\t\t\t\t\"float\":  view.getFloat32,\n\t\t\t\t\"double\": view.getFloat64,\n\t\t\t};\n\t\t\tconst getter = getterMap[pointAttribute.type.name].bind(view);\n\n\t\t\t// compute offset and scale to pack larger types into 32 bit floats\n\t\t\tif(pointAttribute.type.size > 4){\n\t\t\t\tlet [amin, amax] = pointAttribute.range;\n\t\t\t\toffset = amin;\n\t\t\t\tscale = 1 / (amax - amin);\n\t\t\t}\n\n\t\t\tfor(let j = 0; j < numPoints; j++){\n\t\t\t\tlet pointOffset = j * bytesPerPoint;\n\t\t\t\tlet value = getter(pointOffset + attributeOffset, true);\n\n\t\t\t\tf32[j] = (value - offset) * scale;\n\t\t\t\tpreciseBuffer[j] = value;\n\t\t\t}\n\n\t\t\tattributeBuffers[pointAttribute.name] = { \n\t\t\t\tbuffer: buff,\n\t\t\t\tpreciseBuffer: preciseBuffer,\n\t\t\t\tattribute: pointAttribute,\n\t\t\t\toffset: offset,\n\t\t\t\tscale: scale,\n\t\t\t};\n\t\t}\n\n\t\tattributeOffset += pointAttribute.byteSize;\n\n\n\t}\n\n\tlet occupancy = parseInt(numPoints / numOccupiedCells);\n\t// console.log(`${name}: #points: ${numPoints}: #occupiedCells: ${numOccupiedCells}, occupancy: ${occupancy} points/cell`);\n\n\t{ // add indices\n\t\tlet buff = new ArrayBuffer(numPoints * 4);\n\t\tlet indices = new Uint32Array(buff);\n\n\t\tfor (let i = 0; i < numPoints; i++) {\n\t\t\tindices[i] = i;\n\t\t}\n\t\t\n\t\tattributeBuffers[\"INDICES\"] = { buffer: buff, attribute: PointAttribute.INDICES };\n\t}\n\n\n\t{ // handle attribute vectors\n\t\tlet vectors = pointAttributes.vectors;\n\n\t\tfor(let vector of vectors){\n\n\t\t\tlet {name, attributes} = vector;\n\t\t\tlet numVectorElements = attributes.length;\n\t\t\tlet buffer = new ArrayBuffer(numVectorElements * numPoints * 4);\n\t\t\tlet f32 = new Float32Array(buffer);\n\n\t\t\tlet iElement = 0;\n\t\t\tfor(let sourceName of attributes){\n\t\t\t\tlet sourceBuffer = attributeBuffers[sourceName];\n\t\t\t\tlet {offset, scale} = sourceBuffer;\n\t\t\t\tlet view = new DataView(sourceBuffer.buffer);\n\n\t\t\t\tconst getter = view.getFloat32.bind(view);\n\n\t\t\t\tfor(let j = 0; j < numPoints; j++){\n\t\t\t\t\tlet value = getter(j * 4, true);\n\n\t\t\t\t\tf32[j * numVectorElements + iElement] = (value / scale) + offset;\n\t\t\t\t}\n\n\t\t\t\tiElement++;\n\t\t\t}\n\n\t\t\tlet vecAttribute = new PointAttribute(name, PointAttributeTypes.DATA_TYPE_FLOAT, 3);\n\n\t\t\tattributeBuffers[name] = { \n\t\t\t\tbuffer: buffer, \n\t\t\t\tattribute: vecAttribute,\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\t// let duration = performance.now() - tStart;\n\t// let pointsPerMs = numPoints / duration;\n\t// console.log(`duration: ${duration.toFixed(1)}ms, #points: ${numPoints}, points/ms: ${pointsPerMs.toFixed(1)}`);\n\n\tlet message = {\n\t\tbuffer: buffer,\n\t\tattributeBuffers: attributeBuffers,\n\t\tdensity: occupancy,\n\t};\n\n\tlet transferables = [];\n\tfor (let property in message.attributeBuffers) {\n\t\ttransferables.push(message.attributeBuffers[property].buffer);\n\t}\n\ttransferables.push(buffer);\n\t// console.log(\"new\", message)\n\n\tpostMessage(message, transferables);\n};\n","/**\n * Some types of possible point attribute data formats\n *\n * @class\n */\nconst PointAttributeTypes:PointAttributeTypesType = {\n\tDATA_TYPE_DOUBLE: {ordinal: 0, name: \"double\", size: 8},\n\tDATA_TYPE_FLOAT:  {ordinal: 1, name: \"float\",  size: 4},\n\tDATA_TYPE_INT8:   {ordinal: 2, name: \"int8\",   size: 1},\n\tDATA_TYPE_UINT8:  {ordinal: 3, name: \"uint8\",  size: 1},\n\tDATA_TYPE_INT16:  {ordinal: 4, name: \"int16\",  size: 2},\n\tDATA_TYPE_UINT16: {ordinal: 5, name: \"uint16\", size: 2},\n\tDATA_TYPE_INT32:  {ordinal: 6, name: \"int32\",  size: 4},\n\tDATA_TYPE_UINT32: {ordinal: 7, name: \"uint32\", size: 4},\n\tDATA_TYPE_INT64:  {ordinal: 8, name: \"int64\",  size: 8},\n\tDATA_TYPE_UINT64: {ordinal: 9, name: \"uint64\", size: 8}\n};\n\ntype PointAttributeTypesType = {\n\t[key: string]: PointAttributeTypeType;\n};\n\ntype PointAttributeTypeType = {\n\tordinal: number;\n\tname: string;\n\tsize: number;\n};\n\nlet i = 0;\nfor (let obj in PointAttributeTypes) {\n\tPointAttributeTypes[i] = PointAttributeTypes[obj];\n\ti++;\n}\n\nexport {PointAttributeTypes};\n\ntype RangeType = number[] | [number[], number[]]\n\n// Class that represents a certain point attribute\nclass PointAttribute{\n\tbyteSize: number;\n\tdescription: string;\n\tpublic initialRange?: RangeType\n\n\tconstructor(\n\t\tpublic name:string,\n\t\tpublic type:PointAttributeTypeType,\n\t\tpublic numElements:number,\n\t\tpublic range: RangeType = [Infinity, -Infinity]\n\t){\n\t\tthis.byteSize = this.numElements * this.type.size;\n\t\tthis.description = \"\";\n\t}\n};\n\nexport {PointAttribute};\n\n// Map that represents all point attributes, these were previoiusly properties of the PointAttribute class\nexport const POINT_ATTRIBUTES:{[key:string]:PointAttribute} = {\n\tPOSITION_CARTESIAN: new PointAttribute(\"POSITION_CARTESIAN\", PointAttributeTypes.DATA_TYPE_FLOAT, 3),\n\tRGBA_PACKED: new PointAttribute(\"COLOR_PACKED\", PointAttributeTypes.DATA_TYPE_INT8, 4),\n\tCOLOR_PACKED: new PointAttribute(\"COLOR_PACKED\", PointAttributeTypes.DATA_TYPE_INT8, 4),\n\tRGB_PACKED: new PointAttribute(\"COLOR_PACKED\", PointAttributeTypes.DATA_TYPE_INT8, 3),\n\tNORMAL_FLOATS: new PointAttribute(\"NORMAL_FLOATS\", PointAttributeTypes.DATA_TYPE_FLOAT, 3),\n\tINTENSITY: new PointAttribute(\"INTENSITY\", PointAttributeTypes.DATA_TYPE_UINT16, 1),\n\tCLASSIFICATION: new PointAttribute(\"CLASSIFICATION\", PointAttributeTypes.DATA_TYPE_UINT8, 1),\n\tNORMAL_SPHEREMAPPED: new PointAttribute(\"NORMAL_SPHEREMAPPED\", PointAttributeTypes.DATA_TYPE_UINT8, 2),\n\tNORMAL_OCT16: new PointAttribute(\"NORMAL_OCT16\", PointAttributeTypes.DATA_TYPE_UINT8, 2),\n\tNORMAL: new PointAttribute(\"NORMAL\", PointAttributeTypes.DATA_TYPE_FLOAT, 3),\n\tRETURN_NUMBER: new PointAttribute(\"RETURN_NUMBER\", PointAttributeTypes.DATA_TYPE_UINT8, 1),\n\tNUMBER_OF_RETURNS: new PointAttribute(\"NUMBER_OF_RETURNS\", PointAttributeTypes.DATA_TYPE_UINT8, 1),\n\tSOURCE_ID: new PointAttribute(\"SOURCE_ID\", PointAttributeTypes.DATA_TYPE_UINT16, 1),\n\tINDICES: new PointAttribute(\"INDICES\", PointAttributeTypes.DATA_TYPE_UINT32, 1),\n\tSPACING: new PointAttribute(\"SPACING\", PointAttributeTypes.DATA_TYPE_FLOAT, 1),\n\tGPS_TIME: new PointAttribute(\"GPS_TIME\", PointAttributeTypes.DATA_TYPE_DOUBLE, 1)\n}\n\ntype PAVectorType = {\n\tname: string;\n\tattributes: string[];\n}\n\n// Instantiated during loading\nexport class PointAttributes{\n\n\n\n\t// pointAttributes will be a list of strings\n\tconstructor(pointAttributes?:string[],\n\t\t\t\tpublic attributes:PointAttribute[] = [],\n\t\t\t\tpublic byteSize:number = 0,\n\t\t\t\tpublic size:number = 0,\n\t\t\t\tpublic vectors:PAVectorType[]=[]\n\t\t){\n\n\t\tif (pointAttributes != null) {\n\t\t\tfor (let i = 0; i < pointAttributes.length; i++) {\n\t\t\t\tlet pointAttributeName = pointAttributes[i];\n\t\t\t\tlet pointAttribute = POINT_ATTRIBUTES[pointAttributeName];\n\t\t\t\tthis.attributes.push(pointAttribute);\n\t\t\t\tthis.byteSize += pointAttribute.byteSize;\n\t\t\t\tthis.size++;\n\t\t\t}\n\t\t}\n\t}\n\n\t// I hate these argument names that are so similar to each other but have completely different types\n\tadd(pointAttribute:PointAttribute){\n\t\tthis.attributes.push(pointAttribute);\n\t\tthis.byteSize += pointAttribute.byteSize;\n\t\tthis.size++;\n\t};\n\n\taddVector(vector:PAVectorType){\n\t\tthis.vectors.push(vector);\n\t}\n\n\thasNormals(){\n\t\tfor (let name in this.attributes) {\n\t\t\tlet pointAttribute = this.attributes[name];\n\t\t\tif (\n\t\t\t\tpointAttribute === POINT_ATTRIBUTES.NORMAL_SPHEREMAPPED ||\n\t\t\t\tpointAttribute === POINT_ATTRIBUTES.NORMAL_FLOATS ||\n\t\t\t\tpointAttribute === POINT_ATTRIBUTES.NORMAL ||\n\t\t\t\tpointAttribute === POINT_ATTRIBUTES.NORMAL_OCT16) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t};\n\n}\n",null],"names":[],"version":3,"file":"decoder.worker.5c40dda9.js.map"}