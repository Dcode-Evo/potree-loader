{"mappings":";;;;;;;;;;;;MIOa,yCAAc;gBAgBlB,MAAkB,EAClB,WAAiB,CAFzB,CAAA;QACQ,IAAA,CAAA,MAAM,GAAN,MAAM;QACN,IAAA,CAAA,WAAW,GAAX,WAAW;QAfnB,IAAA,CAAA,GAAG,GAAkB,IAAI;QACzB,IAAA,CAAA,eAAe,GAA2B,IAAI;QAC9C,IAAA,CAAA,OAAO,GAAW,CAAC;QAEnB,IAAA,CAAA,eAAe,GAAW,CAAC;QAC3B,IAAA,CAAA,kBAAkB,GAAW,CAAC,CAAE,CAA2F,AAA3F,EAA2F,AAA3F,yFAA2F;QAK3H,IAAA,CAAA,QAAQ,GAAY,KAAK;QAOxB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK;QAC9C,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,GAAA,CAAI,aAAM;QACnE,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,GAAA,CAAI,aAAM;IACzE,CAAC;IAED,OAAO,GAAP,CAAA;QACC,EAAyB,AAAzB,uBAAyB;QACzB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAC,IAAI,GAAI,IAAI,CAAC,OAAO;;QACvC,IAAI,CAAC,QAAQ,GAAG,IAAI;IACrB,CAAC;;;;;;AEjCK,KAAA,CAAM,yCAAsB,GAAG,CAAC;AAChC,KAAA,CAAM,yCAAoB,GAAG,CAAC;AAC9B,KAAA,CAAM,yCAAiB,GAAG,CAAC;AAC3B,KAAA,CAAM,yCAAsB,GAAG,EAAE;AACjC,KAAA,CAAM,yCAA2B,GAAG,EAAE;AACtC,KAAA,CAAM,yCAAsB,GAAG,CAAC;AAChC,KAAA,CAAM,yCAAwB,GAAG,EAAE;AACnC,KAAA,CAAM,yCAAoB,GAAG,OAAS;AACtC,KAAA,CAAM,yCAAgB,GAAG,CAAC;AAC1B,KAAA,CAAM,yCAAqB,GAAG,CAAC;AAC/B,KAAA,CAAM,yCAAkB,GAAG,CAAmB;AAC9C,KAAA,CAAM,yCAAW,GAAG,GAAA,CAAI,YAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;AACrC,KAAA,CAAM,yCAAuB,GAAG,GAAA,CAAI,cAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;;;;MEFhD,yCAAa,SAAQ,qBAAc;iBAAhD,CAAA;Q,K,I,S;QACE,EAAiD,AAAjD,+CAAiD;QACjD,EAAmD,AAAnD,iDAAmD;QACnD,IAAA,CAAA,QAAQ,GAA0B,CAAlC;YACE,WAAW,EAAE,CAAA;gBAAE,IAAI,EAAE,CAAG;gBAAE,KAAK,EAAE,CAAC;YAAA,CAAE;YACpC,YAAY,EAAE,CAAA;gBAAE,IAAI,EAAE,CAAG;gBAAE,KAAK,EAAE,CAAC;YAAA,CAAE;YACrC,GAAG,EAAE,CAAA;gBAAE,IAAI,EAAE,CAAG;gBAAE,KAAK,EAAE,IAAI;YAAA,CAAE;QAChC,CAAA;IACH,CAAC;;;;AElBD,GAAA,CAAY,yCAIX;CAJD,QAAA,CAAY,yCAAQ,EAApB,CAAA;IACE,yCAAA,CAAA,yCAAA,CAAA,CAAA,aAAA,CAAA,IAAA,CAAY;IACZ,yCAAA,CAAA,yCAAA,CAAA,CAAA,iBAAA,CAAA,IAAA,CAAgB;IAChB,yCAAA,CAAA,yCAAA,CAAA,CAAA,qBAAA,CAAA,IAAA,CAAoB;AACtB,CAAC,EAJW,yCAAQ,KAAR,yCAAQ,GAAA,CAAA;AAAA,CAAA;;;AEFpB,GAAA,CAAY,yCAIX;CAJD,QAAA,CAAY,yCAAa,EAAzB,CAAA;IACE,yCAAA,CAAA,yCAAA,CAAA,CAAA,UAAA,CAAA,IAAA,CAAS;IACT,yCAAA,CAAA,yCAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAc;IACd,yCAAA,CAAA,yCAAA,CAAA,CAAA,aAAA,CAAA,IAAA,CAAY;AACd,CAAC,EAJW,yCAAa,KAAb,yCAAa,GAAA,CAAA;AAAA,CAAA;AAMzB,GAAA,CAAY,yCAIX;CAJD,QAAA,CAAY,yCAAU,EAAtB,CAAA;IACE,yCAAA,CAAA,yCAAA,CAAA,CAAA,WAAA,CAAA,IAAA,CAAU;IACV,yCAAA,CAAA,yCAAA,CAAA,CAAA,WAAA,CAAA,IAAA,CAAU;IACV,yCAAA,CAAA,yCAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAc;AAChB,CAAC,EAJW,yCAAU,KAAV,yCAAU,GAAA,CAAA;AAAA,CAAA;AAMtB,GAAA,CAAY,yCAGX;CAHD,QAAA,CAAY,yCAAQ,EAApB,CAAA;IACE,yCAAA,CAAA,yCAAA,CAAA,CAAA,WAAA,CAAA,IAAA,CAAU;IACV,yCAAA,CAAA,yCAAA,CAAA,CAAA,WAAA,CAAA,IAAA,CAAU;AACZ,CAAC,EAHW,yCAAQ,KAAR,yCAAQ,GAAA,CAAA;AAAA,CAAA;AAKpB,GAAA,CAAY,yCAGX;CAHD,QAAA,CAAY,yCAAgB,EAA5B,CAAA;IACE,yCAAA,CAAA,yCAAA,CAAA,CAAA,UAAA,CAAA,IAAA,CAAS;IACT,yCAAA,CAAA,yCAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAc;AAChB,CAAC,EAHW,yCAAgB,KAAhB,yCAAgB,GAAA,CAAA;AAAA,CAAA;AAK5B,GAAA,CAAY,yCAkBX;CAlBD,QAAA,CAAY,yCAAc,EAA1B,CAAA;IACE,yCAAA,CAAA,yCAAA,CAAA,CAAA,QAAA,CAAA,IAAA,CAAO;IACP,yCAAA,CAAA,yCAAA,CAAA,CAAA,UAAA,CAAA,IAAA,CAAS;IACT,yCAAA,CAAA,yCAAA,CAAA,CAAA,UAAA,CAAA,IAAA,CAAS;IACT,yCAAA,CAAA,yCAAA,CAAA,CAAA,WAAA,CAAA,IAAA,CAAU;IACV,yCAAA,CAAA,yCAAA,CAAA,CAAA,cAAA,CAAA,IAAA,CAAa;IACb,yCAAA,CAAA,yCAAA,CAAA,CAAA,cAAA,CAAA,IAAA,CAAa;IACb,yCAAA,CAAA,yCAAA,CAAA,CAAA,uBAAA,CAAA,IAAA,CAAsB;IACtB,yCAAA,CAAA,yCAAA,CAAA,CAAA,QAAA,CAAA,IAAA,CAAO;IACP,yCAAA,CAAA,yCAAA,CAAA,CAAA,oBAAA,CAAA,IAAA,CAAmB;IACnB,yCAAA,CAAA,yCAAA,CAAA,CAAA,gBAAA,CAAA,IAAA,CAAe;IACf,yCAAA,CAAA,yCAAA,CAAA,CAAA,mBAAA,CAAA,IAAA,CAAkB;IAClB,yCAAA,CAAA,yCAAA,CAAA,CAAA,kBAAA,CAAA,IAAA,CAAiB;IACjB,yCAAA,CAAA,yCAAA,CAAA,CAAA,WAAA,EAAA,IAAA,CAAW;IACX,yCAAA,CAAA,yCAAA,CAAA,CAAA,WAAA,EAAA,IAAA,CAAW;IACX,yCAAA,CAAA,yCAAA,CAAA,CAAA,UAAA,EAAA,IAAA,CAAU;IACV,yCAAA,CAAA,yCAAA,CAAA,CAAA,eAAA,EAAA,IAAA,CAAe;IACf,yCAAA,CAAA,yCAAA,CAAA,CAAA,cAAA,EAAA,IAAA,CAAc;AAChB,CAAC,EAlBW,yCAAc,KAAd,yCAAc,GAAA,CAAA;AAAA,CAAA;;;;;;;;AGtB1B,yBAAc,GAAC,CAAy7b;;;;ACAx8b,yBAAc,GAAC,CAAkzO;;;;SEEjzO,yCAAgB,CAAC,IAAY,EAA7C,CAAA;IACE,MAAA,CAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE;AAClD,CAAC;SAKe,yCAAe,CAAC,CAAsB,EAAE,CAAsB,EAA9E,CAAA;IACE,KAAA,CAAM,EAAE,GAAG,CAAC,CAAC,IAAI;IACjB,KAAA,CAAM,EAAE,GAAG,CAAC,CAAC,IAAI;IACjB,EAAA,EAAI,EAAE,CAAC,MAAM,KAAK,EAAE,CAAC,MAAM,EACzB,MAAA,CAAO,EAAE,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM;SACvB,EAAA,EAAI,EAAE,GAAG,EAAE,EAChB,MAAA,CAAO,EAAE;SACJ,EAAA,EAAI,EAAE,GAAG,EAAE,EAChB,MAAA,CAAO,CAAC;SAER,MAAA,CAAO,CAAC;AAEZ,CAAC;;;;AElBM,KAAA,CAAM,yCAAsB,GAAoB,CAAvD;AACE,KAAC,EAAE,GAAA,CAAI,cAAO,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAG;AACjC,KAAC,EAAE,GAAA,CAAI,cAAO,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAG;AACjC,KAAC,EAAE,GAAA,CAAI,cAAO,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAG;AACpC,KAAC,EAAE,GAAA,CAAI,cAAO,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG;AACjC,KAAC,EAAE,GAAA,CAAI,cAAO,CAAC,CAAG,EAAE,GAAG,EAAE,CAAG,EAAE,CAAG;AACjC,KAAC,EAAE,GAAA,CAAI,cAAO,CAAC,CAAG,EAAE,GAAG,EAAE,CAAG,EAAE,CAAG;AACjC,KAAC,EAAE,GAAA,CAAI,cAAO,CAAC,CAAG,EAAE,IAAI,EAAE,CAAG,EAAE,CAAG;AAClC,KAAC,EAAE,GAAA,CAAI,cAAO,CAAC,CAAG,EAAE,CAAC,EAAE,CAAG,EAAE,CAAG;AAC/B,KAAC,EAAE,GAAA,CAAI,cAAO,CAAC,CAAG,EAAE,CAAC,EAAE,CAAG,EAAE,CAAG;AAC/B,KAAC,EAAE,GAAA,CAAI,cAAO,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG;AACjC,MAAE,EAAE,GAAA,CAAI,cAAO,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG;IAClC,OAAO,EAAE,GAAA,CAAI,cAAO,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;AACxC,CAAA;;;;;;AEbM,KAAA,CAAM,yCAAS,GAAc,CAApC;IACE,CAAC;AAAA,SAAC;QAAE,GAAA,CAAI,YAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAAC,CAAC;IACvB,CAAC;AAAA,SAAC;QAAE,GAAA,CAAI,YAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAAC,CAAC;AACxB,CAAA;;;;AEHM,KAAA,CAAM,yCAAO,GAAc,CAAlC;IACE,CAAC;AAAA,SAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI;IAAC,CAAC;IACpC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI;IAAC,CAAC;IACpC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,SAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;AACtC,CAAA;;;;AEZM,KAAA,CAAM,yCAAM,GAAc,CAAjC;IACE,CAAC;AAAA,SAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI;IAAC,CAAC;IACpC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,SAAG;QAAE,GAAA,CAAI,YAAK,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;AACrC,CAAA;;;;AEZM,KAAA,CAAM,yCAAO,GAAc,CAAlC;IACE,CAAC;AAAA,SAAC;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,CAAC,EAAE,KAAK;IAAC,CAAC;IAC/B,CAAC;AAAA,SAAC,GAAG,CAAC;QAAE,GAAA,CAAI,YAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAAC,CAAC;IAC3B,CAAC;AAAA,SAAC,GAAG,CAAC;QAAE,GAAA,CAAI,YAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAAC,CAAC;IAC3B,CAAC;AAAA,WAAK;QAAE,GAAA,CAAI,YAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAAC,CAAC;IAC3B,CAAC;AAAA,SAAC,GAAG,CAAC;QAAE,GAAA,CAAI,YAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAAC,CAAC;IAC3B,CAAC;AAAA,SAAC,GAAG,CAAC;QAAE,GAAA,CAAI,YAAK,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC;IAAC,CAAC;IAC9B,CAAC;AAAA,SAAC;QAAE,GAAA,CAAI,YAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAAC,CAAC;AACxB,CAAA;;;;AEPM,KAAA,CAAM,yCAAQ,GAAc,CAAnC;IACE,CAAC;AAAA,SAAC;QAAE,GAAA,CAAI,YAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM;IAAC,CAAC;IACtC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM;IAAC,CAAC;IACxC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,GAAG,EAAE,MAAM,EAAE,MAAM;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM;IAAC,CAAC;IACxC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM;IAAC,CAAC;IACvC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,CAAG,EAAE,CAAG,EAAE,KAAK;IAAC,CAAC;IACjC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM;IAAC,CAAC;IACxC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM;IAAC,CAAC;IACxC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM;IAAC,CAAC;IACxC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM;IAAC,CAAC;IACxC,CAAC;AAAA,SAAC;QAAE,GAAA,CAAI,YAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM;IAAC,CAAC;AACvC,CAAA;;;;AEbM,KAAA,CAAM,yCAAO,GAAc,CAAlC;IACE,CAAC;AAAA,SAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI;IAAC,CAAC;IACpC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI;IAAC,CAAC;IACpC,CAAC;AAAA,SAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK;IAAC,CAAC;AACtC,CAAA;;;;AEZM,KAAA,CAAM,yCAAY,GAAc,CAAvC;IACE,CAAC;AAAA,SAAC;QAAE,GAAA,CAAI,YAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM;IAAC,CAAC;IACtC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM;IAAC,CAAC;IACxC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM;IAAC,CAAC;IACvC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,CAAG,EAAE,MAAM,EAAE,MAAM;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,CAAG,EAAE,MAAM,EAAE,MAAM;IAAC,CAAC;IACrC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM;IAAC,CAAC;IACtC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM;IAAC,CAAC;IACxC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM;IAAC,CAAC;IACxC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK;IAAC,CAAC;IACvC,CAAC;AAAA,WAAG;QAAE,GAAA,CAAI,YAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM;IAAC,CAAC;IACxC,CAAC;AAAA,SAAC;QAAE,GAAA,CAAI,YAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM;IAAC,CAAC;AACvC,CAAA;;;;;;SEJe,yCAAmB,CAAC,KAAa,EAAE,MAAc,EAAE,KAAY,EAA/E,CAAA;IACE,KAAA,CAAM,IAAI,GAAG,KAAK,GAAG,MAAM;IAC3B,KAAA,CAAM,IAAI,GAAG,GAAA,CAAI,UAAU,CAAC,CAAC,GAAG,IAAI;IAEpC,KAAA,CAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG;IAClC,KAAA,CAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG;IAClC,KAAA,CAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG;IAElC,GAAA,CAAK,GAAA,CAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,GAAI,CAA/B;QACE,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC;QACf,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;QACnB,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;IACpB,CAAA;IAED,KAAA,CAAM,OAAO,GAAG,GAAA,CAAI,kBAAW,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,iBAAU;IAC/D,OAAO,CAAC,WAAW,GAAG,IAAI;IAC1B,OAAO,CAAC,SAAS,GAAG,oBAAa;IAEjC,MAAA,CAAO,OAAO;AAChB,CAAC;SAEe,yCAAuB,CAAC,QAAmB,EAA3D,CAAA;IACE,KAAA,CAAM,IAAI,GAAG,EAAE;IAEf,KAAA,CAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAQ;IAC9C,MAAM,CAAC,KAAK,GAAG,IAAI;IACnB,MAAM,CAAC,MAAM,GAAG,IAAI;IAEpB,KAAA,CAAM,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,CAAI;IAEtC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI;IAC7B,KAAA,CAAM,WAAW,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI;IAEjE,GAAA,CAAK,GAAA,CAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAI,CAA1C;QACE,KAAA,CAAM,IAAI,GAAG,QAAQ,CAAC,CAAC;QACvB,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAG,CAAA,EAAI,IAAI,CAAC,CAAC,EAAE,YAAY;IAC3D,CAAA;IAED,OAAO,CAAC,SAAS,GAAG,WAAW;IAC/B,OAAO,CAAC,IAAI;IAEZ,KAAA,CAAM,OAAO,GAAG,GAAA,CAAI,oBAAa,CAAC,MAAM;IACxC,OAAO,CAAC,WAAW,GAAG,IAAI;IAE1B,OAAO,CAAC,SAAS,GAAG,mBAAY;IAChC,EAAgC,AAAhC,8BAAgC;IAEhC,MAAA,CAAO,OAAO;AAChB,CAAC;SAEe,yCAA6B,CAAC,cAA+B,EAA7E,CAAA;IACE,KAAA,CAAM,KAAK,GAAG,GAAG;IACjB,KAAA,CAAM,MAAM,GAAG,GAAG;IAClB,KAAA,CAAM,IAAI,GAAG,KAAK,GAAG,MAAM;IAE3B,KAAA,CAAM,IAAI,GAAG,GAAA,CAAI,UAAU,CAAC,CAAC,GAAG,IAAI;IAEpC,GAAA,CAAK,GAAA,CAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,GAC1B,GAAA,CAAK,GAAA,CAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAI,CAAjC;QACE,KAAA,CAAM,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC;QAEvB,GAAA,CAAI,KAAK;QACT,EAAA,EAAI,cAAc,CAAC,CAAC,GAClB,KAAK,GAAG,cAAc,CAAC,CAAC;aACnB,EAAA,EAAI,cAAc,CAAC,CAAC,GAAG,EAAE,GAC9B,KAAK,GAAG,cAAc,CAAC,CAAC,GAAG,EAAE;aAE7B,KAAK,GAAG,cAAc,CAAC,OAAO;QAGhC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC;QAC/B,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC;QAC/B,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC;QAC/B,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC;IAChC,CAAA;IAGH,KAAA,CAAM,OAAO,GAAG,GAAA,CAAI,kBAAW,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,iBAAU;IAC/D,OAAO,CAAC,SAAS,GAAG,oBAAa;IACjC,OAAO,CAAC,WAAW,GAAG,IAAI;IAE1B,MAAA,CAAO,OAAO;AAChB,CAAC;;;A,G,C,gC,0B,U,I,Q,C,U,E,M,E,G,E,I,E,C;I,G,C,C,G,S,C,M,E,C,G,C,G,C,G,M,G,I,K,I,G,I,G,M,C,wB,C,M,E,G,I,I,E,C;I,E,E,M,C,O,K,C,W,M,C,O,C,Q,K,C,W,C,G,O,C,Q,C,U,E,M,E,G,E,I;S,G,C,G,C,C,G,U,C,M,G,C,E,C,I,C,E,C,G,E,E,C,G,U,C,C,G,C,I,C,G,C,G,C,C,C,I,C,G,C,G,C,C,M,E,G,E,C,I,C,C,M,E,G,M,C;I,M,C,C,G,C,I,C,I,M,C,c,C,M,E,G,E,C,G,C;A,C;AtBOD,KAAA,CAAM,oCAAc,GAAG,CAAvB;KACG,yCAAQ,CAAC,MAAM,GAAG,CAAkB;KACpC,yCAAQ,CAAC,MAAM,GAAG,CAAkB;AACtC,CAAA;AAED,KAAA,CAAM,oCAAc,GAAG,CAAvB;KACG,yCAAa,CAAC,KAAK,GAAG,CAAkB;KACxC,yCAAa,CAAC,UAAU,GAAG,CAAuB;KAClD,yCAAa,CAAC,QAAQ,GAAG,CAAqB;AAChD,CAAA;AAED,KAAA,CAAM,kCAAY,GAAG,CAArB;KACG,yCAAgB,CAAC,UAAU,GAAG,CAAoB;KAClD,yCAAgB,CAAC,KAAK,GAAG,CAAe;AAC1C,CAAA;AAED,KAAA,CAAM,gCAAU,GAAG,CAAnB;KACG,yCAAU,CAAC,MAAM,GAAG,CAAoB;KACxC,yCAAU,CAAC,MAAM,GAAG,CAAoB;KACxC,yCAAU,CAAC,UAAU,GAAG,CAAwB;AAClD,CAAA;AAED,KAAA,CAAM,gCAAU,GAAG,CAAnB;KACG,yCAAc,CAAC,GAAG,GAAG,CAAgB;KACrC,yCAAc,CAAC,KAAK,GAAG,CAAkB;KACzC,yCAAc,CAAC,KAAK,GAAG,CAAkB;KACzC,yCAAc,CAAC,MAAM,GAAG,CAAmB;KAC3C,yCAAc,CAAC,SAAS,GAAG,CAAsB;KACjD,yCAAc,CAAC,kBAAkB,GAAG,CAA+B;KACnE,yCAAc,CAAC,GAAG,GAAG,CAAgB;KACrC,yCAAc,CAAC,WAAW,GAAG,CAAwB;KACrD,yCAAc,CAAC,cAAc,GAAG,CAA2B;KAC3D,yCAAc,CAAC,aAAa,GAAG,CAA0B;KACzD,yCAAc,CAAC,MAAM,GAAG,CAAmB;KAC3C,yCAAc,CAAC,MAAM,GAAG,CAAmB;KAC3C,yCAAc,CAAC,KAAK,GAAG,CAAkB;KACzC,yCAAc,CAAC,UAAU,GAAG,CAAuB;KACnD,yCAAc,CAAC,SAAS,GAAG,CAAsB;AACnD,CAAA;AAED,KAAA,CAAM,oCAAc,GAAG,CAAvB;KACG,yCAAQ,CAAC,QAAQ,GAAG,CAAe;KACnC,yCAAQ,CAAC,YAAY,GAAG,CAAc;KACtC,yCAAQ,CAAC,gBAAgB,GAAG,CAAuB;AACrD,CAAA;MAEY,yCAAmB,SAAQ,wBAAiB;gBAiI3C,UAAA,GAAqD,CAAA;IAAA,CAAE,CAAnE,CAAA;QACE,KAAK;QA/HP,IAAA,CAAA,MAAM,GAAG,KAAK;QACd,IAAA,CAAA,GAAG,GAAG,KAAK;QACX,IAAA,CAAA,YAAY,GAAW,CAAC;QACxB,IAAA,CAAA,SAAS,GAAe,CAAA,CAAE;QAElB,IAAA,CAAA,yBAAyB,GAAG,GAAA,CAAI,GAAG;QAEnC,IAAA,CAAA,SAAS,GAAG,yCAAQ;QACpB,IAAA,CAAA,eAAe,GAAwB,yCAAuB,CAAC,IAAI,CAAC,SAAS;QAE7E,IAAA,CAAA,eAAe,GAAoB,yCAAsB;QACzD,IAAA,CAAA,qBAAqB,GAAwB,yCAA6B,CAChF,IAAI,CAAC,eAAe;QAGtB,IAAA,CAAA,QAAQ,GAAgE,CAAxE;YACE,MAAM,EAAE,iCAAW,CAAC,CAAI,KAAE,CAAC;AAAA,iBAAC;AAAE,iBAAC;AAAE,iBAAC;YAAA,CAA6B;YAC/D,oBAAoB,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAG;YAC1C,aAAa,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAG;YACnC,iBAAiB,EAAE,iCAAW,CAAC,CAAG,IAAE,IAAI,CAAC,qBAAqB,IAAI,GAAA,CAAI,cAAO;YAC7E,YAAY,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAC;YAChC,SAAS,EAAE,iCAAW,CAAC,CAAW,YAAE,CAAA,CAAS;YAC7C,QAAQ,EAAE,iCAAW,CAAC,CAAG,IAAE,IAAI;YAC/B,OAAO,EAAE,iCAAW,CAAC,CAAI,KAAE,CAAC;AAAA,iBAAC;AAAE,iBAAC;AAAE,iBAAC;YAAA,CAA6B;YAChE,GAAG,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAG;YACzB,QAAQ,EAAE,iCAAW,CAAC,CAAG,IAAE,IAAI,CAAC,eAAe,IAAI,GAAA,CAAI,cAAO;YAC9D,SAAS,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAG;YAC/B,SAAS,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAG;YAC/B,mBAAmB,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAC;YACvC,iBAAiB,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAC;YACrC,cAAc,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAC;YAClC,cAAc,EAAE,iCAAW,CAAC,CAAI,KAAE,CAAC;AAAA,iBAAC;AAAE,qBAAK;YAAA,CAAqB;YAChE,UAAU,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAC;YAC9B,KAAK,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAG;YAC3B,OAAO,EAAE,iCAAW,CAAC,CAAG,IAAE,yCAAsB;YAChD,OAAO,EAAE,iCAAW,CAAC,CAAG,IAAE,yCAAsB;YAChD,UAAU,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAC;YAC9B,OAAO,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAG;YAC7B,OAAO,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAC;YAC3B,aAAa,EAAE,iCAAW,CAAC,CAAG,IAAE,yCAAsB;YACtD,WAAW,EAAE,iCAAW,CAAC,CAAG,IAAE,yCAAoB;YAClD,QAAQ,EAAE,iCAAW,CAAC,CAAG,IAAE,yCAAiB;YAC5C,YAAY,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAG;YAClC,WAAW,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAG;YACjC,IAAI,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAC;YACxB,OAAO,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAG;YAC7B,OAAO,EAAE,iCAAW,CAAC,CAAU,WAAE,CAAA,CAAE;YACnC,UAAU,EAAE,iCAAW,CAAC,CAAG,IAAE,GAAG;YAChC,MAAM,EAAE,iCAAW,CAAC,CAAG,IAAE,GAAA,CAAI,YAAK,CAAC,QAAQ;YAC3C,EAAa,AAAb,WAAa;YACb,YAAY,EAAE,iCAAW,CAAC,CAAG,IAAE,IAAI,CAAC,mBAAmB,IAAI,GAAA,CAAI,cAAO;YACtE,OAAO,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAG;YAC7B,eAAe,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAC;YACnC,UAAU,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAC;YAC9B,UAAU,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAC;YAC9B,aAAa,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAC;YACjC,IAAI,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAC;YACxB,SAAS,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAC;YAC7B,kBAAkB,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAC;YACtC,uBAAuB,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAC;YAC3C,0BAA0B,EAAE,iCAAW,CAAC,CAAI,KAAE,GAAA,CAAI,cAAO;YACzD,qBAAqB,EAAE,iCAAW,CAAC,CAAI,KAAE,yCAAuB,CAAC,KAAK;YACtE,uBAAuB,EAAE,iCAAW,CAAC,CAAG,IAAE,IAAI;YAC9C,qBAAqB,EAAE,iCAAW,CAAC,CAAG,IAAE,CAAG;QAC5C,CAAA;QAqCuB,IAAA,CAAA,UAAU,GAAY,KAAK;QAC3B,IAAA,CAAA,QAAQ,GAAY,KAAK;QACzB,IAAA,CAAA,cAAc,GAAmB,yCAAc,CAAC,GAAG;QACnD,IAAA,CAAA,aAAa,GAAkB,yCAAa,CAAC,QAAQ;QACrD,IAAA,CAAA,QAAQ,GAAa,yCAAQ,CAAC,QAAQ;QACtC,IAAA,CAAA,MAAM,GAAY,KAAK;QACvB,IAAA,CAAA,KAAK,GAAe,yCAAU,CAAC,MAAM;QACrC,IAAA,CAAA,QAAQ,GAAa,yCAAQ,CAAC,MAAM;QACpC,IAAA,CAAA,gBAAgB,GAAqB,yCAAgB,CAAC,KAAK;QAC3D,IAAA,CAAA,iBAAiB,GAAY,KAAK;QAClC,IAAA,CAAA,cAAc,GAAY,KAAK;QAEvD,IAAA,CAAA,UAAU,GAAG,CAAb;YACE,QAAQ,EAAE,CAAA;gBAAE,IAAI,EAAE,CAAI;gBAAE,KAAK,EAAE,CAAA,CAAE;YAAA,CAAE;YACnC,KAAK,EAAE,CAAA;gBAAE,IAAI,EAAE,CAAI;gBAAE,KAAK,EAAE,CAAA,CAAE;YAAA,CAAE;YAChC,MAAM,EAAE,CAAA;gBAAE,IAAI,EAAE,CAAI;gBAAE,KAAK,EAAE,CAAA,CAAE;YAAA,CAAE;YACjC,SAAS,EAAE,CAAA;gBAAE,IAAI,EAAE,CAAG;gBAAE,KAAK,EAAE,CAAA,CAAE;YAAA,CAAE;YACnC,cAAc,EAAE,CAAA;gBAAE,IAAI,EAAE,CAAG;gBAAE,KAAK,EAAE,CAAA,CAAE;YAAA,CAAE;YACxC,YAAY,EAAE,CAAA;gBAAE,IAAI,EAAE,CAAG;gBAAE,KAAK,EAAE,CAAA,CAAE;YAAA,CAAE;YACtC,eAAe,EAAE,CAAA;gBAAE,IAAI,EAAE,CAAG;gBAAE,KAAK,EAAE,CAAA,CAAE;YAAA,CAAE;YACzC,aAAa,EAAE,CAAA;gBAAE,IAAI,EAAE,CAAG;gBAAE,KAAK,EAAE,CAAA,CAAE;YAAA,CAAE;YACvC,OAAO,EAAE,CAAA;gBAAE,IAAI,EAAE,CAAI;gBAAE,KAAK,EAAE,CAAA,CAAE;YAAA,CAAE;QACnC,CAAA;QAMC,KAAA,CAAM,GAAG,GAAI,IAAI,CAAC,mBAAmB,GAAG,yCAAmB,CAAC,IAAI,EAAE,CAAC,EAAE,GAAA,CAAI,YAAK,CAAC,QAAQ;QACvF,GAAG,CAAC,SAAS,GAAG,oBAAa;QAC7B,GAAG,CAAC,SAAS,GAAG,oBAAa;QAC7B,IAAI,CAAC,UAAU,CAAC,CAAc,eAAE,GAAG;QAEnC,IAAI,CAAC,QAAQ,GAAG,8BAAQ,CAAC,UAAU,CAAC,QAAQ,EAAE,yCAAQ,CAAC,MAAM;QAC7D,IAAI,CAAC,IAAI,GAAG,8BAAQ,CAAC,UAAU,CAAC,IAAI,EAAE,CAAG;QACzC,IAAI,CAAC,OAAO,GAAG,8BAAQ,CAAC,UAAU,CAAC,OAAO,EAAE,CAAG;QAC/C,IAAI,CAAC,OAAO,GAAG,8BAAQ,CAAC,UAAU,CAAC,OAAO,EAAE,EAAI;QAEhD,IAAI,CAAC,SAAS,KAAK,UAAU,CAAC,SAAS;QAEvC,IAAI,CAAC,cAAc,GAAG,yCAAsB;QAE5C,IAAI,CAAC,sBAAsB,CAAC,MAAM,GAAG,CAAC;AAAA,aAAC;AAAE,aAAC;AAAE,aAAC;QAAA,CAAC;QAC9C,IAAI,CAAC,sBAAsB,CAAC,cAAc,GAAG,CAAC;AAAA,aAAC;AAAE,aAAC;AAAE,aAAC;QAAA,CAAC;QACtD,IAAI,CAAC,sBAAsB,CAAC,OAAO,GAAG,CAAC;AAAA,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;QAAA,CAAC;QAElD,IAAI,CAAC,YAAY,GAAG,IAAI;QACxB,EAAsC,AAAtC,oCAAsC;QACtC,EAAoC,AAApC,kCAAoC;QAEpC,IAAI,CAAC,kBAAkB;IACzB,CAAC;IAED,OAAO,GAAP,CAAA;QACE,KAAK,CAAC,OAAO;QAEb,EAAA,EAAI,IAAI,CAAC,eAAe,EAAE,CAA1B;YACE,IAAI,CAAC,eAAe,CAAC,OAAO;YAC5B,IAAI,CAAC,eAAe,GAAG,SAAS;QACjC,CAAA;QAED,EAAA,EAAI,IAAI,CAAC,mBAAmB,EAAE,CAA9B;YACE,IAAI,CAAC,mBAAmB,CAAC,OAAO;YAChC,IAAI,CAAC,mBAAmB,GAAG,SAAS;QACrC,CAAA;QAED,IAAI,CAAC,8BAA8B;QAEnC,EAAA,EAAI,IAAI,CAAC,qBAAqB,EAAE,CAAhC;YACE,IAAI,CAAC,qBAAqB,CAAC,OAAO;YAClC,IAAI,CAAC,qBAAqB,GAAG,SAAS;QACvC,CAAA;QAED,EAAA,EAAI,IAAI,CAAC,QAAQ,EAAE,CAAnB;YACE,IAAI,CAAC,QAAQ,CAAC,OAAO;YACrB,IAAI,CAAC,QAAQ,GAAG,SAAS;QAC1B,CAAA;IACH,CAAC;IAED,8BAA8B,GAA9B,CAAA;QACE,IAAI,CAAC,yBAAyB,CAAC,KAAK;IACtC,CAAC;IAED,kBAAkB,GAAlB,CAAA;QACE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,gEAAU;QAChD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,gEAAU;QAElD,EAAA,EAAI,IAAI,CAAC,OAAO,KAAK,CAAG,EAAE,CAA1B;YACE,IAAI,CAAC,QAAQ,GAAG,iBAAU;YAC1B,IAAI,CAAC,WAAW,GAAG,KAAK;YACxB,IAAI,CAAC,SAAS,GAAG,IAAI;YACrB,IAAI,CAAC,UAAU,GAAG,IAAI;YACtB,IAAI,CAAC,SAAS,GAAG,qBAAc;QAChC,CAAA,MAAM,EAAA,EAAI,IAAI,CAAC,OAAO,GAAG,CAAG,KAAK,IAAI,CAAC,MAAM,EAAE,CAAxC;YACL,IAAI,CAAC,QAAQ,GAAG,uBAAgB;YAChC,IAAI,CAAC,WAAW,GAAG,IAAI;YACvB,IAAI,CAAC,SAAS,GAAG,KAAK;YACtB,IAAI,CAAC,UAAU,GAAG,IAAI;QACvB,CAAA;QAED,EAAA,EAAI,IAAI,CAAC,QAAQ,EAAE,CAAnB;YACE,IAAI,CAAC,QAAQ,GAAG,uBAAgB;YAChC,IAAI,CAAC,WAAW,GAAG,IAAI;YACvB,IAAI,CAAC,SAAS,GAAG,IAAI;YACrB,IAAI,CAAC,UAAU,GAAG,KAAK;YACvB,IAAI,CAAC,SAAS,GAAG,qBAAc;QAChC,CAAA;QAED,IAAI,CAAC,WAAW,GAAG,IAAI;IACzB,CAAC;IAED,YAAY,CAAC,SAAiB,EAA9B,CAAA;QACE,KAAA,CAAM,KAAK,GAAa,CAAA,CAAE;iBAEjB,MAAM,CAAC,KAAyB,EAAzC,CAAA;YACE,EAAA,EAAI,KAAK,EACP,KAAK,CAAC,IAAI,EAAC,QAAA,EAAW,KAAK;QAE/B,CAAC;QAED,MAAM,CAAC,oCAAc,CAAC,IAAI,CAAC,QAAQ;QACnC,MAAM,CAAC,oCAAc,CAAC,IAAI,CAAC,aAAa;QACxC,MAAM,CAAC,gCAAU,CAAC,IAAI,CAAC,KAAK;QAC5B,MAAM,CAAC,gCAAU,CAAC,IAAI,CAAC,cAAc;QACrC,MAAM,CAAC,oCAAc,CAAC,IAAI,CAAC,QAAQ;QACnC,MAAM,CAAC,kCAAY,CAAC,IAAI,CAAC,gBAAgB;QAEzC,EAAgG,AAAhG,8FAAgG;QAChG,EAAA,EACE,IAAI,CAAC,QAAQ,KAAK,yCAAiB,IACnC,IAAI,CAAC,aAAa,KAAK,yCAAsB,IAC7C,IAAI,CAAC,WAAW,KAAK,yCAAoB,EAEzC,MAAM,CAAC,CAAmC;QAG5C,EAAA,EAAI,IAAI,CAAC,iBAAiB,EACxB,MAAM,CAAC,CAAsB;QAG/B,EAAA,EAAI,IAAI,CAAC,MAAM,EACb,MAAM,CAAC,CAAS;QAGlB,EAAA,EAAI,IAAI,CAAC,QAAQ,EACf,MAAM,CAAC,CAAiB;QAG1B,EAAA,EAAI,IAAI,CAAC,YAAY,GAAG,CAAC,EACvB,MAAM,CAAC,CAAc;QAGvB,EAAA,EAAI,IAAI,CAAC,cAAc,EACrB,MAAM,CAAC,CAAiB;QAG1B,MAAM,CAAC,CAAoB;QAC3B,MAAM,CAAC,CAAkB;QAEzB,EAAA,EAAI,IAAI,CAAC,SAAS,EAChB,MAAM,CAAE,CAAY;QAItB,EAAmH,AAAnH,iHAAmH;QACnH,KAAA,CAAM,WAAW,GAAG,SAAS,CAAC,KAAK;QACnC,EAAA,EAAI,WAAW,EAAE,CAAjB;YACE,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAC3B,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,CAAE;QACjD,CAAA;QACD,KAAK,CAAC,IAAI,CAAC,SAAS;QACpB,MAAA,CAAO,KAAK,CAAC,IAAI,CAAC,CAAI;IACxB,CAAC;IAED,YAAY,CAAC,SAAqB,EAAlC,CAAA;QACE,EAAA,GAAK,SAAS,EACZ,MAAA;QAGF,IAAI,CAAC,SAAS,GAAG,SAAS;QAE1B,KAAA,CAAM,QAAQ,GACZ,IAAI,CAAC,YAAY,KAAK,SAAS,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY,KAAK,CAAC;QAE9F,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC,MAAM;QACpC,IAAI,CAAC,UAAU,CAAC,CAAc,eAAE,IAAI,CAAC,YAAY;QAEjD,EAAA,EAAI,QAAQ,EACV,IAAI,CAAC,kBAAkB;QAGzB,KAAA,CAAM,eAAe,GAAG,IAAI,CAAC,YAAY,GAAG,EAAE;QAC9C,KAAA,CAAM,cAAc,GAAG,GAAA,CAAI,YAAY,CAAC,eAAe;QAEvD,GAAA,CAAK,GAAA,CAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,GACtC,cAAc,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC;QAG1D,GAAA,CAAK,GAAA,CAAI,EAAC,GAAG,CAAC,EAAE,EAAC,GAAG,eAAe,EAAE,EAAC,GACpC,EAAA,EAAI,KAAK,CAAC,cAAc,CAAC,EAAC,IACxB,cAAc,CAAC,EAAC,IAAI,QAAQ;QAIhC,IAAI,CAAC,UAAU,CAAC,CAAW,YAAE,cAAc;IAC7C,CAAC;QAEG,QAAQ,GAAZ,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,SAAS;IACvB,CAAC;QAEG,QAAQ,CAAC,KAAgB,EAA7B,CAAA;QACE,EAAA,EAAI,IAAI,CAAC,SAAS,KAAK,KAAK,EAAE,CAA9B;YACE,IAAI,CAAC,SAAS,GAAG,KAAK;YACtB,IAAI,CAAC,eAAe,GAAG,yCAAuB,CAAC,IAAI,CAAC,SAAS;YAC7D,IAAI,CAAC,UAAU,CAAC,CAAU,WAAE,IAAI,CAAC,eAAe;QACjD,CAAA;IACH,CAAC;QAEG,cAAc,GAAlB,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,eAAe;IAC7B,CAAC;QAEG,cAAc,CAAC,KAAsB,EAAzC,CAAA;QACE,KAAA,CAAM,IAAI,GAAoB,CAAA;QAAA,CAAS;QACvC,GAAA,EAAK,KAAA,CAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,EACjC,IAAI,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,EAAE,KAAK;QAG9B,GAAA,CAAI,OAAO,GAAG,KAAK;QACnB,EAAA,EAAI,IAAI,CAAC,eAAe,KAAK,SAAS,EACpC,OAAO,GAAG,KAAK;aACV,CAAA;YACL,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,KAAK,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,MAAM;YAE/E,GAAA,EAAK,KAAA,CAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,EAAG,CAArC;gBACE,OAAO,GAAG,OAAO,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,MAAM,SAAS;gBAC5D,OAAO,GAAG,OAAO,IAAI,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG;YAC/D,CAAA;QACF,CAAA;QAED,EAAA,GAAK,OAAO,EAAE,CAAd;YACE,IAAI,CAAC,eAAe,GAAG,IAAI;YAC3B,IAAI,CAAC,uBAAuB;QAC7B,CAAA;IACH,CAAC;IAEO,uBAAuB,GAAvB,CAAA;QACN,IAAI,CAAC,qBAAqB,GAAG,yCAA6B,CAAC,IAAI,CAAC,eAAe;QAC/E,IAAI,CAAC,UAAU,CAAC,CAAmB,oBAAE,IAAI,CAAC,qBAAqB;IACjE,CAAC;QAEG,cAAc,GAAlB,CAAA;QACE,MAAA,CAAO,CAAC;YAAA,IAAI,CAAC,SAAS;YAAE,IAAI,CAAC,SAAS;QAAA,CAAC;IACzC,CAAC;QAEG,cAAc,CAAC,KAAuB,EAA1C,CAAA;QACE,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC;IAC1B,CAAC;IAED,UAAU,CACR,IAAO,EADT,CAAA;QAGE,MAAA,CAAO,IAAI,CAAC,QAAQ,KAAK,SAAS,GAAI,SAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK;IACrF,CAAC;IAED,UAAU,CACR,IAAO,EACP,KAA8C,EAFhD,CAAA;QAIE,EAAA,EAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,EAC7B,MAAA;QAGF,KAAA,CAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI;QAE/B,EAAA,EAAI,IAAI,CAAC,IAAI,KAAK,CAAG,IAClB,IAAI,CAAC,KAAe,CAAC,IAAI,CAAC,KAAc;aACpC,EAAA,EAAI,KAAK,KAAK,IAAI,CAAC,KAAK,EAC7B,IAAI,CAAC,KAAK,GAAG,KAAK;IAEtB,CAAC;IAED,cAAc,CACZ,MAAwB,EACxB,YAAoC,EACpC,MAAc,EACd,QAAuB,EAJzB,CAAA;QAME,KAAA,CAAM,UAAU,GAAG,QAAQ,CAAC,aAAa;QAEzC,EAAA,EAAI,MAAM,CAAC,IAAI,KAAK,yCAAkB,EACpC,IAAI,CAAC,GAAG,GAAI,MAA4B,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE,GAAG,GAAG;aAE7D,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAE,CAAyC,AAAzC,EAAyC,AAAzC,uCAAyC;QAEnE,KAAA,CAAM,YAAY,GAAG,QAAQ,CAAC,eAAe;QAC7C,EAAA,EAAI,YAAY,KAAK,IAAI,IAAI,YAAY,YAAY,wBAAiB,EAAE,CAAxE;YACE,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC,KAAK;YACrC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,MAAM;QACxC,CAAA,MAAM,CAAA;YACL,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,UAAU,CAAC,WAAW,GAAG,UAAU;YAC/D,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,UAAU,CAAC,YAAY,GAAG,UAAU;QAClE,CAAA;QAED,KAAA,CAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;QACxE,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC,OAAO,GAAG,QAAQ;QACpD,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,yCAAkB,CAAC,UAAU,EAAE,CAAC;QAEzF,EAAA,EACE,IAAI,CAAC,aAAa,KAAK,yCAAa,CAAC,QAAQ,IAC7C,IAAI,CAAC,cAAc,KAAK,yCAAc,CAAC,GAAG,EAE1C,IAAI,CAAC,2BAA2B,CAAC,YAAY;IAEjD,CAAC;IAEO,2BAA2B,CAAC,KAA6B,EAAzD,CAAA;QACN,KAAK,CAAC,IAAI,CAAC,yCAAe;QAE1B,KAAA,CAAM,IAAI,GAAG,GAAA,CAAI,UAAU,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC;QAC5C,KAAA,CAAM,cAAc,GAAG,GAAA,CAAI,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ;QAE5D,IAAI,CAAC,yBAAyB,CAAC,KAAK;QAEpC,GAAA,CAAK,GAAA,CAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAI,CAAvC;YACE,KAAA,CAAM,IAAI,GAAG,KAAK,CAAC,CAAC;YAEpB,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YAE/C,EAAA,EAAI,CAAC,GAAG,CAAC,EAAE,CAAX;gBACE,KAAA,CAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE;gBACxC,KAAA,CAAM,YAAY,GAAG,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,UAAU;gBAClE,KAAA,CAAM,mBAAmB,GAAG,CAAC,GAAG,YAAY;gBAE5C,cAAc,CAAC,YAAY,IAAI,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,YAAY,GAAG,mBAAmB;gBAEzF,EAA4B,AAA5B,0BAA4B;gBAC5B,KAAA,CAAM,MAAM,GAAG,YAAY,GAAG,CAAC;gBAC/B,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,IAAK,CAAC,IAAI,IAAI,CAAC,KAAK;gBAC9C,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,cAAc,CAAC,YAAY,KAAK,CAAC;gBACpD,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,cAAc,CAAC,YAAY,IAAI,GAAG;YACrD,EAA2B,AAA3B,yBAA2B;YAC5B,CAAA;YAED,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM;QACnC,CAAA;QAED,KAAA,CAAM,OAAO,GAAG,IAAI,CAAC,mBAAmB;QACxC,EAAA,EAAI,OAAO,EAAE,CAAb;YACE,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI;YAC3B,OAAO,CAAC,WAAW,GAAG,IAAI;QAC3B,CAAA;IACH,CAAC;WAEM,kBAAkB,CACvB,MAAwB,EACxB,IAA0B,EAC1B,OAAgB,EAHlB,CAAA;QAKE,MAAA,EACE,SAAwB,EACxB,MAAa,EACb,OAAe,EACf,SAAyB,EACzB,QAAkB,GALpB,CAAA;YAOE,KAAA,CAAM,kBAAkB,GAAG,QAA8B;YACzD,KAAA,CAAM,gBAAgB,GAAG,kBAAkB,CAAC,QAAQ;YAEpD,gBAAgB,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK;YACzC,gBAAgB,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU;YAEnD,KAAA,CAAM,OAAO,GAAG,kBAAkB,CAAC,yBAAyB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI;YAC1E,EAAA,EAAI,OAAO,KAAK,SAAS,EACvB,gBAAgB,CAAC,OAAO,CAAC,KAAK,GAAG,OAAO;YAG1C,gBAAgB,CAAC,OAAO,CAAC,KAAK,GAC5B,OAAO,KAAK,SAAS,GAAG,OAAO,GAAG,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI;YAEpE,EAAwF,AAAxF,sFAAwF;YACxF,EAA2D,AAA3D,yDAA2D;YAC3D,EAAyE,AAAzE,uEAAyE;YAEzE,EAA4D,AAA5D,0DAA4D;YAC3D,QAAgB,AAAC,CAAkB,AAAlB,EAAkB,AAAlB,cAAkB,AAAlB,EAAkB,EAAC,kBAAkB,GAAG,IAAI;QAChE,CAAC;IACH,CAAC;;AA5ec,yCAAA,CAAA,UAAU,GAAG,GAAA,CAAI,cAAO;AAoEpB,gCAAA,CAAA,CAAA;IAAlB,6BAAO,CAAC,CAAQ;AAAoC,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,SAAA,IAAA,CAAA,CAAA;AAChC,gCAAA,CAAA,CAAA;IAApB,6BAAO,CAAC,CAAU;AAAiC,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,WAAA,IAAA,CAAA,CAAA;AACpC,gCAAA,CAAA,CAAA;IAAf,6BAAO,CAAC,CAAK;AAAe,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,MAAA,IAAA,CAAA,CAAA;AACP,gCAAA,CAAA,CAAA;IAArB,6BAAO,CAAC,CAAW;AAAqB,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,YAAA,IAAA,CAAA,CAAA;AACnB,gCAAA,CAAA,CAAA;IAArB,6BAAO,CAAC,CAAW;AAAqB,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,YAAA,IAAA,CAAA,CAAA;AACT,gCAAA,CAAA,CAAA;IAA/B,6BAAO,CAAC,CAAqB;AAA+B,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,sBAAA,IAAA,CAAA,CAAA;AAC/B,gCAAA,CAAA,CAAA;IAA7B,6BAAO,CAAC,CAAmB;AAA6B,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,oBAAA,IAAA,CAAA,CAAA;AAC9B,gCAAA,CAAA,CAAA;IAA1B,6BAAO,CAAC,CAAgB;AAA0B,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,iBAAA,IAAA,CAAA,CAAA;AACxB,gCAAA,CAAA,CAAA;IAA1B,6BAAO,CAAC,CAAgB;AAAoC,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,iBAAA,IAAA,CAAA,CAAA;AACzC,gCAAA,CAAA,CAAA;IAAnB,6BAAO,CAAC,CAAS;AAAmB,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,UAAA,IAAA,CAAA,CAAA;AACjB,gCAAA,CAAA,CAAA;IAAnB,6BAAO,CAAC,CAAS;AAAmB,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,UAAA,IAAA,CAAA,CAAA;AACd,gCAAA,CAAA,CAAA;IAAtB,6BAAO,CAAC,CAAY;AAAsB,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,aAAA,IAAA,CAAA,CAAA;AACjB,gCAAA,CAAA,CAAA;IAAzB,6BAAO,CAAC,CAAS,UAAE,IAAI;AAAmB,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,UAAA,IAAA,CAAA,CAAA;AACX,gCAAA,CAAA,CAAA;IAA/B,6BAAO,CAAC,CAAe,gBAAE,IAAI;AAAyB,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,gBAAA,IAAA,CAAA,CAAA;AACzB,gCAAA,CAAA,CAAA;IAA7B,6BAAO,CAAC,CAAa,cAAE,IAAI;AAAuB,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,cAAA,IAAA,CAAA,CAAA;AACxB,gCAAA,CAAA,CAAA;IAA1B,6BAAO,CAAC,CAAU,WAAE,IAAI;AAAoB,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,WAAA,IAAA,CAAA,CAAA;AACpB,gCAAA,CAAA,CAAA;IAAxB,6BAAO,CAAC,CAAc;AAAwB,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,eAAA,IAAA,CAAA,CAAA;AACvB,gCAAA,CAAA,CAAA;IAAvB,6BAAO,CAAC,CAAa;AAAuB,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,cAAA,IAAA,CAAA,CAAA;AAC5B,gCAAA,CAAA,CAAA;IAAhB,6BAAO,CAAC,CAAM;AAAgB,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,OAAA,IAAA,CAAA,CAAA;AACX,gCAAA,CAAA,CAAA;IAAnB,6BAAO,CAAC,CAAS;AAAmB,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,UAAA,IAAA,CAAA,CAAA;AACd,gCAAA,CAAA,CAAA;IAAtB,6BAAO,CAAC,CAAY;AAAsB,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,aAAA,IAAA,CAAA,CAAA;AACxB,gCAAA,CAAA,CAAA;IAAlB,6BAAO,CAAC,CAAQ;AAAgB,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,QAAA,IAAA,CAAA,CAAA;AACL,gCAAA,CAAA,CAAA;IAA3B,6BAAO,CAAC,CAAiB;AAAgC,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,uBAAA,IAAA,CAAA,CAAA;AACnC,gCAAA,CAAA,CAAA;IAAtB,6BAAO,CAAC,CAAY;AAA2B,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,kBAAA,IAAA,CAAA,CAAA;AACzB,gCAAA,CAAA,CAAA;IAAtB,6BAAO,CAAC,CAAY;AAA2B,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,kBAAA,IAAA,CAAA,CAAA;AACtB,gCAAA,CAAA,CAAA;IAAzB,6BAAO,CAAC,CAAe;AAA8B,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,qBAAA,IAAA,CAAA,CAAA;AACrC,gCAAA,CAAA,CAAA;IAAhB,6BAAO,CAAC,CAAM;AAAqB,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,YAAA,IAAA,CAAA,CAAA;AACd,gCAAA,CAAA,CAAA;IAArB,6BAAO,CAAC,CAAW;AAA0B,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,iBAAA,IAAA,CAAA,CAAA;AACf,gCAAA,CAAA,CAAA;IAA9B,6BAAO,CAAC,CAAoB;AAA8B,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,qBAAA,IAAA,CAAA,CAAA;AACvB,gCAAA,CAAA,CAAA;IAAnC,6BAAO,CAAC,CAAyB;AAAmC,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,0BAAA,IAAA,CAAA,CAAA;AAC9B,gCAAA,CAAA,CAAA;IAAtC,6BAAO,CAAC,CAA4B;AAAuC,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,6BAAA,IAAA,CAAA,CAAA;AAC1C,gCAAA,CAAA,CAAA;IAAjC,6BAAO,CAAC,CAAuB;AAAkC,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,wBAAA,IAAA,CAAA,CAAA;AAC9B,gCAAA,CAAA,CAAA;IAAnC,6BAAO,CAAC,CAAyB;AAAoC,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,0BAAA,IAAA,CAAA,CAAA;AACpC,gCAAA,CAAA,CAAA;IAAjC,6BAAO,CAAC,CAAuB;AAAiC,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,wBAAA,IAAA,CAAA,CAAA;AAEzC,gCAAA,CAAA,CAAA;IAAvB,0CAAoB;AAA+B,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,aAAA,IAAA,CAAA,CAAA;AAC5B,gCAAA,CAAA,CAAA;IAAvB,0CAAoB;AAA6B,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,WAAA,IAAA,CAAA,CAAA;AAC1B,gCAAA,CAAA,CAAA;IAAvB,0CAAoB;AAAuD,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,iBAAA,IAAA,CAAA,CAAA;AACpD,gCAAA,CAAA,CAAA;IAAvB,0CAAoB;AAAyD,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,gBAAA,IAAA,CAAA,CAAA;AACtD,gCAAA,CAAA,CAAA;IAAvB,0CAAoB;AAA0C,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,WAAA,IAAA,CAAA,CAAA;AACvC,gCAAA,CAAA,CAAA;IAAvB,0CAAoB;AAA2B,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,SAAA,IAAA,CAAA,CAAA;AACxB,gCAAA,CAAA,CAAA;IAAvB,0CAAoB;AAAyC,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,QAAA,IAAA,CAAA,CAAA;AACtC,gCAAA,CAAA,CAAA;IAAvB,0CAAoB;AAAwC,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,WAAA,IAAA,CAAA,CAAA;AACrC,gCAAA,CAAA,CAAA;IAAvB,0CAAoB;AAA+D,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,mBAAA,IAAA,CAAA,CAAA;AAC5D,gCAAA,CAAA,CAAA;IAAvB,0CAAoB;AAAsC,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,oBAAA,IAAA,CAAA,CAAA;AACnC,gCAAA,CAAA,CAAA;IAAvB,0CAAoB;AAAmC,CAAA,EAAA,yCAAA,CAAA,SAAA,EAAA,CAAA,iBAAA,IAAA,CAAA,CAAA;SA8XjD,iCAAW,CAAI,IAAY,EAAE,KAAQ,EAA9C,CAAA;IACE,MAAA,CAAO,CAAA;cAAE,IAAI;eAAE,KAAK;IAAA,CAAE;AACxB,CAAC;SAEQ,8BAAQ,CAAI,CAAgB,EAAE,CAAI,EAA3C,CAAA;IACE,MAAA,CAAO,CAAC,KAAK,SAAS,GAAG,CAAC,GAAG,CAAC;AAChC,CAAC;AAED,EAAiC,AAAjC,+BAAiC;SACxB,6BAAO,CACd,WAAc,EACd,gBAAA,GAA4B,KAAK,EAFnC,CAAA;IAIE,MAAA,EAAQ,MAAc,EAAE,WAA4B,GAApD,CAAA;QACE,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,EAAE,CAA3C;YACE,GAAG,IAAH,CAAA;gBACE,MAAA,CAAO,IAAI,CAAC,UAAU,CAAC,WAAW;YACpC,CAAC;YACD,GAAG,EAAC,KAAU,EAAd,CAAA;gBACE,EAAA,EAAI,KAAK,KAAK,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,CAA5C;oBACE,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK;oBAClC,EAAA,EAAI,gBAAgB,EAClB,IAAI,CAAC,kBAAkB;gBAE1B,CAAA;YACH,CAAC;QACF,CAAA;IACH,CAAC;AACH,CAAC;SAEQ,0CAAoB,GAA7B,CAAA;IACE,MAAA,EAAQ,MAAc,EAAE,WAA4B,GAApD,CAAA;QACE,KAAA,CAAM,SAAS,IAAG,CAAA,EAAI,WAAW,CAAC,QAAQ;QAE1C,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,EAAE,CAA3C;YACE,GAAG,IAAH,CAAA;gBACE,MAAA,CAAO,IAAI,CAAC,SAAS;YACvB,CAAC;YACD,GAAG,EAAC,KAAU,EAAd,CAAA;gBACE,EAAA,EAAI,KAAK,KAAK,IAAI,CAAC,SAAS,GAAG,CAA/B;oBACE,IAAI,CAAC,SAAS,IAAI,KAAK;oBACvB,IAAI,CAAC,kBAAkB;gBACxB,CAAA;YACH,CAAC;QACF,CAAA;IACH,CAAC;AACH,CAAC;;;;;;;;;;MyB5qBY,yCAAqB,SAAQ,sBAAe;gBAU3C,YAA0C,EAAE,SAAiB,CAAzE,CAAA;QACE,KAAK;QARP,IAAA,CAAA,OAAO,GAAuB,SAAS;QACvC,IAAA,CAAA,eAAe,GAAoB,IAAI;QAE9B,IAAA,CAAA,MAAM,GAAG,IAAI;QACb,IAAA,CAAA,UAAU,GAAY,IAAI;QAC1B,IAAA,CAAA,cAAc,GAAY,KAAK;QAKtC,IAAI,CAAC,YAAY,GAAG,YAAY;QAChC,IAAI,CAAC,SAAS,GAAG,SAAS;QAC1B,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC,KAAK;IAC7C,CAAC;IAED,OAAO,GAAP,CAAA;QACE,IAAI,CAAC,YAAY,CAAC,OAAO;IAC3B,CAAC;IAED,gBAAgB,GAAhB,CAAA;QACE,KAAA,CAAM,IAAI,GAAG,IAAI,CAAC,SAAS;QAE3B,EAAA,EAAI,IAAI,CAAC,QAAQ,YAAY,qBAAc,EAAE,CAA7C;YACE,KAAA,CAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU;YAE3C,EAAiC,AAAjC,+BAAiC;YACjC,GAAA,CAAK,KAAA,CAAM,GAAG,IAAI,UAAU,CAAE,CAA9B;gBACE,EAAA,EAAI,GAAG,KAAK,CAAU,WACpB,MAAA,CAAQ,UAAU,CAAC,GAAG,EAAU,KAAK;gBAGvC,MAAA,CAAO,UAAU,CAAC,GAAG;YACtB,CAAA;YAED,IAAI,CAAC,QAAQ,CAAC,OAAO;YACrB,IAAI,CAAC,QAAQ,GAAG,SAAgB;QACjC,CAAA;IACH,CAAC;IAED,QAAQ,CAAC,EAAuC,EAAE,WAAqB,EAAvE,CAAA;QACE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,EAAE,WAAW;IAC5C,CAAC;QAEG,EAAE,GAAN,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,YAAY,CAAC,EAAE;IAC7B,CAAC;QAEG,IAAI,GAAR,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,YAAY,CAAC,IAAI;IAC/B,CAAC;QAEG,KAAK,GAAT,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,YAAY,CAAC,KAAK;IAChC,CAAC;QAEG,UAAU,GAAd,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,YAAY,CAAC,UAAU;IACrC,CAAC;QAEG,SAAS,GAAb,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,YAAY,CAAC,SAAS;IACpC,CAAC;QAEG,KAAK,GAAT,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,YAAY,CAAC,KAAK;IAChC,CAAC;QAEG,cAAc,GAAlB,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,YAAY,CAAC,cAAc;IACzC,CAAC;QAEG,WAAW,GAAf,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,YAAY,CAAC,WAAW;IACtC,CAAC;QAEG,OAAO,GAAX,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,YAAY,CAAC,OAAO;IAClC,CAAC;;;;;;;SIpFa,yCAAK,CAAC,KAAa,EAAE,GAAW,EAAE,GAAW,EAA7D,CAAA;IACE,MAAA,CAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,GAAG,GAAG;AAC3C,CAAC;;;MFsDY,yCAAsB;IAMjC,OAAO,GAAP,CAAA;QACE,EAAA,EAAI,IAAI,CAAC,SAAS,EAAE,CAApB;YACE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO;YAC/B,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO;QACpC,CAAA;IACH,CAAC;IAED,IAAI,CACF,QAAuB,EACvB,MAAc,EACd,GAAQ,EACR,OAA2B,EAC3B,MAAA,GAA8B,CAAA;IAAA,CAAE,EALlC,CAAA;QAOE,EAAA,EAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EACtB,MAAA,CAAO,IAAI;QAGb,KAAA,CAAM,SAAS,GAAG,IAAI,CAAC,SAAS,GAC5B,IAAI,CAAC,SAAS,GACb,IAAI,CAAC,SAAS,GAAG,yCAAsB,CAAC,YAAY;QAEzD,KAAA,CAAM,YAAY,GAAG,SAAS,CAAC,QAAQ;QAEvC,KAAA,CAAM,UAAU,GAAG,QAAQ,CAAC,aAAa;QACzC,KAAA,CAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,GAAG,UAAU;QACpE,KAAA,CAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,YAAY,GAAG,UAAU;QACtE,yCAAsB,CAAC,sBAAsB,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,MAAM;QAE3E,KAAA,CAAM,aAAa,GAAG,yCAAsB,CAAC,UAAU,CAAE,CAAkD,AAAlD,EAAkD,AAAlD,gDAAkD;QAE3G,EAAA,EAAI,MAAM,CAAC,aAAa,EACtB,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa;aAClC,CAAA;YACL,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,MAAM;YACvE,aAAa,CAAC,CAAC,IAAI,aAAa,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,GAAG,GAAG;YACrD,aAAa,CAAC,CAAC,IAAI,aAAa,CAAC,CAAC,GAAG,CAAC,IAAI,MAAM,GAAG,GAAG;QACvD,CAAA;QAED,KAAA,CAAM,WAAW,GAAG,IAAI,CAAC,KAAK,EAC3B,MAAM,CAAC,cAAc,IAAI,yCAAwB,IAAI,UAAU;QAElE,KAAA,CAAM,eAAe,IAAI,WAAW,GAAG,CAAC,IAAI,CAAC;QAC7C,KAAA,CAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,yCAAK,CAAC,aAAa,CAAC,CAAC,GAAG,eAAe,EAAE,CAAC,EAAE,KAAK;QACtE,KAAA,CAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,yCAAK,CAAC,aAAa,CAAC,CAAC,GAAG,eAAe,EAAE,CAAC,EAAE,MAAM;QAEvE,yCAAsB,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAE,YAAY,EAAE,SAAS;QAEzF,KAAA,CAAM,aAAa,GAAG,yCAAsB,CAAC,MAAM,CACjD,QAAQ,EACR,MAAM,EACN,YAAY,EACZ,OAAO,EACP,GAAG,EACH,SAAS,EACT,MAAM;QAGR,EAAU,AAAV,QAAU;QACV,YAAY,CAAC,8BAA8B;QAE3C,EAAuC,AAAvC,qCAAuC;QACvC,KAAA,CAAM,MAAM,GAAG,yCAAsB,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW;QAC5E,KAAA,CAAM,GAAG,GAAG,yCAAsB,CAAC,OAAO,CAAC,MAAM,EAAE,WAAW;QAC9D,MAAA,CAAO,yCAAsB,CAAC,YAAY,CAAC,GAAG,EAAE,aAAa;IAC/D,CAAC;WAEc,aAAa,CAC1B,QAAuB,EACvB,CAAS,EACT,CAAS,EACT,WAAmB,EACnB,YAAgC,EAChC,SAAqB,EANf,CAAA;QAQN,EAA6F,AAA7F,2FAA6F;QAC7F,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,WAAW,EAAE,WAAW;QAClD,QAAQ,CAAC,cAAc,CAAC,IAAI;QAC5B,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS;QAC3D,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU;QAC5D,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC,iBAAU;QAErC,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,YAAY;QAE/C,EAAoF,AAApF,kFAAoF;QACpF,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU;QACtC,KAAA,CAAM,aAAa,GAAG,QAAQ,CAAC,aAAa;QAC5C,QAAQ,CAAC,aAAa,CAAC,yCAAW,EAAE,CAAC;QACrC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI;QAC/B,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE,aAAa;IACvD,CAAC;WAEc,MAAM,CACnB,QAAuB,EACvB,MAAc,EACd,YAAgC,EAChC,OAA2B,EAC3B,GAAQ,EACR,SAAqB,EACrB,MAA2B,EAPrB,CAAA;QASN,KAAA,CAAM,aAAa,GAAmB,CAAA,CAAE;QACxC,GAAA,EAAK,KAAA,CAAM,MAAM,IAAI,OAAO,CAAE,CAA9B;YACE,EAA0F,AAA1F,wFAA0F;YAC1F,KAAA,CAAM,KAAK,GAAG,yCAAsB,CAAC,UAAU,CAAC,MAAM,EAAE,GAAG;YAC3D,EAAA,GAAK,KAAK,CAAC,MAAM,EACf,QAAA;YAGF,yCAAsB,CAAC,kBAAkB,CAAC,YAAY,EAAE,MAAM,CAAC,QAAQ,EAAE,MAAM;YAC/E,YAAY,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ;YAE3D,EAAA,EAAI,MAAM,CAAC,kBAAkB,EAC3B,MAAM,CAAC,kBAAkB,CAAC,YAAY,EAAE,SAAS,CAAC,YAAY;YAGhE,EAA+F,AAA/F,6FAA+F;YAC/F,SAAS,CAAC,KAAK,CAAC,QAAQ,GAAG,yCAAsB,CAAC,eAAe,CAC/D,MAAM,EACN,KAAK,EACL,YAAY,EACZ,aAAa,CAAC,MAAM;YAGtB,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM;YAEvC,KAAK,CAAC,OAAO,EAAC,IAAI,GAAI,aAAa,CAAC,IAAI,CAAC,CAAA;0BAAE,IAAI;4BAAE,MAAM;gBAAA,CAAE;;QAC1D,CAAA;QACD,MAAA,CAAO,aAAa;IACtB,CAAC;WAEc,UAAU,CAAC,MAAwB,EAAE,GAAQ,EAApD,CAAA;QACN,KAAA,CAAM,UAAU,GAA2B,CAAA,CAAE;QAE7C,KAAA,CAAM,QAAQ,GAAG,GAAG,CAAC,KAAK;QAC1B,GAAA,EAAK,KAAA,CAAM,IAAI,IAAI,MAAM,CAAC,YAAY,CAAE,CAAxC;YACE,KAAA,CAAM,MAAM,GAAG,yCAAsB,CAAC,YAAY,CAC/C,IAAI,CAAC,IAAI,CAAC,cAAc,EACxB,YAAY,CAAC,MAAM,CAAC,WAAW;YAElC,EAAA,EAAI,QAAQ,CAAC,gBAAgB,CAAC,MAAM,GAClC,UAAU,CAAC,IAAI,CAAC,IAAI;QAEvB,CAAA;QAED,MAAA,CAAO,UAAU;IACnB,CAAC;WAEc,UAAU,CACvB,QAAuB,EACvB,CAAS,EACT,CAAS,EACT,WAAmB,EAJb,CAAA;QAMN,EAA8C,AAA9C,4CAA8C;QAC9C,KAAA,CAAM,MAAM,GAAG,GAAA,CAAI,UAAU,CAAC,CAAC,GAAG,WAAW,GAAG,WAAW;QAC3D,QAAQ,CAAC,sBAAsB,CAC7B,QAAQ,CAAC,eAAe,IACxB,CAAC,EACD,CAAC,EACD,WAAW,EACX,WAAW,EACX,MAAM;QAER,QAAQ,CAAC,cAAc,CAAC,KAAK;QAC7B,QAAQ,CAAC,eAAe,CAAC,IAAK;QAC9B,MAAA,CAAO,MAAM;IACf,CAAC;WAEc,eAAe,CAC5B,MAAwB,EACxB,KAA6B,EAC7B,YAAgC,EAChC,eAAuB,EAJjB,CAAA;QAMN,KAAA,CAAM,SAAS,GAAa,CAAA,CAAE;QAC9B,GAAA,CAAK,GAAA,CAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAI,CAAvC;YACE,KAAA,CAAM,IAAI,GAAG,KAAK,CAAC,CAAC;YACpB,KAAA,CAAM,SAAS,GAAG,IAAI,CAAC,SAAS;YAChC,KAAA,CAAM,QAAQ,GAAG,GAAA,CAAI,aAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,YAAY;YAC5D,QAAQ,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM;YAClC,QAAQ,CAAC,WAAW,GAAG,SAAS,CAAC,WAAW;YAC5C,QAAQ,CAAC,gBAAgB,GAAG,KAAK;YACjC,QAAQ,CAAC,aAAa,GAAG,KAAK;YAC9B,KAAA,CAAM,SAAS,GAAG,eAAe,GAAG,CAAC,GAAG,CAAC;YACzC,EAAA,EAAI,SAAS,GAAG,GAAG,EACjB,OAAO,CAAC,KAAK,CAAC,CAAiD;YAEjE,QAAQ,CAAC,cAAc,GAAG,4CAAkB,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS;YAEvF,SAAS,CAAC,IAAI,CAAC,QAAQ;QACxB,CAAA;QACD,MAAA,CAAO,SAAS;IAClB,CAAC;WAEc,kBAAkB,CAC/B,YAAgC,EAChC,YAAgC,EAChC,MAA2B,EAHrB,CAAA;QAKN,YAAY,CAAC,aAAa,GAAG,YAAY,CAAC,aAAa;QACvD,YAAY,CAAC,KAAK,GAAG,YAAY,CAAC,KAAK;QACvC,YAAY,CAAC,IAAI,GAAG,YAAY,CAAC,IAAI;QACrC,YAAY,CAAC,OAAO,GAAG,YAAY,CAAC,OAAO;QAC3C,YAAY,CAAC,OAAO,GAAG,YAAY,CAAC,OAAO;QAC3C,YAAY,CAAC,cAAc,GAAG,YAAY,CAAC,cAAc;QACzD,YAAY,CAAC,iBAAiB,GAAG,YAAY,CAAC,iBAAiB;QAC/D,YAAY,CAAC,uBAAuB,GAAG,YAAY,CAAC,uBAAuB;QAE3E,EAAA,EAAI,MAAM,CAAC,qBAAqB,EAC9B,YAAY,CAAC,QAAQ,GAAG,yCAAQ,CAAC,QAAQ;aACpC,CAAA;YACL,YAAY,CAAC,QAAQ,GAAG,YAAY,CAAC,QAAQ;YAC7C,YAAY,CAAC,YAAY,CACvB,YAAY,CAAC,QAAQ,KAAK,yCAAQ,CAAC,YAAY,GAAG,YAAY,CAAC,SAAS,GAAG,CAAA,CAAE;QAEhF,CAAA;IACH,CAAC;WAEc,sBAAsB,CACnC,SAAqB,EACrB,KAAa,EACb,MAAc,EAHR,CAAA;QAKN,EAAA,EAAI,SAAS,CAAC,YAAY,CAAC,KAAK,KAAK,KAAK,IAAI,SAAS,CAAC,YAAY,CAAC,MAAM,KAAK,MAAM,EACpF,MAAA;QAGF,SAAS,CAAC,YAAY,CAAC,OAAO;QAC9B,SAAS,CAAC,YAAY,GAAG,yCAAsB,CAAC,oBAAoB;QACpE,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM;IAC9C,CAAC;WAEc,oBAAoB,GAA3B,CAAA;QACN,MAAA,CAAO,GAAA,CAAI,wBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAnC;YACE,SAAS,EAAE,mBAAY;YACvB,SAAS,EAAE,oBAAa;YACxB,MAAM,EAAE,iBAAU;QACnB,CAAA;IACH,CAAC;WAEc,OAAO,CAAC,MAAkB,EAAE,WAAmB,EAAtD,CAAA;QACN,KAAA,CAAM,OAAO,GAAG,GAAA,CAAI,WAAW,CAAC,MAAM,CAAC,MAAM;QAE7C,EAAiD,AAAjD,+CAAiD;QACjD,GAAA,CAAI,GAAG,GAAG,MAAM,CAAC,SAAS;QAC1B,GAAA,CAAI,GAAG,GAAyB,IAAI;QACpC,GAAA,CAAK,GAAA,CAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,GAChC,GAAA,CAAK,GAAA,CAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,GAAI,CAAtC;YACE,KAAA,CAAM,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,WAAW;YAClC,KAAA,CAAM,QAAQ,GACZ,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,WAAW,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,WAAW,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YAEhF,KAAA,CAAM,OAAO,GAAG,MAAM,CAAC,CAAC,GAAG,MAAM,GAAG,CAAC;YACrC,MAAM,CAAC,CAAC,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC;YAC1B,KAAA,CAAM,MAAM,GAAG,OAAO,CAAC,MAAM;YAE7B,EAAA,EAAI,OAAO,GAAG,CAAC,IAAI,QAAQ,GAAG,GAAG,EAAE,CAAnC;gBACE,GAAG,GAAG,CAAN;oBACE,MAAM,EAAE,MAAM;oBACd,OAAO,EAAE,OAAO,GAAG,CAAC;gBACrB,CAAA;gBACD,GAAG,GAAG,QAAQ;YACf,CAAA;QACF,CAAA;QAEH,MAAA,CAAO,GAAG;IACZ,CAAC;WAEc,YAAY,CAAC,GAAyB,EAAE,KAAqB,EAApE,CAAA;QACN,EAAA,GAAK,GAAG,EACN,MAAA,CAAO,IAAI;QAGb,KAAA,CAAM,KAAK,GAAc,CAAA;QAAA,CAAE;QAE3B,KAAA,CAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,KAAK,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS;QACtE,EAAA,GAAK,MAAM,EACT,MAAA,CAAO,IAAI;QAGb,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM;QAE5C,KAAA,CAAM,UAAU,GAAuB,MAAM,CAAC,QAAgB,CAAC,UAAU;QAEzE,GAAA,CAAK,KAAA,CAAM,QAAQ,IAAI,UAAU,CAAE,CAAnC;YACE,EAAA,GAAK,UAAU,CAAC,cAAc,CAAC,QAAQ,GACrC,QAAA;YAGF,KAAA,CAAM,MAAM,GAAG,UAAU,CAAC,QAAQ;YAElC,EAAyC,AAAzC,uCAAyC;YACzC,EAAA,EAAI,QAAQ,KAAK,CAAU,WACzB,yCAAsB,CAAC,sBAAsB,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM;iBACnE,EAAA,EAAI,QAAQ,KAAK,CAAQ,SAC9B,yCAAsB,CAAC,oBAAoB,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM;iBACjE,EAAA,EAAI,QAAQ,KAAK,CAAS;iBAG/B,EAAA,EAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EACvB,KAAK,CAAC,QAAQ,IAAI,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM;iBACpC,CAAA;gBACL,KAAA,CAAM,KAAK,GAAa,CAAA,CAAE;gBAC1B,GAAA,CAAK,GAAA,CAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,GACpC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC;gBAE1D,KAAK,CAAC,QAAQ,IAAI,KAAK;YACxB,CAAA;QAEJ,CAAA;QAED,MAAA,CAAO,KAAK;IACd,CAAC;WAEc,sBAAsB,CACnC,KAAgB,EAChB,GAAkB,EAClB,MAAuB,EACvB,MAAc,EAJR,CAAA;QAMN,KAAK,CAAC,QAAQ,GAAG,GAAA,CAAI,cAAO,GACzB,mBAAmB,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,EACtC,YAAY,CAAC,MAAM,CAAC,WAAW;IACpC,CAAC;WAEc,oBAAoB,CACjC,KAAgB,EAChB,GAAkB,EAClB,MAAuB,EACvB,MAAc,EAJR,CAAA;QAMN,KAAA,CAAM,MAAM,GAAG,GAAA,CAAI,cAAO,GAAG,mBAAmB,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM;QACnE,KAAA,CAAM,OAAO,GAAG,GAAA,CAAI,cAAO,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,MAAM,CAAC,WAAW;QAC5F,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;QAE1C,KAAK,CAAC,MAAM,GAAG,MAAM;IACvB,CAAC;WAEc,YAAY,GAAnB,CAAA;QACN,KAAA,CAAM,KAAK,GAAG,GAAA,CAAI,YAAK;QACvB,KAAK,CAAC,UAAU,GAAG,KAAK;QAExB,KAAA,CAAM,QAAQ,GAAG,GAAA,CAAI,4CAAkB;QACvC,QAAQ,CAAC,cAAc,GAAG,yCAAc,CAAC,WAAW;QAEpD,MAAA,CAAO,CAAP;YACE,YAAY,EAAE,yCAAsB,CAAC,oBAAoB;YACzD,QAAQ,EAAE,QAAQ;YAClB,KAAK,EAAE,KAAK;QACb,CAAA;IACH,CAAC;;AApWuB,yCAAA,CAAA,UAAU,GAAG,GAAA,CAAI,cAAO;AACxB,yCAAA,CAAA,YAAY,GAAG,GAAA,CAAI,aAAM;AACzB,yCAAA,CAAA,UAAU,GAAG,GAAA,CAAI,YAAK;;;;MIxDnC,yCAAe,SAAQ,eAAQ;iBAA5C,CAAA;Q,K,I,S;QACE,IAAA,CAAA,IAAI,GAA+B,IAAI;IAKzC,CAAC;IAHC,WAAW,GAAX,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,IAAI,KAAK,IAAI;IAC3B,CAAC;;;;;SEHa,yCAA6B,CAAC,GAAS,EAAE,SAAkB,EAA3E,CAAA;IACE,MAAA,CAAO,GAAA,CAAI,WAAI,GAAG,aAAa,CAAC,CAAhC;QACE,GAAA,CAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,SAAS;QACnE,GAAA,CAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,SAAS;QACnE,GAAA,CAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,SAAS;QACnE,GAAA,CAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,SAAS;QACnE,GAAA,CAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,SAAS;QACnE,GAAA,CAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,SAAS;QACnE,GAAA,CAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,SAAS;QACnE,GAAA,CAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,SAAS;QACnE,GAAA,CAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,SAAS;IACpE,CAAA;AACH,CAAC;SAEe,yCAAe,CAAC,IAAU,EAAE,KAAa,EAAzD,CAAA;IACE,KAAA,CAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK;IAC1B,KAAA,CAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK;IAC1B,KAAA,CAAM,IAAI,GAAG,GAAA,CAAI,cAAO,GAAG,UAAU,CAAC,GAAG,EAAE,GAAG;IAE9C,EAAsC,AAAtC,oCAAsC;IACtC,EAAA,GAAK,KAAK,GAAG,CAAM,IAAI,CAAC,EACtB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;SAEnB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;IAGrB,EAAsC,AAAtC,oCAAsC;IACtC,EAAA,GAAK,KAAK,GAAG,CAAM,IAAI,CAAC,EACtB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;SAEnB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;IAGrB,EAAsC,AAAtC,oCAAsC;IACtC,EAAA,GAAK,KAAK,GAAG,CAAM,IAAI,CAAC,EACtB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;SAEnB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;IAGrB,MAAA,CAAO,GAAA,CAAI,WAAI,CAAC,GAAG,EAAE,GAAG;AAC1B,CAAC;;;M7CnCY,yCAAiB,SAAQ,yCAAc;gBAuBhD,MAAe,EACf,WAAwB,EACxB,QAA6B,CAH/B,CAAA;QAKE,KAAK;QAzBP,IAAA,CAAA,QAAQ,GAAY,KAAK;QAKzB,IAAA,CAAA,KAAK,GAAW,CAAC;QACjB,IAAA,CAAA,QAAQ,GAAW,QAAQ;QAC3B,EAEG,AAFH,+GAEG,AAFH,EAEG,CACH,IAAA,CAAA,gBAAgB,GAAW,0DAA2B;QACtD,IAAA,CAAA,IAAI,GAA+B,IAAI;QACvC,IAAA,CAAA,gBAAgB,GAAe,CAAA,CAAE;QACjC,IAAA,CAAA,YAAY,GAA2B,CAAA,CAAE;QACzC,IAAA,CAAA,eAAe,GAAmC,CAAA,CAAE;QACpD,IAAA,CAAA,gBAAgB,GAAW,CAAC;QAC5B,IAAA,CAAA,eAAe,GAAY,KAAK;QACxB,IAAA,CAAA,aAAa,GAAS,GAAA,CAAI,0DAAI;QAUpC,IAAI,CAAC,IAAI,GAAG,CAAE;QACd,IAAI,CAAC,MAAM,GAAG,MAAM;QACpB,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI;QAC5B,IAAI,CAAC,WAAW,GAAG,WAAW;QAC9B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,WAAW;QAC1C,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,GAAA,CAAI,0DAAM;QAEnE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM;QACrC,IAAI,CAAC,YAAY;QAEjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAK,WAAW,YAAY,0DAAc,GAAI,GAAA,CAAI,0DAAkB,CAAC,CAAA;YAAC,SAAS,EAAE,IAAI;QAAA,CAAC,IAAI,GAAA,CAAI,0DAAkB;QACxI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ;IACjC,CAAC;IAEO,YAAY,CAAC,QAA4B,EAAzC,CAAA;QACN,IAAI,CAAC,iBAAiB,CAAC,IAAI;QAE3B,KAAA,CAAM,CAAA,MAAE,GAAG,QAAE,GAAG,EAAA,CAAE,GAAG,0DAA6B,CAChD,IAAI,CAAC,WAAW,CAAC,gBAAgB,IAAI,IAAI,CAAC,mBAAmB,IAC7D,IAAI,CAAC,WAAW;QAGlB,KAAA,CAAM,MAAM,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;QAC5B,QAAQ,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,MAAM;QACzC,QAAQ,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,MAAM;IAC3C,CAAC;IAED,OAAO,GAAP,CAAA;QACE,EAAA,EAAI,IAAI,CAAC,IAAI,EACX,IAAI,CAAC,IAAI,CAAC,OAAO;QAGnB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAqB,GAAK,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;;QAClF,IAAI,CAAC,WAAW,CAAC,OAAO;QACxB,IAAI,CAAC,QAAQ,CAAC,OAAO;QAErB,IAAI,CAAC,YAAY,GAAG,CAAA,CAAE;QACtB,IAAI,CAAC,eAAe,GAAG,CAAA,CAAE;QAEzB,EAAA,EAAI,IAAI,CAAC,MAAM,EAAE,CAAjB;YACE,IAAI,CAAC,MAAM,CAAC,OAAO;YACnB,IAAI,CAAC,MAAM,GAAG,SAAS;QACxB,CAAA;QAED,IAAI,CAAC,QAAQ,GAAG,IAAI;IACtB,CAAC;QAEG,aAAa,GAAjB,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,QAAQ,CAAC,aAAa;IACpC,CAAC;QAEG,aAAa,CAAC,KAAoB,EAAtC,CAAA;QACE,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,KAAK;IACrC,CAAC;IAED,UAAU,CACR,YAA0C,EAC1C,MAAoC,EAFtC,CAAA;QAIE,KAAA,CAAM,MAAM,GAAG,GAAA,CAAI,0DAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ;QAC9D,KAAA,CAAM,IAAI,GAAG,GAAA,CAAI,0DAAoB,CAAC,YAAY,EAAE,MAAM;QAC1D,MAAM,CAAC,IAAI,GAAG,YAAY,CAAC,IAAI;QAC/B,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG;QACjD,MAAM,CAAC,aAAa,GAAG,KAAK;QAC5B,MAAM,CAAC,cAAc,GAAG,0DAAkB,CAAC,kBAAkB,CAAC,IAAI,EAAE,IAAI;QAExE,EAAA,EAAI,MAAM,EAAE,CAAZ;YACE,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM;YAC3B,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,IAAI,IAAI;YAE1C,YAAY,CAAC,sBAAsB,CAAC,IAAI,KAAxC,CAAA;gBACE,IAAI,CAAC,gBAAgB;gBACrB,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS;gBACtC,EAA0E,AAA1E,wEAA0E;gBAC1E,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,IAAI,YAAY;YACpD,CAAC;QACF,CAAA,MAAM,CAAA;YACL,IAAI,CAAC,IAAI,GAAG,IAAI;YAChB,IAAI,CAAC,GAAG,CAAC,MAAM;QAChB,CAAA;QAED,MAAA,CAAO,IAAI;IACb,CAAC;IAED,mBAAmB,GAAnB,CAAA;QACE,KAAA,CAAM,MAAM,GAAG,IAAI,CAAC,aAAa;QACjC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ;QAC3C,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,GAAG,QAAQ,GAAG,QAAQ;QAE9C,GAAA,EAAK,KAAA,CAAM,IAAI,IAAI,IAAI,CAAC,YAAY,CAClC,EAAA,EAAI,IAAI,CAAC,UAAU,EAAE,CAArB;YACE,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG;YACzC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG;QAC1C,CAAA;IAEL,CAAC;IAED,mBAAmB,GAAnB,CAAA;QACE,EAAA,GAAK,IAAI,CAAC,eAAe,KAAK,IAAI,CAAC,MAAM,EACvC,MAAA;QAEF,EAA8F,AAA9F,4FAA8F;QAE9F,GAAA,CAAI,MAAM,GAAQ,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAQ;QACtD,EAAA,GAAK,MAAM,EAAE,CAAb;YACE,MAAM,GAAG,GAAA,CAAI,0DAAQ;YACrB,MAAM,CAAC,IAAI,GAAG,CAAQ;YACtB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM;QACvB,CAAA;QACD,EAAgE,AAAhE,8DAAgE;QAEhE,KAAA,CAAM,YAAY,GAAwB,CAAA,CAAE;QAC5C,GAAA,EAAK,KAAA,CAAM,IAAI,IAAI,IAAI,CAAC,YAAY,CAClC,EAAA,EAAI,IAAI,CAAC,eAAe,KAAK,SAAS,IAAI,IAAI,CAAC,UAAU,EACvD,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe;QAI1C,MAAM,CAAC,QAAQ,GAAG,YAAY;IAChC,CAAC;IAED,iBAAiB,CAAC,KAAc,EAAhC,CAAA;QACE,EAAA,EAAI,IAAI,CAAC,gBAAgB,KAAK,IAAI,EAChC,IAAI,CAAC,YAAY;QAGnB,EAAA,EAAI,IAAI,CAAC,sBAAsB,KAAK,IAAI,IAAI,KAAK,KAAK,IAAI,EAAE,CAA5D;YACE,EAAA,GAAK,IAAI,CAAC,MAAM,EACd,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM;iBAEjC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM;YAGxE,IAAI,CAAC,sBAAsB,GAAG,KAAK;YAEnC,KAAK,GAAG,IAAI;QACb,CAAA;IACH,CAAC;IAED,eAAe,CAAC,MAAgB,EAAhC,CAAA;QACE,KAAA,CAAM,MAAM,GAAe,CAAA,CAAE;QAC7B,kBAAkB,CAAC,MAAM;cAElB,MAAM,CAAC,MAAM,GAAG,CAAC,CAAE,CAA1B;YACE,KAAA,CAAM,SAAS,GAAG,MAAM,CAAC,KAAK;YAC9B,SAAS,CAAC,OAAO,GAAG,KAAK;YACzB,kBAAkB,CAAC,SAAS;QAC7B,CAAA;iBAEQ,kBAAkB,CAAC,GAAa,EAAzC,CAAA;YACE,GAAA,EAAK,KAAA,CAAM,KAAK,IAAI,GAAG,CAAC,QAAQ,CAC9B,EAAA,EAAI,KAAK,CAAC,OAAO,EACf,MAAM,CAAC,IAAI,CAAC,KAAK;QAGvB,CAAC;IACH,CAAC;IAED,YAAY,GAAZ,CAAA;QACE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAG,CAAkE,AAAlE,EAAkE,AAAlE,gEAAkE;QAC9F,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,mBAAmB,GAAG,SAAS,CAAC,GAAA,CAAI,0DAAO;IACjF,CAAC;IAED,iBAAiB,GAAjB,CAAA;QACE,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,IAAI,CAAC,mBAAmB,GAAG,GAAG,CAAC,CAAC;IACtD,CAAC;IAED,mBAAmB,GAAnB,CAAA;QACE,IAAI,CAAC,iBAAiB,CAAC,IAAI;QAC3B,MAAA,CAAO,0DAA6B,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW;IACzE,CAAC;IAED,gBAAgB,GAAhB,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW;IACzD,CAAC;IAED,IAAI,CACF,QAAuB,EACvB,MAAc,EACd,GAAQ,EACR,MAAA,GAA8B,CAAA;IAAA,CAAE,EAJlC,CAAA;QAME,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,GAAA,CAAI,0DAAsB;QACvD,MAAA,CAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;YAAA,IAAI;QAAA,CAAC,EAAE,MAAM;IAC/D,CAAC;QAEG,QAAQ,GAAZ,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,CAAC,GACpC,CAAC,GACD,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM;IAC5D,CAAC;;;;;;;;;;;;;;;;;AqDtOH,EAIG,AAJH,2EAIG,AAJH,EAIG,CACH,KAAA,CAAM,yCAAmB,GAA2B,CAApD;IACC,gBAAgB,EAAE,CAAA;QAAC,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAQ;QAAE,IAAI,EAAE,CAAC;IAAA,CAAC;IACvD,eAAe,EAAG,CAAA;QAAC,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAO;QAAG,IAAI,EAAE,CAAC;IAAA,CAAC;IACvD,cAAc,EAAI,CAAA;QAAC,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAM;QAAI,IAAI,EAAE,CAAC;IAAA,CAAC;IACvD,eAAe,EAAG,CAAA;QAAC,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAO;QAAG,IAAI,EAAE,CAAC;IAAA,CAAC;IACvD,eAAe,EAAG,CAAA;QAAC,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAO;QAAG,IAAI,EAAE,CAAC;IAAA,CAAC;IACvD,gBAAgB,EAAE,CAAA;QAAC,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAQ;QAAE,IAAI,EAAE,CAAC;IAAA,CAAC;IACvD,eAAe,EAAG,CAAA;QAAC,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAO;QAAG,IAAI,EAAE,CAAC;IAAA,CAAC;IACvD,gBAAgB,EAAE,CAAA;QAAC,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAQ;QAAE,IAAI,EAAE,CAAC;IAAA,CAAC;IACvD,eAAe,EAAG,CAAA;QAAC,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAO;QAAG,IAAI,EAAE,CAAC;IAAA,CAAC;IACvD,gBAAgB,EAAE,CAAA;QAAC,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAQ;QAAE,IAAI,EAAE,CAAC;IAAA,CAAC;AACvD,CAAA;AAYD,GAAA,CAAI,uBAAC,GAAG,CAAC;AACT,GAAA,CAAK,GAAA,CAAI,GAAG,IAAI,yCAAmB,CAAE,CAArC;IACC,yCAAmB,CAAC,uBAAC,IAAI,yCAAmB,CAAC,GAAG;IAChD,uBAAC;AACD,CAAA;AAMD,EAAkD,AAAlD,gDAAkD;MAC5C,yCAAc;gBAMX,IAAW,EACX,IAA2B,EAC3B,WAAkB,EAClB,KAAA,GAAmB,CAAC;QAAA,QAAQ;SAAG,QAAQ;IAAA,CAAC,CAJhD,CAAA;QACQ,IAAA,CAAA,IAAI,GAAJ,IAAI;QACJ,IAAA,CAAA,IAAI,GAAJ,IAAI;QACJ,IAAA,CAAA,WAAW,GAAX,WAAW;QACX,IAAA,CAAA,KAAK,GAAL,KAAK;QAEZ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI;QACjD,IAAI,CAAC,WAAW,GAAG,CAAE;IACtB,CAAC;;AAMK,KAAA,CAAM,yCAAgB,GAAiC,CAA9D;IACC,kBAAkB,EAAE,GAAA,CAAI,yCAAc,CAAC,CAAoB,qBAAE,yCAAmB,CAAC,eAAe,EAAE,CAAC;IACnG,WAAW,EAAE,GAAA,CAAI,yCAAc,CAAC,CAAc,eAAE,yCAAmB,CAAC,cAAc,EAAE,CAAC;IACrF,YAAY,EAAE,GAAA,CAAI,yCAAc,CAAC,CAAc,eAAE,yCAAmB,CAAC,cAAc,EAAE,CAAC;IACtF,UAAU,EAAE,GAAA,CAAI,yCAAc,CAAC,CAAc,eAAE,yCAAmB,CAAC,cAAc,EAAE,CAAC;IACpF,aAAa,EAAE,GAAA,CAAI,yCAAc,CAAC,CAAe,gBAAE,yCAAmB,CAAC,eAAe,EAAE,CAAC;IACzF,SAAS,EAAE,GAAA,CAAI,yCAAc,CAAC,CAAW,YAAE,yCAAmB,CAAC,gBAAgB,EAAE,CAAC;IAClF,cAAc,EAAE,GAAA,CAAI,yCAAc,CAAC,CAAgB,iBAAE,yCAAmB,CAAC,eAAe,EAAE,CAAC;IAC3F,mBAAmB,EAAE,GAAA,CAAI,yCAAc,CAAC,CAAqB,sBAAE,yCAAmB,CAAC,eAAe,EAAE,CAAC;IACrG,YAAY,EAAE,GAAA,CAAI,yCAAc,CAAC,CAAc,eAAE,yCAAmB,CAAC,eAAe,EAAE,CAAC;IACvF,MAAM,EAAE,GAAA,CAAI,yCAAc,CAAC,CAAQ,SAAE,yCAAmB,CAAC,eAAe,EAAE,CAAC;IAC3E,aAAa,EAAE,GAAA,CAAI,yCAAc,CAAC,CAAe,gBAAE,yCAAmB,CAAC,eAAe,EAAE,CAAC;IACzF,iBAAiB,EAAE,GAAA,CAAI,yCAAc,CAAC,CAAmB,oBAAE,yCAAmB,CAAC,eAAe,EAAE,CAAC;IACjG,SAAS,EAAE,GAAA,CAAI,yCAAc,CAAC,CAAW,YAAE,yCAAmB,CAAC,gBAAgB,EAAE,CAAC;IAClF,OAAO,EAAE,GAAA,CAAI,yCAAc,CAAC,CAAS,UAAE,yCAAmB,CAAC,gBAAgB,EAAE,CAAC;IAC9E,OAAO,EAAE,GAAA,CAAI,yCAAc,CAAC,CAAS,UAAE,yCAAmB,CAAC,eAAe,EAAE,CAAC;IAC7E,QAAQ,EAAE,GAAA,CAAI,yCAAc,CAAC,CAAU,WAAE,yCAAmB,CAAC,gBAAgB,EAAE,CAAC;AAChF,CAAA;MAQY,yCAAe;IAI3B,EAA4C,AAA5C,0CAA4C;gBAChC,eAAyB,EAC3B,UAAA,GAA8B,CAAA,CAAE,EAChC,QAAA,GAAkB,CAAC,EACnB,IAAA,GAAc,CAAC,EACf,OAAA,GAAuB,CAAA,CAAE,CAJnC,CAAA;QACU,IAAA,CAAA,UAAU,GAAV,UAAU;QACV,IAAA,CAAA,QAAQ,GAAR,QAAQ;QACR,IAAA,CAAA,IAAI,GAAJ,IAAI;QACJ,IAAA,CAAA,OAAO,GAAP,OAAO;QAGhB,EAAA,EAAI,eAAe,IAAI,IAAI,EAC1B,GAAA,CAAK,GAAA,CAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,GAAI,CAAjD;YACC,GAAA,CAAI,kBAAkB,GAAG,eAAe,CAAC,CAAC;YAC1C,GAAA,CAAI,cAAc,GAAG,yCAAgB,CAAC,kBAAkB;YACxD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc;YACnC,IAAI,CAAC,QAAQ,IAAI,cAAc,CAAC,QAAQ;YACxC,IAAI,CAAC,IAAI;QACT,CAAA;IAEH,CAAC;IAED,EAAoG,AAApG,kGAAoG;IACpG,GAAG,CAAC,cAA6B,EAAjC,CAAA;QACC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc;QACnC,IAAI,CAAC,QAAQ,IAAI,cAAc,CAAC,QAAQ;QACxC,IAAI,CAAC,IAAI;IACV,CAAC;IAED,SAAS,CAAC,MAAmB,EAA7B,CAAA;QACC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM;IACzB,CAAC;IAED,UAAU,GAAV,CAAA;QACC,GAAA,CAAK,GAAA,CAAI,IAAI,IAAI,IAAI,CAAC,UAAU,CAAE,CAAlC;YACC,GAAA,CAAI,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI;YACzC,EAAA,EACC,cAAc,KAAK,yCAAgB,CAAC,mBAAmB,IACvD,cAAc,KAAK,yCAAgB,CAAC,aAAa,IACjD,cAAc,KAAK,yCAAgB,CAAC,MAAM,IAC1C,cAAc,KAAK,yCAAgB,CAAC,YAAY,EAChD,MAAA,CAAO,IAAI;QAEZ,CAAA;QAED,MAAA,CAAO,KAAK;IACb,CAAC;;;;;;;;;AEjIF,GAAA,CAAY,yCAGX;CAHD,QAAA,CAAY,yCAAU,EAAtB,CAAA;IACC,yCAAA,CAAA,CAAA,0BAAA,CAA+C;IAC/C,yCAAA,CAAA,CAAA,mBAAA,CAAiC;AAClC,CAAC,EAHW,yCAAU,KAAV,yCAAU,GAAA,CAAA;AAAA,CAAA;AAKtB,EAAuH,AAAvH,qHAAuH;AACvH,EAAmI,AAAnI,iIAAmI;SAE1H,kCAAY,CAAC,IAAgB,EAAtC,CAAA;IACC,EAAoB,AAApB,kBAAoB;IACpB,MAAA,CAAQ,IAAI;QACX,IAAA,CAAK,yCAAU,CAAC,qBAAqB;YAC3B,EAAwD,AAAxD,sDAAwD;YACxD,EAAuB,AAAvB,qBAAuB;YAChC,MAAA,CAAO,GAAA,CAAI,MAAM,SACR,CAA4B;QAItC,IAAA,CAAK,yCAAU,CAAC,cAAc;YACpB,EAA6C,AAA7C,2CAA6C;YAC7C,EAAqB,AAArB,mBAAqB;YAC9B,MAAA,CAAO,GAAA,CAAI,MAAM,SACR,CAAqB;;YAK9B,KAAA,CAAM,GAAA,CAAI,KAAK,CAAC,CAAqB;;AAExC,CAAC;MAGY,yCAAU;iBAAvB,CAAA;QACI,EAAuH,AAAvH,qHAAuH;QAClH,IAAA,CAAA,OAAO,GAAsC,CAAA;YAAC,cAAc,EAAE,CAAA,CAAE;YAAE,qBAAqB,EAAE,CAAA,CAAE;QAAA,CAAC;IAuBrG,CAAC;IArBA,SAAS,CAAC,UAAsB,EAAhC,CAAA;QACC,EAA8C,AAA9C,4CAA8C;QAC9C,EAAA,EAAI,IAAI,CAAC,OAAO,CAAC,UAAU,MAAM,SAAS,EACzC,KAAA,CAAM,GAAA,CAAI,KAAK,CAAC,CAAqB;QAEtC,EAA2G,AAA3G,yGAA2G;QAC3G,EAAA,EAAI,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,KAAK,CAAC,EAAC,CAA1C;YACC,GAAA,CAAI,MAAM,GAAG,kCAAY,CAAC,UAAU;YACpC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM;QACpC,CAAA;QACD,GAAA,CAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG;QACzC,EAAA,EAAI,MAAM,KAAK,SAAS,EACvB,KAAA,CAAM,GAAA,CAAI,KAAK,CAAC,CAAsB;QAEvC,EAAmE,AAAnE,iEAAmE;QACnE,MAAA,CAAO,MAAM;IACd,CAAC;IAED,YAAY,CAAC,UAAsB,EAAE,MAAa,EAAlD,CAAA;QACC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM;IACrC,CAAC;;;;;MEpDW,yCAAkB;gBAEX,IAAW,EAAS,cAA6B,EAAS,WAAgB,CAA7F,CAAA;QAAmB,IAAA,CAAA,IAAI,GAAJ,IAAI;QAAgB,IAAA,CAAA,cAAc,GAAd,cAAc;QAAwB,IAAA,CAAA,WAAW,GAAX,WAAW;QAQxF,IAAA,CAAA,MAAM,GAAY,KAAK;QACvB,IAAA,CAAA,OAAO,GAAY,KAAK;QACxB,IAAA,CAAA,MAAM,GAA8B,IAAI;QACxC,IAAA,CAAA,QAAQ,GAAgC,IAAI;QAM5C,IAAA,CAAA,WAAW,GAAY,KAAK;QAG5B,IAAA,CAAA,UAAU,GAAY,IAAI;QACjB,IAAA,CAAA,UAAU,GAAY,KAAK;QACzB,IAAA,CAAA,cAAc,GAAY,IAAI;QAChC,IAAA,CAAA,QAAQ,GAA6C,CAArD;YACR,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;QACJ,CAAA;QA/BA,IAAI,CAAC,EAAE,GAAG,yCAAkB,CAAC,OAAO;QACpC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC;QACjD,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,iBAAiB,CAAC,GAAA,CAAI,aAAM;QAC9D,IAAI,CAAC,SAAS,GAAG,CAAC;QAClB,IAAI,CAAC,sBAAsB,GAAG,CAAA,CAAE;IACjC,CAAC;IAqCD,EAAoB,AAApB,kBAAoB;IACpB,EAAgB,AAAhB,cAAgB;IAChB,EAAI,AAAJ,EAAI;IAEJ,QAAQ,GAAR,CAAA;QACC,MAAA,CAAO,IAAI,CAAC,KAAK;IAClB,CAAC;IAED,EAAgB,AAAhB,cAAgB;IAChB,EAAiB,AAAjB,eAAiB;IACjB,EAA6B,AAA7B,2BAA6B;IAE7B,QAAQ,GAAR,CAAA;QACC,MAAA,CAAO,IAAI,CAAC,MAAM;IACnB,CAAC;IAED,iBAAiB,GAAjB,CAAA;QACC,MAAA,CAAO,IAAI,CAAC,cAAc;IAC3B,CAAC;IAED,EAAiB,AAAjB,eAAiB;IACjB,EAAsB,AAAtB,oBAAsB;IAEtB,EAAiC,AAAjC,+BAAiC;IACjC,EAA4B,AAA5B,0BAA4B;IAC5B,EAAsC,AAAtC,oCAAsC;IACtC,EAAM,AAAN,IAAM;IACN,EAAK,AAAL,GAAK;IAEL,EAAoB,AAApB,kBAAoB;IACpB,EAAI,AAAJ,EAAI;IAEJ,cAAc,GAAd,CAAA;QACC,MAAA,CAAO,IAAI,CAAC,WAAW;IACxB,CAAC;IAED,IAAI,GAAJ,CAAA;QAEC,EAAA,EAAI,IAAI,CAAC,cAAc,CAAC,eAAe,IAAI,IAAI,CAAC,cAAc,CAAC,kBAAkB,EAChF,MAAA;QAGD,EAAA,EAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAC7B,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI;IAEtC,CAAC;IAED,YAAY,GAAZ,CAAA;QACC,MAAA,CAAO,IAAI,CAAC,SAAS;IACtB,CAAC;IAED,OAAO,GAAP,CAAA;QACC,EAAA,EAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE,CAA1C;YACC,IAAI,CAAC,QAAQ,CAAC,OAAO;YACrB,IAAI,CAAC,QAAQ,GAAG,IAAI;YACpB,IAAI,CAAC,MAAM,GAAG,KAAK;YAEnB,EAA6C,AAA7C,2CAA6C;YAC7C,GAAA,CAAK,GAAA,CAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,CAAC,GAAI,CAA7D;gBACC,GAAA,CAAI,OAAO,GAAG,IAAI,CAAC,sBAAsB,CAAC,CAAC;gBAC3C,OAAO;YACP,CAAA;YACD,IAAI,CAAC,sBAAsB,GAAG,CAAA,CAAE;QAChC,CAAA;IACF,CAAC;IAED,QAAQ,CAAC,EAAsC,EAAE,WAAW,GAAG,IAAI,EAAnE,CAAA;QACC,KAAA,CAAM,KAAK,GAAyB,WAAW,GAAG,CAAC;YAAA,IAAI;QAAA,CAAC,GAAG,CAAA,CAAE;QAE7D,GAAA,CAAI,OAAuC;eAEnC,OAAO,GAAG,KAAK,CAAC,GAAG,QAAQ,SAAS,CAAE,CAA9C;YACC,EAAE,CAAC,OAAO;YAEV,GAAA,EAAK,KAAA,CAAM,KAAK,IAAI,OAAO,CAAC,QAAQ,CAClC,EAAA,EAAI,KAAK,KAAK,IAAI,EAClB,KAAK,CAAC,IAAI,CAAC,KAAK;QAGlB,CAAA;IACF,CAAC;;AAzFD,EAAiC,AAAjC,+BAAiC;AAC1B,yCAAA,CAAA,OAAO,GAAG,CAAC;AA8FnB,yCAAkB,CAAC,OAAO,GAAG,CAAC;;;;A,G,C,+B,0B,S,I,Q,C,O,E,U,E,C,E,S,E,C;a,K,C,K,E,C;Q,M,C,K,Y,C,G,K,G,G,C,C,C,Q,C,O,E,C;Y,O,C,K;Q,C;I,C;I,M,C,G,E,C,K,C,G,O,G,Q,C,O,E,M,E,C;iB,S,C,K,E,C;Y,G,C,C;gB,I,C,S,C,I,C,K;Y,C,C,K,E,C,E,C;gB,M,C,C;Y,C;Q,C;iB,Q,C,K,E,C;Y,G,C,C;gB,I,C,S,C,C,Q,K;Y,C,C,K,E,C,E,C;gB,M,C,C;Y,C;Q,C;iB,I,C,M,E,C;Y,M,C,I,G,O,C,M,C,K,I,K,C,M,C,K,E,I,C,S,E,Q;Q,C;Q,I,E,S,G,S,C,K,C,O,E,U,I,C,C,G,I;I,C;A,C;MNjIjB,yCAAU;gBAOH,GAAU,EAAS,UAAqB,EAAS,QAAkB,CAAtF,CAAA;QAAmB,IAAA,CAAA,GAAG,GAAH,GAAG;QAAgB,IAAA,CAAA,UAAU,GAAV,UAAU;QAAoB,IAAA,CAAA,QAAQ,GAAR,QAAQ;IAC5E,CAAC;IAEK,IAAI,CAAC,IAAwB,EAA7B,CAAA;Q,M,C,+B,C,I,E,I,C,C,E,I,C,C,E,Q,I,C;YAEL,EAAA,EAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,EAC7B,MAAA;YAGD,IAAI,CAAC,OAAO,GAAG,IAAI;YACnB,EAAmD,AAAnD,iDAAmD;YACnD,IAAI,CAAC,cAAc,CAAC,eAAe;YAEnC,GAAA,CAAG,CAAH;gBACC,EAAA,EAAG,IAAI,CAAC,QAAQ,KAAK,CAAC,QACf,IAAI,CAAC,aAAa,CAAC,IAAI;gBAG9B,GAAA,CAAI,CAAA,aAAC,UAAU,aAAE,QAAQ,EAAA,CAAC,GAAG,IAAI;gBAEjC,EAAA,EAAI,UAAU,KAAK,SAAS,IAAI,QAAQ,KAAK,SAAS,EACrD,KAAA,CAAM,GAAA,CAAI,KAAK,CAAC,CAAsC;gBAGvD,GAAA,CAAI,SAAS,MAAM,IAAI,CAAC,GAAG,CAAA,cAAA;gBAE3B,GAAA,CAAI,KAAK,GAAG,UAAU;gBACtB,GAAA,CAAI,IAAI,GAAG,UAAU,GAAG,QAAQ,GAAG,MAAM,CAAC,CAAC;gBAE3C,GAAA,CAAI,OAAM;gBAEV,EAAA,EAAG,QAAQ,KAAK,MAAM,CAAC,CAAC,GAAE,CAA1B;oBACC,OAAM,GAAG,GAAA,CAAI,WAAW,CAAC,CAAC;oBAC1B,OAAO,CAAC,IAAI,EAAC,0BAAA,EAA6B,IAAI,CAAC,IAAI;gBACnD,CAAA,MAAI,CAAA;oBACJ,GAAA,CAAI,QAAQ,SAAS,KAAK,CAAC,SAAS,EAAE,CAAtC;wBACC,OAAO,EAAE,CAAT;4BACC,CAAc,eAAE,CAAsB;4BACtC,CAAO,SAAE,MAAA,EAAS,KAAK,CAAA,CAAA,EAAI,IAAI;wBAC/B,CAAA;oBACD,CAAA;oBAED,OAAM,SAAS,QAAQ,CAAC,WAAW;gBACnC,CAAA;gBAED,KAAA,CAAM,UAAU,GAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,CAAQ,UAAI,yCAAU,CAAC,qBAAqB,GAAG,yCAAU,CAAC,cAAc;gBACvH,KAAA,CAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU;gBAEnD,MAAM,CAAC,SAAS,IAAI,CAAC,GAArB,CAAA;oBAEC,GAAA,CAAI,IAAI,GAAG,CAAC,CAAC,IAAI;oBACjB,GAAA,CAAI,OAAO,GAAG,IAAI,CAAC,gBAAgB;oBAEnC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM;oBAE/C,GAAA,CAAI,QAAQ,GAAG,GAAA,CAAI,qBAAc;oBAEjC,GAAA,CAAI,GAAA,CAAI,QAAQ,IAAI,OAAO,CAAC,CAA5B;wBAEC,GAAA,CAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,EAAE,MAAM;wBAErC,EAAA,EAAG,QAAQ,KAAK,CAAU,WACzB,QAAQ,CAAC,YAAY,CAAC,CAAU,WAAE,GAAA,CAAI,sBAAe,CAAC,GAAA,CAAI,YAAY,CAAC,MAAM,GAAG,CAAC;6BAC5E,EAAA,EAAG,QAAQ,KAAK,CAAM,OAC3B,QAAQ,CAAC,YAAY,CAAC,CAAM,OAAE,GAAA,CAAI,sBAAe,CAAC,GAAA,CAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI;6BAC5E,EAAA,EAAG,QAAQ,KAAK,CAAQ,SAC7B,EAAsF,AAAtF,oFAAsF;wBACtF,QAAQ,CAAC,YAAY,CAAC,CAAQ,SAAE,GAAA,CAAI,sBAAe,CAAC,GAAA,CAAI,YAAY,CAAC,MAAM,GAAG,CAAC;6BAC1E,EAAA,EAAI,QAAQ,KAAK,CAAS,UAAE,CAA5B;4BACL,GAAA,CAAI,eAAe,GAAG,GAAA,CAAI,sBAAe,CAAC,GAAA,CAAI,UAAU,CAAC,MAAM,GAAG,CAAC;4BACnE,eAAe,CAAC,UAAU,GAAG,IAAI;4BACjC,QAAQ,CAAC,YAAY,CAAC,CAAS,UAAE,eAAe;wBAChD,CAAA,MAAI,CAAA;4BACJ,KAAA,CAAM,eAAe,GAEjB,GAAA,CAAI,sBAAe,CAAC,GAAA,CAAI,YAAY,CAAC,MAAM,GAAG,CAAC;4BAEnD,GAAA,CAAI,cAAc,GAAG,OAAO,CAAC,QAAQ,EAAE,SAAS;4BAChD,eAAe,CAAC,MAAM,GAAG,CAAzB;gCACC,MAAM,EAAE,OAAO,CAAC,QAAQ,EAAE,MAAM;gCAChC,KAAK,EAAE,OAAO,CAAC,QAAQ,EAAE,KAAK;gCAC9B,aAAa,EAAE,OAAO,CAAC,QAAQ,EAAE,aAAa;gCAC9C,KAAK,EAAE,cAAc,CAAC,KAAK;4BAC3B,CAAA;4BAED,QAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,eAAe;wBAC/C,CAAA;oBAED,CAAA;oBACD,EAAa,AAAb,WAAa;oBAEb,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO;oBAC3B,IAAI,CAAC,QAAQ,GAAG,QAAQ;oBACxB,IAAI,CAAC,MAAM,GAAG,IAAI;oBAClB,IAAI,CAAC,OAAO,GAAG,KAAK;oBACpB,EAA4B,AAA5B,0BAA4B;oBAC5B,IAAI,CAAC,cAAc,CAAC,eAAe;gBACpC,CAAC;gBAED,GAAA,CAAI,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe;gBACzD,GAAA,CAAI,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK;gBAErC,GAAA,CAAI,GAAG,GAAG,IAAI,CAAC,WAAW;gBAC1B,GAAA,CAAI,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG;gBACxD,GAAA,CAAI,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG;gBACtC,GAAA,CAAI,GAAG,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,IAAI;gBAC9B,GAAA,CAAI,SAAS,GAAG,IAAI,CAAC,SAAS;gBAE9B,GAAA,CAAI,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM;gBAE9C,GAAA,CAAI,OAAO,GAAG,CAAd;oBACC,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,MAAM,EAAE,OAAM;oBACd,eAAe,EAAE,eAAe;oBAChC,KAAK,EAAE,KAAK;oBACZ,GAAG,EAAE,GAAG;oBACR,GAAG,EAAE,GAAG;oBACR,IAAI,EAAE,IAAI;oBACV,MAAM,EAAE,MAAM;oBACd,SAAS,EAAE,SAAS;gBACpB,CAAA;gBAED,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;oBAAA,OAAO,CAAC,MAAM;gBAAA,CAAC;YAC5C,CAAA,CAAA,KAAA,EAAM,CAAC,EAAC,CAAR;gBACA,IAAI,CAAC,MAAM,GAAG,KAAK;gBACnB,IAAI,CAAC,OAAO,GAAG,KAAK;gBACpB,IAAI,CAAC,cAAc,CAAC,eAAe;YAEnC,EAA8C,AAA9C,4CAA8C;YAC9C,EAAkB,AAAlB,gBAAkB;YAClB,EAAgC,AAAhC,8BAAgC;YAChC,CAAA;QACF,CAAC;IAAA,CAAA;IAED,cAAc,CAAC,IAAuB,EAAE,MAAkB,EAA1D,CAAA;QAEC,GAAA,CAAI,IAAI,GAAG,GAAA,CAAI,QAAQ,CAAC,MAAM;QAE9B,GAAA,CAAI,YAAY,GAAG,EAAE;QACrB,GAAA,CAAI,QAAQ,GAAG,MAAM,CAAC,UAAU,GAAG,YAAY;QAE/C,GAAA,CAAI,MAAM,GAAG,IAAI,CAAC,cAAc;QAChC,EAAsB,AAAtB,oBAAsB;QACtB,GAAA,CAAI,KAAK,GAAyB,GAAA,CAAI,KAAK,CAAC,QAAQ;QACpD,KAAK,CAAC,CAAC,IAAI,IAAI;QACf,GAAA,CAAI,OAAO,GAAG,CAAC;QAEf,GAAA,CAAI,GAAA,CAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,GAAG,CAAjC;YACC,GAAA,CAAI,OAAO,GAAG,KAAK,CAAC,CAAC;YAErB,GAAA,CAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,YAAY,GAAG,CAAC;YAC7C,GAAA,CAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,YAAY,GAAG,CAAC;YAClD,GAAA,CAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,YAAY,GAAG,CAAC,EAAE,IAAI;YACzD,GAAA,CAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,YAAY,GAAG,CAAC,EAAE,IAAI;YAC5D,GAAA,CAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,YAAY,GAAG,EAAE,EAAE,IAAI;YAE3D,EAAuB,AAAvB,qBAAuB;YACvB,EAAgB,AAAhB,cAAgB;YAChB,EAAI,AAAJ,EAAI;YAGJ,EAAA,EAAG,OAAO,CAAC,QAAQ,KAAK,CAAC,EAAC,CAA1B;gBACC,EAA+B,AAA/B,6BAA+B;gBAC/B,OAAO,CAAC,UAAU,GAAG,UAAU;gBAC/B,OAAO,CAAC,QAAQ,GAAG,QAAQ;gBAC3B,OAAO,CAAC,SAAS,GAAG,SAAS;YAC7B,CAAA,MAAK,EAAA,EAAG,IAAI,KAAK,CAAC,EAAC,CAAd;gBACL,EAAa,AAAb,WAAa;gBACb,OAAO,CAAC,mBAAmB,GAAG,UAAU;gBACxC,OAAO,CAAC,iBAAiB,GAAG,QAAQ;gBACpC,OAAO,CAAC,SAAS,GAAG,SAAS;YAC7B,CAAA,MAAI,CAAA;gBACJ,EAAkB,AAAlB,gBAAkB;gBAClB,OAAO,CAAC,UAAU,GAAG,UAAU;gBAC/B,OAAO,CAAC,QAAQ,GAAG,QAAQ;gBAC3B,OAAO,CAAC,SAAS,GAAG,SAAS;YAC7B,CAAA;YAED,OAAO,CAAC,QAAQ,GAAG,IAAI;YAEvB,EAAA,EAAG,OAAO,CAAC,QAAQ,KAAK,CAAC,EACxB,QAAA;YAGD,GAAA,CAAI,GAAA,CAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,CAArD;gBACC,GAAA,CAAI,WAAW,IAAK,CAAC,IAAI,UAAU,GAAI,SAAS,MAAM,CAAC;gBAEvD,EAAA,GAAI,WAAW,EACd,QAAA;gBAGD,GAAA,CAAI,SAAS,GAAG,OAAO,CAAC,IAAI,GAAG,UAAU;gBAEzC,GAAA,CAAI,SAAS,GAAG,qCAAe,CAAC,OAAO,CAAC,WAAW,EAAE,UAAU;gBAC/D,GAAA,CAAI,KAAK,GAAG,GAAA,CAAI,yCAAkB,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS;gBAC/D,KAAK,CAAC,IAAI,GAAG,SAAS;gBACtB,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,GAAG,CAAC;gBACnC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,GAAG,CAAC;gBAE9B,OAAO,CAAC,QAAgB,CAAC,UAAU,IAAI,KAAK;gBAC7C,KAAK,CAAC,MAAM,GAAG,OAAO;gBAEtB,EAAqB,AAArB,mBAAqB;gBACrB,KAAK,CAAC,OAAO,IAAI,KAAK;gBACtB,OAAO;YACP,CAAA;QAED,EAAuB,AAAvB,qBAAuB;QACvB,EAAU,AAAV,QAAU;QACV,EAAI,AAAJ,EAAI;QACJ,CAAA;IAED,EAAqB,AAArB,mBAAqB;IACrB,EAA+D,AAA/D,6DAA+D;IAC/D,EAAqB,AAArB,mBAAqB;IACrB,EAAI,AAAJ,EAAI;IACL,CAAC;IAEK,aAAa,CAAC,IAAwB,EAAtC,CAAA;Q,M,C,+B,C,I,E,I,C,C,E,I,C,C,E,Q,I,C;YAEL,GAAA,CAAI,CAAA,sBAAC,mBAAmB,sBAAE,iBAAiB,EAAA,CAAC,GAAG,IAAI;YAEnD,EAAA,EAAI,mBAAmB,KAAK,SAAS,IAAI,iBAAiB,KAAK,SAAS,EACvE,KAAA,CAAM,GAAA,CAAI,KAAK,EAAC,iEAAA,EAAoE,IAAI,CAAC,IAAI;YAG9F,GAAA,CAAI,aAAa,MAAM,IAAI,CAAC,GAAG,CAAA,iBAAA;YAE/B,GAAA,CAAI,KAAK,GAAG,mBAAmB;YAC/B,GAAA,CAAI,IAAI,GAAG,KAAK,GAAG,iBAAiB,GAAG,MAAM,CAAC,CAAC;YAE/C,GAAA,CAAI,QAAQ,SAAS,KAAK,CAAC,aAAa,EAAE,CAA1C;gBACC,OAAO,EAAE,CAAT;oBACC,CAAc,eAAE,CAAsB;oBACtC,CAAO,SAAE,MAAA,EAAS,KAAK,CAAA,CAAA,EAAI,IAAI;gBAC/B,CAAA;YACD,CAAA;YAED,GAAA,CAAI,MAAM,SAAS,QAAQ,CAAC,WAAW;YAEvC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM;QACjC,CAAC;IAAA,CAAA;;AAIF,GAAA,CAAI,6BAAO,GAAG,GAAA,CAAI,cAAO;SAChB,qCAAe,CAAC,IAAS,EAAE,KAAY,EAAhD,CAAA;IACC,GAAA,CAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK;IACxB,GAAA,CAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK;IACxB,GAAA,CAAI,IAAI,GAAG,6BAAO,CAAC,UAAU,CAAC,GAAG,EAAE,GAAG;IAEtC,EAAA,GAAK,KAAK,GAAG,CAAM,IAAI,CAAC,EACvB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;SAEnB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;IAGpB,EAAA,GAAK,KAAK,GAAG,CAAM,IAAI,CAAC,EACvB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;SAEnB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;IAGpB,EAAA,GAAK,KAAK,GAAG,CAAM,IAAI,CAAC,EACvB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;SAEnB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;IAGpB,MAAA,CAAO,GAAA,CAAI,WAAI,CAAC,GAAG,EAAE,GAAG;AACzB,CAAC;AAED,GAAA,CAAI,8CAAwB,GAAG,CAA/B;IACC,CAAQ,SAAE,yCAAmB,CAAC,gBAAgB;IAC9C,CAAO,QAAE,yCAAmB,CAAC,eAAe;IAC5C,CAAM,OAAE,yCAAmB,CAAC,cAAc;IAC1C,CAAO,QAAE,yCAAmB,CAAC,eAAe;IAC5C,CAAO,QAAE,yCAAmB,CAAC,eAAe;IAC5C,CAAQ,SAAE,yCAAmB,CAAC,gBAAgB;IAC9C,CAAO,QAAE,yCAAmB,CAAC,eAAe;IAC5C,CAAQ,SAAE,yCAAmB,CAAC,gBAAgB;IAC9C,CAAO,QAAE,yCAAmB,CAAC,eAAe;IAC5C,CAAQ,SAAE,yCAAmB,CAAC,gBAAgB;AAC9C,CAAA;MAoCY,yCAAY;iBAIxB,CAAA;QAFA,IAAA,CAAA,UAAU,GAAe,GAAA,CAAI,yCAAU;IAGvC,CAAC;WAEM,eAAe,CAAC,cAA0B,EAAjD,CAAA;QAEC,GAAA,CAAI,UAAU,GAAG,GAAA,CAAI,yCAAe;QAEpC,EAA2C,AAA3C,yCAA2C;QAC3C,GAAA,CAAI,YAAY,GAA4B,CAA5C;YACC,CAAK,MAAE,CAAM;QACb,CAAA;QAED,GAAA,EAAK,KAAA,CAAM,aAAa,IAAI,cAAc,CAAE,CAA5C;YACC,GAAA,CAAI,CAAA,OAAC,IAAI,gBAAE,WAAW,QAAE,GAAG,QAAE,GAAG,EAAA,CAAC,GAAG,aAAa;YAEjD,GAAA,CAAI,IAAI,GAAG,8CAAwB,CAAC,aAAa,CAAC,IAAI,EAAG,CAA2D,AAA3D,EAA2D,AAA3D,yDAA2D;YAEpH,GAAA,CAAI,mBAAmB,GAAG,YAAY,CAAC,IAAI,IAAI,YAAY,CAAC,IAAI,IAAI,IAAI;YAExE,GAAA,CAAI,SAAS,GAAG,GAAA,CAAI,yCAAc,CAAC,mBAAmB,EAAE,IAAI,EAAE,WAAW;YAEzE,EAAA,EAAG,WAAW,KAAK,CAAC,EACnB,SAAS,CAAC,KAAK,GAAG,CAAC;gBAAA,GAAG,CAAC,CAAC;gBAAG,GAAG,CAAC,CAAC;YAAC,CAAC;iBAElC,SAAS,CAAC,KAAK,GAAG,CAAC;gBAAA,GAAG;gBAAE,GAAG;YAAA,CAAC;YAG7B,EAAA,EAAI,IAAI,KAAK,CAAU,WACtB,CAAA;gBAAA,EAAA,EAAI,MAAA,CAAO,SAAS,CAAC,KAAK,CAAC,CAAC,MAAM,CAAQ,WAAI,SAAS,CAAC,KAAK,CAAC,CAAC,MAAM,SAAS,CAAC,KAAK,CAAC,CAAC,GACrF,SAAS,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC;YACvB,CAAA;YAGF,SAAS,CAAC,YAAY,GAAG,SAAS,CAAC,KAAK;YAExC,UAAU,CAAC,GAAG,CAAC,SAAS;QACxB,CAAA;QAED,CAAA;YACC,EAA0B,AAA1B,wBAA0B;YAC1B,GAAA,CAAI,UAAU,GACb,UAAU,CAAC,UAAU,CAAC,IAAI,EAAC,CAAC,GAAI,CAAC,CAAC,IAAI,KAAK,CAAS;kBAAM,SAAS,IACnE,UAAU,CAAC,UAAU,CAAC,IAAI,EAAC,CAAC,GAAI,CAAC,CAAC,IAAI,KAAK,CAAS;kBAAM,SAAS,IACnE,UAAU,CAAC,UAAU,CAAC,IAAI,EAAC,CAAC,GAAI,CAAC,CAAC,IAAI,KAAK,CAAS;kBAAM,SAAS;YAEpE,EAAA,EAAG,UAAU,EAAC,CAAd;gBACC,GAAA,CAAI,MAAM,GAAG,CAAb;oBACC,IAAI,EAAE,CAAQ;oBACd,UAAU,EAAE,CAAC;wBAAA,CAAS;wBAAE,CAAS;wBAAE,CAAS;oBAAA,CAAC;gBAC7C,CAAA;gBACD,UAAU,CAAC,SAAS,CAAC,MAAM;YAC3B,CAAA;QACD,CAAA;QAED,MAAA,CAAO,UAAU;IAClB,CAAC;IAEK,IAAI,CAAC,GAAU,EAAE,UAAsB,EAAvC,CAAA;Q,M,C,+B,C,I,E,I,C,C,E,I,C,C,E,Q,I,C;YAEL,GAAA,CAAI,QAAQ,SAAS,UAAU,CAAC,GAAG;YACnC,GAAA,CAAI,QAAQ,SAAmB,QAAQ,CAAC,IAAI;YAE5C,GAAA,CAAI,UAAU,GAAG,yCAAY,CAAC,eAAe,CAAC,QAAQ,CAAC,UAAU;YACjE,EAA0B,AAA1B,wBAA0B;YAE1B,GAAA,CAAI,MAAM,GAAG,GAAA,CAAI,yCAAU,CAAC,GAAG,EAAE,IAAI,CAAC,UAAU,EAAE,QAAQ;YAC1D,MAAM,CAAC,UAAU,GAAG,UAAU;YAC9B,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK;YAC7B,MAAM,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM;YAE/B,GAAA,CAAI,MAAM,GAAG,GAAA,CAAI,yCAAc,CAAC,MAAM,EAAE,GAAA,CAAI,WAAI,CAAC,GAAA,CAAI,cAAO,IAAI,QAAQ,CAAC,WAAW,CAAC,GAAG,GAAG,GAAA,CAAI,cAAO,IAAI,QAAQ,CAAC,WAAW,CAAC,GAAG;YAClI,MAAM,CAAC,GAAG,GAAG,GAAG;YAChB,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO;YACjC,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK;YAE7B,GAAA,CAAI,GAAG,GAAG,GAAA,CAAI,cAAO,IAAI,QAAQ,CAAC,WAAW,CAAC,GAAG;YACjD,GAAA,CAAI,GAAG,GAAG,GAAA,CAAI,cAAO,IAAI,QAAQ,CAAC,WAAW,CAAC,GAAG;YACjD,GAAA,CAAI,WAAW,GAAG,GAAA,CAAI,WAAI,CAAC,GAAG,EAAE,GAAG;YAEnC,GAAA,CAAI,MAAM,GAAG,GAAG,CAAC,KAAK;YACtB,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM;YAC1B,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM;YAE1B,MAAM,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU;YACvC,MAAM,CAAC,WAAW,GAAG,WAAW;YAChC,MAAM,CAAC,gBAAgB,GAAG,WAAW,CAAC,KAAK;YAC3C,MAAM,CAAC,cAAc,GAAG,WAAW,CAAC,iBAAiB,CAAC,GAAA,CAAI,aAAM;YAChE,MAAM,CAAC,mBAAmB,GAAG,WAAW,CAAC,iBAAiB,CAAC,GAAA,CAAI,aAAM;YACrE,MAAM,CAAC,MAAM,GAAG,MAAM;YACtB,MAAM,CAAC,eAAe,GAAG,yCAAY,CAAC,eAAe,CAAC,QAAQ,CAAC,UAAU;YAEzE,GAAA,CAAI,IAAI,GAAG,GAAA,CAAI,yCAAkB,CAAC,CAAG,IAAE,MAAM,EAAE,WAAW;YAC1D,IAAI,CAAC,KAAK,GAAG,CAAC;YACd,IAAI,CAAC,QAAQ,GAAG,CAAC;YACjB,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,CAAC;YACnC,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc;YACjE,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO;YAC7B,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,CAAC,EAAG,CAAe,AAAf,EAAe,AAAf,aAAe;YAE5C,MAAM,CAAC,IAAI,GAAG,IAAI;YAElB,MAAM,CAAC,IAAI,CAAC,IAAI;YAEhB,GAAA,CAAI,MAAM,GAAG,CAAb;gBACC,QAAQ,EAAE,MAAM;YAChB,CAAA;YAED,MAAA,CAAO,MAAM;QAEd,CAAC;IAAA,CAAA;;;;A,G,C,+B,0B,S,I,Q,C,O,E,U,E,C,E,S,E,C;a,K,C,K,E,C;Q,M,C,K,Y,C,G,K,G,G,C,C,C,Q,C,O,E,C;Y,O,C,K;Q,C;I,C;I,M,C,G,E,C,K,C,G,O,G,Q,C,O,E,M,E,C;iB,S,C,K,E,C;Y,G,C,C;gB,I,C,S,C,I,C,K;Y,C,C,K,E,C,E,C;gB,M,C,C;Y,C;Q,C;iB,Q,C,K,E,C;Y,G,C,C;gB,I,C,S,C,C,Q,K;Y,C,C,K,E,C,E,C;gB,M,C,C;Y,C;Q,C;iB,I,C,M,E,C;Y,M,C,I,G,O,C,M,C,K,I,K,C,M,C,K,E,I,C,S,E,Q;Q,C;Q,I,E,S,G,S,C,K,C,O,E,U,I,C,C,G,I;I,C;A,C;SF5boB,yCAAU,CAC5B,GAAW,EACX,MAAgB,EAChB,UAAsB,EAH1B,CAAA;I,M,C,+B,C,I,E,I,C,C,E,I,C,C,E,Q,I,C;QAKI,KAAA,CAAM,OAAO,SAAS,MAAM,CAAC,GAAG;QAChC,KAAA,CAAM,MAAM,GAAG,GAAA,CAAI,sCAAY;QAC/B,KAAA,CAAM,CAAA,WAAC,QAAQ,EAAA,CAAC,SAAS,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU;QACxD,MAAA,CAAO,QAAQ;IACnB,CAAC;AAAA,CAAA;;;;;AUZD,KAAA,CAAM,4BAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAQ;AAC9C,KAAA,CAAM,wBAAE,GAAiC,4BAAM,CAAC,UAAU,CAAC,CAAO;AAE3D,KAAA,CAAM,yCAAQ,GAAG,CAAxB;IACE,oBAAoB,EAAE,kCAAY,CAAC,CAAgB,oBAAK,0CAAoB,CAAC,CAAC;IAC9E,aAAa,EACX,kCAAY,CAAC,CAAgB,oBAAK,kCAAY,CAAC,CAAmB,uBAAK,0CAAoB,CAAC,CAAC;IAC/F,UAAU,EAAE,kCAAY,CAAC,CAAmB,uBAAK,0CAAoB,CAAC,CAAC;IACvE,SAAS,EAAE,kCAAY;AACxB,CAAA;SAEQ,kCAAY,CAAC,GAAW,EAAjC,CAAA;IACE,MAAA,CAAO,wBAAE,KAAK,IAAI,IAAI,OAAO,CAAC,wBAAE,CAAC,YAAY,CAAC,GAAG;AACnD,CAAC;SAEQ,0CAAoB,CAAC,KAAa,EAA3C,CAAA;IACE,MAAA,CAAO,wBAAE,KAAK,IAAI,IAAI,wBAAE,CAAC,YAAY,CAAC,wBAAE,CAAC,mBAAmB,KAAK,KAAK;AACxE,CAAC;SAEQ,kCAAY,GAArB,CAAA;IACE,EAAA,EAAI,wBAAE,KAAK,IAAI,EACb,MAAA,CAAO,CAAE;IAGX,KAAA,CAAM,YAAY,GAAG,wBAAE,CAAC,wBAAwB,CAAC,wBAAE,CAAC,aAAa,EAAE,wBAAE,CAAC,UAAU;IAChF,KAAA,CAAM,cAAc,GAAG,wBAAE,CAAC,wBAAwB,CAAC,wBAAE,CAAC,aAAa,EAAE,wBAAE,CAAC,YAAY;IAEpF,KAAA,CAAM,YAAY,GAAG,wBAAE,CAAC,wBAAwB,CAAC,wBAAE,CAAC,eAAe,EAAE,wBAAE,CAAC,UAAU;IAClF,KAAA,CAAM,cAAc,GAAG,wBAAE,CAAC,wBAAwB,CAAC,wBAAE,CAAC,eAAe,EAAE,wBAAE,CAAC,YAAY;IAEtF,KAAA,CAAM,cAAc,GAClB,YAAY,IAAI,YAAY,IAAI,YAAY,CAAC,SAAS,GAAG,CAAC,IAAI,YAAY,CAAC,SAAS,GAAG,CAAC;IAE1F,KAAA,CAAM,gBAAgB,GACpB,cAAc,IACd,cAAc,IACd,cAAc,CAAC,SAAS,GAAG,CAAC,IAC5B,cAAc,CAAC,SAAS,GAAG,CAAC;IAE9B,MAAA,CAAO,cAAc,GAAG,CAAO,SAAG,gBAAgB,GAAG,CAAS,WAAG,CAAM;AACzE,CAAC;;;;AIpCD,GAAA,CAAY,yCAYX;CAZD,QAAA,CAAY,yCAAkB,EAA9B,CAAA;IACE,yCAAA,CAAA,yCAAA,CAAA,CAAA,uBAAA,CAAA,IAAA,CAAsB;IACtB,yCAAA,CAAA,yCAAA,CAAA,CAAA,iBAAA,CAAA,IAAA,CAAgB;IAChB,yCAAA,CAAA,yCAAA,CAAA,CAAA,mBAAA,CAAA,IAAA,CAAkB;IAClB,yCAAA,CAAA,yCAAA,CAAA,CAAA,qBAAA,CAAA,IAAA,CAAoB;IACpB,yCAAA,CAAA,yCAAA,CAAA,CAAA,kBAAA,CAAA,IAAA,CAAiB;IACjB,yCAAA,CAAA,yCAAA,CAAA,CAAA,WAAA,CAAA,IAAA,CAAU;IACV,yCAAA,CAAA,yCAAA,CAAA,CAAA,cAAA,CAAA,IAAA,CAAa;IACb,yCAAA,CAAA,yCAAA,CAAA,CAAA,mBAAA,CAAA,IAAA,CAAkB;IAClB,yCAAA,CAAA,yCAAA,CAAA,CAAA,wBAAA,CAAA,IAAA,CAAuB;IACvB,yCAAA,CAAA,yCAAA,CAAA,CAAA,iBAAA,CAAA,IAAA,CAAgB;IAChB,yCAAA,CAAA,yCAAA,CAAA,CAAA,WAAA,EAAA,IAAA,CAAW;AACb,CAAC,EAZW,yCAAkB,KAAlB,yCAAkB,GAAA,CAAA;AAAA,CAAA;AAmBvB,KAAA,CAAM,yCAAqB,GAAuC,CAAzE;IACE,gBAAgB,EAAE,CAAA;QAAE,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAC;IAAA,CAAE;IACzC,eAAe,EAAE,CAAA;QAAE,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAC;IAAA,CAAE;IACxC,cAAc,EAAE,CAAA;QAAE,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAC;IAAA,CAAE;IACvC,eAAe,EAAE,CAAA;QAAE,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAC;IAAA,CAAE;IACxC,eAAe,EAAE,CAAA;QAAE,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAC;IAAA,CAAE;IACxC,gBAAgB,EAAE,CAAA;QAAE,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAC;IAAA,CAAE;IACzC,eAAe,EAAE,CAAA;QAAE,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAC;IAAA,CAAE;IACxC,gBAAgB,EAAE,CAAA;QAAE,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAC;IAAA,CAAE;IACzC,eAAe,EAAE,CAAA;QAAE,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAC;IAAA,CAAE;IACxC,gBAAgB,EAAE,CAAA;QAAE,OAAO,EAAE,CAAC;QAAE,IAAI,EAAE,CAAC;IAAA,CAAE;AAC1C,CAAA;SAeQ,wCAAkB,CACzB,IAAwB,EACxB,IAAwB,EACxB,WAAmB,EAHrB,CAAA;IAKE,MAAA,CAAO,CAAP;cACE,IAAI;cACJ,IAAI;qBACJ,WAAW;QACX,QAAQ,EAAE,WAAW,GAAG,IAAI,CAAC,IAAI;IAClC,CAAA;AACH,CAAC;AAED,KAAA,CAAM,iCAAW,GAAG,wCAAkB,CACpC,yCAAkB,CAAC,YAAY,EAC/B,yCAAqB,CAAC,cAAc,EACpC,CAAC;AAGI,KAAA,CAAM,yCAAgB,GAAG,CAAhC;IACE,kBAAkB,EAAE,wCAAkB,CACpC,yCAAkB,CAAC,kBAAkB,EACrC,yCAAqB,CAAC,eAAe,EACrC,CAAC;iBAEH,iCAAW;IACX,YAAY,EAAE,iCAAW;IACzB,UAAU,EAAE,wCAAkB,CAC5B,yCAAkB,CAAC,YAAY,EAC/B,yCAAqB,CAAC,cAAc,EACpC,CAAC;IAEH,aAAa,EAAE,wCAAkB,CAC/B,yCAAkB,CAAC,aAAa,EAChC,yCAAqB,CAAC,eAAe,EACrC,CAAC;IAEH,SAAS,EAAE,wCAAkB,CAC3B,yCAAkB,CAAC,MAAM,EACzB,yCAAqB,CAAC,eAAe,EACrC,CAAC;IAEH,SAAS,EAAE,wCAAkB,CAC3B,yCAAkB,CAAC,SAAS,EAC5B,yCAAqB,CAAC,gBAAgB,EACtC,CAAC;IAEH,cAAc,EAAE,wCAAkB,CAChC,yCAAkB,CAAC,cAAc,EACjC,yCAAqB,CAAC,eAAe,EACrC,CAAC;IAEH,mBAAmB,EAAE,wCAAkB,CACrC,yCAAkB,CAAC,mBAAmB,EACtC,yCAAqB,CAAC,eAAe,EACrC,CAAC;IAEH,YAAY,EAAE,wCAAkB,CAC9B,yCAAkB,CAAC,YAAY,EAC/B,yCAAqB,CAAC,eAAe,EACrC,CAAC;IAEH,MAAM,EAAE,wCAAkB,CAAC,yCAAkB,CAAC,MAAM,EAAE,yCAAqB,CAAC,eAAe,EAAE,CAAC;AAC/F,CAAA;MAIY,yCAAe;gBAKd,mBAAA,GAAkD,CAAA,CAAE,CAAhE,CAAA;QAJA,IAAA,CAAA,UAAU,GAAsB,CAAA,CAAE;QAClC,IAAA,CAAA,QAAQ,GAAW,CAAC;QACpB,IAAA,CAAA,IAAI,GAAW,CAAC;QAGd,GAAA,CAAK,GAAA,CAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,mBAAmB,CAAC,MAAM,EAAE,CAAC,GAAI,CAArD;YACE,KAAA,CAAM,kBAAkB,GAAG,mBAAmB,CAAC,CAAC;YAChD,KAAA,CAAM,cAAc,GAAG,yCAAgB,CAAC,kBAAkB;YAC1D,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc;YACnC,IAAI,CAAC,QAAQ,IAAI,cAAc,CAAC,QAAQ;YACxC,IAAI,CAAC,IAAI;QACV,CAAA;IACH,CAAC;IAED,GAAG,CAAC,cAA+B,EAAnC,CAAA;QACE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc;QACnC,IAAI,CAAC,QAAQ,IAAI,cAAc,CAAC,QAAQ;QACxC,IAAI,CAAC,IAAI;IACX,CAAC;IAED,SAAS,GAAT,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,sCAAgB,MAAM,SAAS;IAC7D,CAAC;IAED,UAAU,GAAV,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,uCAAiB,MAAM,SAAS;IAC9D,CAAC;;SAGM,sCAAgB,CAAC,CAAA,OAAE,IAAI,EAAA,CAAmB,EAAnD,CAAA;IACE,MAAA,CAAO,IAAI,KAAK,yCAAkB,CAAC,YAAY;AACjD,CAAC;SAEQ,uCAAiB,CAAC,CAAA,OAAE,IAAI,EAAA,CAAmB,EAApD,CAAA;IACE,MAAA,CACE,IAAI,KAAK,yCAAkB,CAAC,mBAAmB,IAC/C,IAAI,KAAK,yCAAkB,CAAC,aAAa,IACzC,IAAI,KAAK,yCAAkB,CAAC,MAAM,IAClC,IAAI,KAAK,yCAAkB,CAAC,YAAY;AAE5C,CAAC;;;;;;ME7JY,yCAAO;gBAKN,OAAe,CAA3B,CAAA;QAFA,IAAA,CAAA,YAAY,GAAW,CAAC;QAGtB,IAAI,CAAC,OAAO,GAAG,OAAO;QAEtB,KAAA,CAAM,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,CAAG,QAAM,EAAE,GAAG,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,CAAG;QACnF,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,GAAG,EAAE;QAC5D,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,GAAG,CAAC,GAAG,EAAE;QAC7D,EAAA,EAAI,KAAK,CAAC,IAAI,CAAC,YAAY,GACzB,IAAI,CAAC,YAAY,GAAG,CAAC;IAEzB,CAAC;IAED,SAAS,CAAC,OAAe,EAAzB,CAAA;QACE,KAAA,CAAM,CAAC,GAAG,GAAA,CAAI,yCAAO,CAAC,OAAO;QAE7B,EAAA,EAAI,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,EACpC,MAAA,CAAO,IAAI;aACN,EAAA,EAAI,IAAI,CAAC,YAAY,KAAK,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,EACnF,MAAA,CAAO,IAAI;aAEX,MAAA,CAAO,KAAK;IAEhB,CAAC;IAED,aAAa,CAAC,OAAe,EAA7B,CAAA;QACE,KAAA,CAAM,CAAC,GAAG,GAAA,CAAI,yCAAO,CAAC,OAAO;QAE7B,EAAA,EAAI,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,EACpC,MAAA,CAAO,IAAI;aACN,EAAA,EAAI,IAAI,CAAC,YAAY,KAAK,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,YAAY,EACpF,MAAA,CAAO,IAAI;aAEX,MAAA,CAAO,KAAK;IAEhB,CAAC;IAED,IAAI,CAAC,OAAe,EAApB,CAAA;QACE,MAAA,EAAQ,IAAI,CAAC,SAAS,CAAC,OAAO;IAChC,CAAC;;;;MJHU,yCAAY;gBAWX,CAAA,SACV,MAAM,IAAG,CAAC,GAAI,OAAO,CAAC,OAAO,CAAC,CAAC;gBAC/B,OAAO,gBACP,WAAW,UACX,KAAK,eACL,UAAU,IAAA,CACU,CANtB,CAAA;QANA,IAAA,CAAA,QAAQ,GAAY,KAAK;QAIjB,IAAA,CAAA,OAAO,GAAa,CAAA,CAAE;QAS5B,OAAO,CAAC,GAAG,CAAC,CAAC;YAAA,MAAM;YAAE,OAAO;YAAE,WAAW;YAAE,KAAK;YAAE,UAAU;QAAA,CAAC;QAC7D,EAAA,EAAI,MAAA,CAAO,OAAO,KAAK,CAAQ,SAC7B,IAAI,CAAC,OAAO,GAAG,GAAA,CAAI,yCAAO,CAAC,OAAO;aAElC,IAAI,CAAC,OAAO,GAAG,OAAO;QAGxB,IAAI,CAAC,UAAU,GAAG,UAAU;QAC5B,IAAI,CAAC,MAAM,GAAG,MAAM;QACpB,IAAI,CAAC,WAAW,GAAG,WAAW;QAC9B,IAAI,CAAC,KAAK,GAAG,KAAK;QAClB,IAAI,CAAC,SAAS,GAAG,CAAA,CAAE;IACrB,CAAC;IAED,OAAO,GAAP,CAAA;QACE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAC,MAAM,GAAI,MAAM,CAAC,SAAS;;QAC/C,IAAI,CAAC,OAAO,GAAG,CAAA,CAAE;QAEjB,IAAI,CAAC,QAAQ,GAAG,IAAI;IACtB,CAAC;IAED,IAAI,CAAC,IAAkC,EAAvC,CAAA;QACE,EAAA,EAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,EAC9B,MAAA,CAAO,OAAO,CAAC,OAAO;QAGxB,MAAA,CAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,IACpD,IAAI,EAAC,GAAG,GAAI,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAA;gBAAE,IAAI,EAAE,CAAM;YAAA,CAAE;UACjD,IAAI,EAAC,GAAG,GAAI,GAAG,CAAC,WAAW;UAC3B,IAAI,EAAC,MAAM,GAAX,CAAA;YACC,MAAA,CAAO,GAAA,CAAI,OAAO,EAAC,OAAO,GAAI,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO;;QAChE,CAAC;IACL,CAAC;IAEO,UAAU,CAAC,IAAkC,EAA7C,CAAA;QACN,GAAA,CAAI,GAAG,GAAG,IAAI,CAAC,MAAM;QACrB,EAAA,EAAI,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAK,OAClC,GAAG,IAAI,CAAM;QAGf,MAAA,CAAO,GAAG;IACZ,CAAC;IAEO,KAAK,CACX,IAAkC,EAClC,MAAmB,EACnB,OAAmB,EAHb,CAAA;QAKN,EAAA,EAAI,IAAI,CAAC,QAAQ,EAAE,CAAnB;YACE,OAAO;YACP,MAAA;QACD,CAAA;QAED,KAAA,CAAM,MAAM,GAAG,IAAI,CAAC,SAAS;QAE7B,KAAA,CAAM,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe;QACxD,KAAA,CAAM,SAAS,GAAG,MAAM,CAAC,UAAU,GAAG,eAAe,CAAC,QAAQ;QAE9D,EAAA,EAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAK,OACzB,IAAI,CAAC,SAAS,GAAG,SAAS;QAG5B,MAAM,CAAC,SAAS,IAAI,CAAiB,GAArC,CAAA;YACE,EAAA,EAAI,IAAI,CAAC,QAAQ,EAAE,CAAnB;gBACE,OAAO;gBACP,MAAA;YACD,CAAA;YAED,KAAA,CAAM,IAAI,GAAG,CAAC,CAAC,IAAI;YAEnB,KAAA,CAAM,QAAQ,GAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,GAAA,CAAI,qBAAc;YACrE,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW;YAEvC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,gBAAgB;YACxD,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO;YACtC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,SAAS;YAE3C,IAAI,CAAC,IAAI,GAAG,GAAA,CAAI,cAAO,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI;YAC7C,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,gBAAgB;YACtE,IAAI,CAAC,MAAM,GAAG,IAAI;YAClB,IAAI,CAAC,OAAO,GAAG,KAAK;YACpB,IAAI,CAAC,MAAM,GAAG,KAAK;YACnB,IAAI,CAAC,WAAW,CAAC,eAAe;YAChC,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,IAAI;YAEnC,IAAI,CAAC,aAAa,CAAC,MAAM;YAEzB,IAAI,CAAC,SAAS,CAAC,OAAO,EAAC,QAAQ,GAAI,QAAQ,CAAC,IAAI;;YAChD,OAAO;QACT,CAAC;QAED,KAAA,CAAM,OAAO,GAAG,CAAhB;oBACE,MAAM;6BACN,eAAe;YACf,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;YAC7B,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO;YACjC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO;YACvC,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,WAAW,EAAE,IAAI,CAAC,WAAW;QAC9B,CAAA;QAED,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;YAAA,OAAO,CAAC,MAAM;QAAA,CAAC;IAC9C,CAAC;IAEO,SAAS,GAAT,CAAA;QACN,KAAA,CAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG;QAC/B,EAAA,EAAI,MAAM,EACR,MAAA,CAAO,MAAM;QAGf,MAAA,CAAO,GAAA,CAAI,MAAM,SACP,CAAqC;IAGjD,CAAC;IAEO,aAAa,CAAC,MAAc,EAA5B,CAAA;QACN,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM;IAC1B,CAAC;IAEO,mBAAmB,CAAC,CAAA,MAAE,GAAG,QAAE,GAAG,EAAA,CAAoC,EAAlE,CAAA;QACN,KAAA,CAAM,GAAG,GAAG,GAAA,CAAI,WAAI,CAAC,GAAA,CAAI,cAAO,GAAG,SAAS,CAAC,GAAG,GAAG,GAAA,CAAI,cAAO,GAAG,SAAS,CAAC,GAAG;QAC9E,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG;QACnB,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;QAEnB,MAAA,CAAO,GAAG;IACZ,CAAC;IAEO,mBAAmB,CACzB,QAAwB,EACxB,OAAoD,EAF9C,CAAA;QAIN,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,EAAC,QAAQ,GAArC,CAAA;YACE,KAAA,CAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,EAAE,MAAM;YAEvC,EAAA,EAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,yCAAkB,CAAC,kBAAkB,GAClE,QAAQ,CAAC,YAAY,CAAC,CAAU,WAAE,GAAA,CAAI,sBAAe,CAAC,GAAA,CAAI,YAAY,CAAC,MAAM,GAAG,CAAC;iBAC5E,EAAA,EAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,yCAAkB,CAAC,YAAY,GACnE,QAAQ,CAAC,YAAY,CAAC,CAAO,QAAE,GAAA,CAAI,sBAAe,CAAC,GAAA,CAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI;iBAC7E,EAAA,EAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,yCAAkB,CAAC,SAAS,GAChE,QAAQ,CAAC,YAAY,CAAC,CAAW,YAAE,GAAA,CAAI,sBAAe,CAAC,GAAA,CAAI,YAAY,CAAC,MAAM,GAAG,CAAC;iBAC7E,EAAA,EAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,yCAAkB,CAAC,cAAc,GACrE,QAAQ,CAAC,YAAY,CAAC,CAAgB,iBAAE,GAAA,CAAI,sBAAe,CAAC,GAAA,CAAI,UAAU,CAAC,MAAM,GAAG,CAAC;iBAChF,EAAA,EAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,yCAAkB,CAAC,mBAAmB,GAC1E,QAAQ,CAAC,YAAY,CAAC,CAAQ,SAAE,GAAA,CAAI,sBAAe,CAAC,GAAA,CAAI,YAAY,CAAC,MAAM,GAAG,CAAC;iBAC1E,EAAA,EAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,yCAAkB,CAAC,YAAY,GACnE,QAAQ,CAAC,YAAY,CAAC,CAAQ,SAAE,GAAA,CAAI,sBAAe,CAAC,GAAA,CAAI,YAAY,CAAC,MAAM,GAAG,CAAC;iBAC1E,EAAA,EAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,yCAAkB,CAAC,MAAM,GAC7D,QAAQ,CAAC,YAAY,CAAC,CAAQ,SAAE,GAAA,CAAI,sBAAe,CAAC,GAAA,CAAI,YAAY,CAAC,MAAM,GAAG,CAAC;QAEnF,CAAC;IACH,CAAC;IAEO,UAAU,CAAC,QAAwB,EAAE,OAAoB,EAAzD,CAAA;QACN,KAAA,CAAM,gBAAgB,GAAG,GAAA,CAAI,2BAAoB,CAAC,OAAO,EAAE,CAAC;QAC5D,gBAAgB,CAAC,UAAU,GAAG,IAAI;QAClC,QAAQ,CAAC,YAAY,CAAC,CAAS,UAAE,gBAAgB;IACnD,CAAC;IAEO,kBAAkB,CAAC,QAAwB,EAAE,SAAiB,EAA9D,CAAA;QACN,EAAA,GAAK,QAAQ,CAAC,YAAY,CAAC,CAAQ,UAAG,CAAtC;YACE,KAAA,CAAM,MAAM,GAAG,GAAA,CAAI,YAAY,CAAC,SAAS,GAAG,CAAC;YAC7C,QAAQ,CAAC,YAAY,CAAC,CAAQ,SAAE,GAAA,CAAI,sBAAe,CAAC,GAAA,CAAI,YAAY,CAAC,MAAM,GAAG,CAAC;QAChF,CAAA;IACH,CAAC;IAEO,WAAW,CAAC,QAAgB,EAAE,IAAwB,EAAtD,CAAA;QACN,MAAA,CAAO,QAAQ,CAAC,QAAQ,EAAE,EAAE,MAAM,IAAI;IACxC,CAAC;;;;;;;MQ7NU,yCAAwB;gBAe1B,MAAoB,EACpB,WAAiB,EACjB,gBAAsB,EACtB,MAAe,EACf,UAAsB,CAL/B,CAAA;QACS,IAAA,CAAA,MAAM,GAAN,MAAM;QACN,IAAA,CAAA,WAAW,GAAX,WAAW;QACX,IAAA,CAAA,gBAAgB,GAAhB,gBAAgB;QAChB,IAAA,CAAA,MAAM,GAAN,MAAM;QACN,IAAA,CAAA,UAAU,GAAV,UAAU;QAlBnB,IAAA,CAAA,QAAQ,GAAY,KAAK;QACzB,IAAA,CAAA,WAAW,GAAY,IAAI;QAE3B,IAAA,CAAA,SAAS,GAAW,CAAE;QACtB,IAAA,CAAA,iBAAiB,GAAW,EAAE;QAC9B,IAAA,CAAA,KAAK,GAAiD,CAAA;QAAA,CAAE;QACxD,IAAA,CAAA,eAAe,GAAW,CAAC;QAC3B,IAAA,CAAA,kBAAkB,GAAW,CAAC;QAC9B,IAAA,CAAA,OAAO,GAAW,CAAC;QACnB,IAAA,CAAA,eAAe,GAAoB,GAAA,CAAI,yCAAe,CAAC,CAAA,CAAE;QACzD,IAAA,CAAA,UAAU,GAAQ,IAAI;QACtB,IAAA,CAAA,GAAG,GAAkB,IAAI;IAQtB,CAAC;IAEJ,OAAO,GAAP,CAAA;QACE,IAAI,CAAC,MAAM,CAAC,OAAO;QACnB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAC,IAAI,GAAI,IAAI,CAAC,OAAO;;QAEvC,IAAI,CAAC,QAAQ,GAAG,IAAI;IACtB,CAAC;IAED,qBAAqB,CAAC,QAAsD,EAA5E,CAAA;QACE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ;IACrC,CAAC;IAED,wBAAwB,GAAxB,CAAA;QACE,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,CAAA,CAAE;IAC5B,CAAC;;;;;;;AEvBH,KAAA,CAAM,iCAAW,GAAG,CAAC;MAER,yCAA6B,SAAQ,sBAAe;gBAmCnD,IAAY,EAAE,WAAqC,EAAE,WAAiB,CAAlF,CAAA;QACE,KAAK;QAnCP,IAAA,CAAA,EAAE,GAAW,yCAA4B,CAAC,OAAO;QAIjD,IAAA,CAAA,KAAK,GAAW,CAAC;QACjB,IAAA,CAAA,OAAO,GAAW,CAAC;QACnB,IAAA,CAAA,WAAW,GAAY,KAAK;QACnB,IAAA,CAAA,QAAQ,GAAuD,CAA/D;YACP,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;QACL,CAAA;QAID,IAAA,CAAA,IAAI,GAAY,GAAA,CAAI,cAAO;QAC3B,IAAA,CAAA,SAAS,GAAW,CAAC;QAErB,IAAA,CAAA,MAAM,GAAY,KAAK;QACvB,IAAA,CAAA,OAAO,GAAY,KAAK;QACxB,IAAA,CAAA,MAAM,GAAY,KAAK;QACvB,IAAA,CAAA,MAAM,GAAwC,IAAI;QAClD,IAAA,CAAA,sBAAsB,GAAmB,CAAA,CAAE;QAC3C,IAAA,CAAA,UAAU,GAAY,IAAI;QACjB,IAAA,CAAA,UAAU,GAAY,KAAK;QAC3B,IAAA,CAAA,cAAc,GAAY,IAAI;QAOrC,IAAI,CAAC,IAAI,GAAG,IAAI;QAChB,IAAI,CAAC,KAAK,GAAG,yCAAgB,CAAC,IAAI;QAClC,IAAI,CAAC,WAAW,GAAG,WAAW;QAC9B,IAAI,CAAC,WAAW,GAAG,WAAW;QAC9B,IAAI,CAAC,gBAAgB,GAAG,WAAW,CAAC,KAAK;QACzC,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,iBAAiB,CAAC,GAAA,CAAI,aAAM;IAChE,CAAC;IAED,OAAO,GAAP,CAAA;QACE,EAAA,GAAK,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,MAAM,EAChC,MAAA;QAGF,IAAI,CAAC,QAAQ,CAAC,OAAO;QACrB,IAAI,CAAC,QAAQ,GAAG,SAAS;QACzB,IAAI,CAAC,MAAM,GAAG,KAAK;QAEnB,IAAI,CAAC,sBAAsB,CAAC,OAAO,EAAC,OAAO,GAAI,OAAO;;QACtD,IAAI,CAAC,sBAAsB,GAAG,CAAA,CAAE;IAClC,CAAC;IAED,EAEG,AAFH,+DAEG,AAFH,EAEG,CACH,MAAM,GAAN,CAAA;QACE,KAAA,CAAM,QAAQ,GAAG,IAAI,CAAC,WAAW;QACjC,KAAA,CAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,OAAO;QACvC,KAAA,CAAM,SAAS,GAAG,CAAC;YAAA,QAAQ,CAAC,SAAS;QAAA,CAAC;QAEtC,EAAA,EAAI,QAAQ,CAAC,MAAM,IAAI,OAAO,CAAC,aAAa,CAAC,CAAK,OAAG,CAArD;YACE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB;YACvC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI;QACzB,CAAA,MAAM,EAAA,EAAI,OAAO,CAAC,aAAa,CAAC,CAAK,OACpC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI;aACnB,EAAA,EAAI,OAAO,CAAC,IAAI,CAAC,CAAK,OAC3B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI;QAG1B,MAAA,CAAO,SAAS,CAAC,IAAI,CAAC,CAAG;IAC3B,CAAC;IAED,EAEG,AAFH,kEAEG,AAFH,EAEG,CACH,eAAe,GAAf,CAAA;QACE,MAAA,IAAU,IAAI,CAAC,WAAW,CAAC,SAAS,CAAA,CAAA,EAAI,IAAI,CAAC,mBAAmB,GAAE,CAAA,EAAI,IAAI,CAAC,IAAI,CAAA,IAAA;IACjF,CAAC;IAED,EAKG,AALH,0JAKG,AALH,EAKG,CACH,QAAQ,CAAC,KAAmC,EAA5C,CAAA;QACG,IAAI,CAAC,QAAgB,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK;QAC3C,IAAI,CAAC,UAAU,GAAG,KAAK;QACvB,KAAK,CAAC,MAAM,GAAG,IAAI;IACrB,CAAC;IAED,EAMG,AANH,uNAMG,AANH,EAMG,CACH,QAAQ,CAAC,EAAgD,EAAE,WAAW,GAAG,IAAI,EAA7E,CAAA;QACE,KAAA,CAAM,KAAK,GAAmC,WAAW,GAAG,CAAC;YAAA,IAAI;QAAA,CAAC,GAAG,CAAA,CAAE;QAEvE,GAAA,CAAI,OAAiD;eAE7C,OAAO,GAAG,KAAK,CAAC,GAAG,QAAQ,SAAS,CAAE,CAA9C;YACE,EAAE,CAAC,OAAO;YAEV,GAAA,EAAK,KAAA,CAAM,KAAK,IAAI,OAAO,CAAC,QAAQ,CAClC,EAAA,EAAI,KAAK,KAAK,IAAI,EAChB,KAAK,CAAC,IAAI,CAAC,KAAK;QAGrB,CAAA;IACH,CAAC;IAED,IAAI,GAAJ,CAAA;QACE,EAAA,GAAK,IAAI,CAAC,OAAO,IACf,MAAA,CAAO,OAAO,CAAC,OAAO;QAGxB,IAAI,CAAC,OAAO,GAAG,IAAI;QACnB,IAAI,CAAC,WAAW,CAAC,eAAe;QAChC,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,IAAI;QAEnC,GAAA,CAAI,OAAsB;QAE1B,EAAA,EACE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAK,SACnD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,KAAK,CAAC,IACrD,IAAI,CAAC,WAAW,EAEhB,OAAO,GAAG,IAAI,CAAC,sBAAsB;aAErC,OAAO,GAAG,IAAI,CAAC,UAAU;QAG3B,MAAA,CAAO,OAAO,CAAC,KAAK,EAAC,MAAM,GAA3B,CAAA;YACE,IAAI,CAAC,OAAO,GAAG,KAAK;YACpB,IAAI,CAAC,MAAM,GAAG,IAAI;YAClB,IAAI,CAAC,WAAW,CAAC,eAAe;YAChC,KAAA,CAAM,MAAM;QACd,CAAC;IACH,CAAC;IAEO,OAAO,GAAP,CAAA;QACN,MAAA,EACG,IAAI,CAAC,OAAO,KACZ,IAAI,CAAC,MAAM,KACX,IAAI,CAAC,WAAW,CAAC,QAAQ,KACzB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,IACjC,IAAI,CAAC,WAAW,CAAC,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,kBAAkB;IAE1E,CAAC;IAEO,UAAU,GAAV,CAAA;QACN,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,IAAI;QACnC,MAAA,CAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI;IAC1C,CAAC;IAEO,sBAAsB,GAAtB,CAAA;QACN,EAAA,EAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,KAAK,CAAC,EACvD,MAAA,CAAO,OAAO,CAAC,OAAO;QAGxB,MAAA,CAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,KACvE,IAAI,EAAC,GAAG,GAAI,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,EAAE,CAAA;gBAAE,IAAI,EAAE,CAAM;YAAA,CAAE;UAC7D,IAAI,EAAC,GAAG,GAAI,GAAG,CAAC,WAAW;UAC3B,IAAI,EAAC,IAAI,GAAI,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI;;IAC/C,CAAC;IAED,EAEG,AAFH,8FAEG,AAFH,EAEG,CACK,mBAAmB,GAAnB,CAAA;QACN,KAAA,CAAM,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB;QAC5D,KAAA,CAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClC,KAAA,CAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,GAAG,iBAAiB;QAE9D,GAAA,CAAI,IAAI,GAAG,CAAI;QACf,GAAA,CAAK,GAAA,CAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,GAC7B,IAAI,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,iBAAiB,EAAE,iBAAiB,EAAC,CAAA;QAGrE,MAAA,CAAO,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE;IACzB,CAAC;IAED,EAA4B,AAA5B,0BAA4B;IACpB,aAAa,CAAC,IAAkC,EAAE,MAAmB,EAArE,CAAA;QACN,KAAA,CAAM,IAAI,GAAG,GAAA,CAAI,QAAQ,CAAC,MAAM;QAEhC,KAAA,CAAM,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI;QACzD,IAAI,CAAC,SAAS,GAAG,aAAa,CAAC,SAAS;QAExC,EAA+B,AAA/B,6BAA+B;QAC/B,KAAA,CAAM,KAAK,GAAe,CAAC;YAAA,aAAa;QAAA,CAAC;QACzC,EAAgG,AAAhG,8FAAgG;QAChG,KAAA,CAAM,OAAO,GAAe,CAAA,CAAE;QAE9B,GAAA,CAAI,MAAM,GAAG,iCAAW;cACjB,KAAK,CAAC,MAAM,GAAG,CAAC,CAAE,CAAzB;YACE,KAAA,CAAM,aAAa,GAAG,KAAK,CAAC,KAAK;YAEjC,EAAgE,AAAhE,8DAAgE;YAChE,GAAA,CAAI,IAAI,GAAG,CAAC;YACZ,GAAA,CAAK,GAAA,CAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,MAAM,GAAG,CAAC,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC,GAAI,CAA9D;gBACE,EAAA,GAAK,aAAa,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,EAAE,CAA3C;oBACE,KAAA,CAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,GAAG,CAAC,EAAE,MAAM,EAAE,IAAI;oBAEtE,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAG,CAAmB,AAAnB,EAAmB,AAAnB,iBAAmB;oBAC3C,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAG,CAA8B,AAA9B,EAA8B,AAA9B,4BAA8B;oBAEpD,MAAM,IAAI,iCAAW,CAAE,CAA4C,AAA5C,EAA4C,AAA5C,0CAA4C;gBACpE,CAAA;gBAED,IAAI,GAAG,IAAI,GAAG,CAAC;YAChB,CAAA;QACF,CAAA;QAED,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,IAAI;QAEnC,EAAgC,AAAhC,8BAAgC;QAChC,KAAA,CAAM,KAAK,GAAG,GAAA,CAAI,GAAG;QACrB,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI;QACzB,OAAO,CAAC,OAAO,EAAC,QAAQ,GAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,KAAK;;QAE1E,IAAI,CAAC,UAAU;IACjB,CAAC;IAED,EAA2B,AAA3B,yBAA2B;IAEnB,WAAW,CAAC,IAAY,EAAE,MAAc,EAAE,IAAc,EAAxD,CAAA;QACN,KAAA,CAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM;QACrC,KAAA,CAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI;QACjD,MAAA,CAAO,CAAA;YAAE,QAAQ,EAAE,QAAQ;YAAE,SAAS,EAAE,SAAS;kBAAE,IAAI;QAAA,CAAE;IAC3D,CAAC;IAED,OAAO,CACL,CAAA,OAAE,IAAI,cAAE,SAAS,aAAE,QAAQ,EAAA,CAAY,EACvC,GAA6B,EAC7B,KAAgD,EAHlD,CAAA;QAKE,KAAA,CAAM,KAAK,GAAG,0DAAgB,CAAC,IAAI;QACnC,KAAA,CAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC;QACpD,KAAA,CAAM,UAAU,GAAG,KAAK,CAAC,GAAG,CAAC,UAAU;QACvC,KAAA,CAAM,KAAK,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC;QAC7B,KAAA,CAAM,WAAW,GAAG,0DAAe,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK;QAEjE,KAAA,CAAM,IAAI,GAAG,GAAA,CAAI,yCAA4B,CAAC,IAAI,EAAE,GAAG,EAAE,WAAW;QACpE,IAAI,CAAC,KAAK,GAAG,KAAK;QAClB,IAAI,CAAC,SAAS,GAAG,SAAS;QAC1B,IAAI,CAAC,WAAW,GAAG,QAAQ,GAAG,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK;QAE9C,UAAU,CAAC,QAAQ,CAAC,IAAI;QACxB,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI;IACtB,CAAC;;AApOc,yCAAA,CAAA,OAAO,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;SJJZ,yCAAO,CACrB,GAAW,EACX,MAAgB,EAChB,UAAsB,EAHxB,CAAA;IAKE,MAAA,CAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,EAAC,cAAc,GAAvD,CAAA;QACE,MAAA,CAAO,UAAU,CAAC,cAAc,EAAE,CAAA;YAAE,IAAI,EAAE,CAAM;QAAA,CAAE,EAC/C,IAAI,EAAC,GAAG,GAAI,GAAG,CAAC,IAAI;UACpB,IAAI,CAAC,2BAAK,CAAC,cAAc,EAAE,MAAM,EAAE,UAAU,GAAI,CAAwB,AAAxB,EAAwB,AAAxB,sBAAwB;IAC9E,CAAC;AACH,CAAC;SAEQ,2BAAK,CAAC,GAAW,EAAE,MAAgB,EAAE,UAAsB,EAApE,CAAA;IACE,MAAA,EAAQ,IAAa,GAArB,CAAA;QACE,KAAA,CAAM,CAAA,SAAE,MAAM,gBAAE,WAAW,qBAAE,gBAAgB,EAAA,CAAE,GAAG,sCAAgB,CAAC,IAAI;QACvE,KAAA,CAAM,MAAM,GAAG,GAAA,CAAI,yCAAY,CAAC,CAAhC;oBACE,MAAM;YACN,OAAO,EAAE,IAAI,CAAC,OAAO;yBACrB,WAAW;YACX,KAAK,EAAE,IAAI,CAAC,KAAK;wBACjB,UAAU;QACX,CAAA,EAAG,CAA2D,AAA3D,EAA2D,AAA3D,yDAA2D;QAE/D,KAAA,CAAM,GAAG,GAAG,GAAA,CAAI,yCAAwB,CACtC,MAAM,EACN,WAAW,EACX,gBAAgB,EAChB,MAAM,EACN,UAAU,EACT,CAAuC,AAAvC,EAAuC,AAAvC,qCAAuC;QAE1C,EAAqD,AAArD,mDAAqD;QACrD,GAAG,CAAC,GAAG,GAAG,GAAG;QACb,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS;QAC9B,GAAG,CAAC,WAAW,GAAG,IAAI;QACtB,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO;QAC1B,GAAG,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB;QAC9C,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU;QAChC,GAAG,CAAC,MAAM,GAAG,MAAM;QACnB,GAAG,CAAC,eAAe,GAAG,GAAA,CAAI,yCAAe,CAAC,IAAI,CAAC,eAAe;QAC9D,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,eAAe;QAI/B,KAAA,CAAM,KAAK,GAAiD,CAAA;QAAA,CAAE,CAAE,CAAuC,AAAvC,EAAuC,AAAvC,qCAAuC;QAEvG,KAAA,CAAM,OAAO,GAAG,GAAA,CAAI,yCAAO,CAAC,IAAI,CAAC,OAAO;QAExC,MAAA,CAAO,8BAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,KAA/C,CAAA;YACE,EAAA,EAAI,OAAO,CAAC,IAAI,CAAC,CAAK,OACpB,4CAAsB,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK;YAGzC,GAAG,CAAC,KAAK,GAAG,KAAK;YACjB,MAAA,CAAO,GAAG;QACZ,CAAC;IACH,CAAC;AACH,CAAC;SAEQ,sCAAgB,CACvB,IAAa,EADf,CAAA;IAGE,KAAA,CAAM,GAAG,GAAG,GAAA,CAAI,cAAO,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE;IACrF,KAAA,CAAM,GAAG,GAAG,GAAA,CAAI,cAAO,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE;IACrF,KAAA,CAAM,WAAW,GAAG,GAAA,CAAI,WAAI,CAAC,GAAG,EAAE,GAAG;IACrC,KAAA,CAAM,gBAAgB,GAAG,WAAW,CAAC,KAAK;IAE1C,KAAA,CAAM,MAAM,GAAG,GAAG,CAAC,KAAK;IAExB,EAAA,EAAI,IAAI,CAAC,gBAAgB,EAAE,CAA3B;QACE,KAAA,CAAM,CAAA,KAAE,EAAE,OAAE,EAAE,OAAE,EAAE,OAAE,EAAE,OAAE,EAAE,OAAE,EAAE,EAAA,CAAE,GAAG,IAAI,CAAC,gBAAgB;QACxD,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE;QACnC,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE;IACpC,CAAA;IAED,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM;IAC1B,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM;IAC1B,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM;IAC/B,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM;IAE/B,MAAA,CAAO,CAAA;gBAAE,MAAM;qBAAE,WAAW;0BAAE,gBAAgB;IAAA,CAAE;AAClD,CAAC;SAEQ,8BAAQ,CACf,GAA6B,EAC7B,IAAa,EACb,KAAmD,EACnD,OAAgB,EAJlB,CAAA;IAME,KAAA,CAAM,IAAI,GAAG,CAAG;IAEhB,KAAA,CAAM,IAAI,GAAG,GAAA,CAAI,yCAA4B,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,WAAW;IACxE,IAAI,CAAC,WAAW,GAAG,IAAI;IACvB,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAE,CAAqC,AAArC,EAAqC,AAArC,mCAAqC;IAEjE,EAAA,EAAI,OAAO,CAAC,IAAI,CAAC,CAAK,OACpB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC;SAEpC,IAAI,CAAC,SAAS,GAAG,CAAC;IAGpB,GAAG,CAAC,IAAI,GAAG,IAAI;IACf,KAAK,CAAC,IAAI,IAAI,IAAI;IAClB,MAAA,CAAO,GAAG,CAAC,IAAI,CAAC,IAAI;AACtB,CAAC;SAEQ,4CAAsB,CAC7B,GAA6B,EAC7B,IAAa,EACb,KAAmD,EAHrD,CAAA;IAKE,GAAA,CAAK,GAAA,CAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,GAAI,CAAhD;QACE,KAAA,EAAO,IAAI,EAAE,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;QAC1C,KAAA,CAAM,CAAA,QAAE,KAAK,eAAE,UAAU,UAAE,KAAK,EAAA,CAAE,GAAG,+BAAS,CAAC,IAAI;QACnD,KAAA,CAAM,UAAU,GAAG,KAAK,CAAC,UAAU;QAEnC,KAAA,CAAM,WAAW,GAAG,yCAAe,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK;QACjE,KAAA,CAAM,IAAI,GAAG,GAAA,CAAI,yCAA4B,CAAC,IAAI,EAAE,GAAG,EAAE,WAAW;QACpE,IAAI,CAAC,KAAK,GAAG,KAAK;QAClB,IAAI,CAAC,SAAS,GAAG,SAAS;QAC1B,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK;QAEnD,KAAK,CAAC,IAAI,IAAI,IAAI;QAClB,UAAU,CAAC,QAAQ,CAAC,IAAI;IACzB,CAAA;AACH,CAAC;SAEQ,+BAAS,CAAC,IAAY,EAA/B,CAAA;IACE,MAAA,CAAO,CAAP;QACE,KAAK,EAAE,yCAAgB,CAAC,IAAI;QAC5B,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC;QAC7C,KAAK,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC;IACvB,CAAA;AACH,CAAC;;;;;;;;;;SMlLe,yCAAc,CAAC,IAAU,EAAzC,CAAA;IACE,MAAA,CAAO,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,cAAc;AACnE,CAAC;SAMe,yCAAU,CAAC,IAAU,EAArC,CAAA;IACE,MAAA,CAAO,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,UAAU;AAC/D,CAAC;;;SCRe,yCAAU,CAAC,aAAa,EAAE,CAAC;IACzC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;IACjB,IAAI,CAAC,aAAa,GAAG,aAAa;AACpC,CAAC;AAED,yCAAU,CAAC,SAAS,GAAG,CAAC;IACtB,IAAI,EAAE,QAAQ,CAAC,OAAO,EAAE,CAAC;QACvB,EAA+C,AAA/C,6CAA+C;QAC/C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO;QACzB,EAAyB,AAAzB,uBAAyB;QACzB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC;IACvC,CAAC;IAED,GAAG,EAAE,QAAQ,GAAG,CAAC;QACf,EAAqD,AAArD,mDAAqD;QACrD,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3B,EAA2C,AAA3C,yCAA2C;QAC3C,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG;QAC1B,EAA6D,AAA7D,2DAA6D;QAC7D,EAA+B,AAA/B,6BAA+B;QAC/B,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC5B,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,GAAG;YACrB,IAAI,CAAC,QAAQ,CAAC,CAAC;QACjB,CAAC;QACD,MAAM,CAAC,MAAM;IACf,CAAC;IAED,MAAM,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC;QACtB,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM;QAChC,EAA8D,AAA9D,4DAA8D;QAC9D,EAAM,AAAN,IAAM;QACN,GAAG,CAAE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAI,CAAC;YAChC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,IAAI,EAAE,QAAQ;YACrC,EAA0D,AAA1D,wDAA0D;YAC1D,EAAuB,AAAvB,qBAAuB;YACvB,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG;YAC1B,EAA4D,AAA5D,0DAA4D;YAC5D,EAAc,AAAd,YAAc;YACd,EAAE,EAAE,CAAC,IAAI,MAAM,GAAG,CAAC,EAAE,KAAK;YAC1B,EAA4D,AAA5D,0DAA4D;YAC5D,EAA6D,AAA7D,2DAA6D;YAC7D,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,GAAG;YACrB,IAAI,CAAC,QAAQ,CAAC,CAAC;YACf,IAAI,CAAC,QAAQ,CAAC,CAAC;YACf,KAAK;QACP,CAAC;IACH,CAAC;IAED,IAAI,EAAE,QAAQ,GAAG,CAAC;QAChB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM;IAC5B,CAAC;IAED,QAAQ,EAAE,QAAQ,CAAC,CAAC,EAAE,CAAC;QACrB,EAA0C,AAA1C,wCAA0C;QAC1C,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GAC1B,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO;QACpC,EAAmD,AAAnD,iDAAmD;cAC5C,CAAC,GAAG,CAAC,CAAE,CAAC;YACb,EAAoD,AAApD,kDAAoD;YACpD,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EACvC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO;YAC/B,EAA+D,AAA/D,6DAA+D;YAC/D,EAAY,AAAZ,UAAY;YACZ,EAAE,EAAE,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,KAAK;YAE9C,EAA0D,AAA1D,wDAA0D;YAC1D,EAAY,AAAZ,UAAY;YACZ,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,OAAO;YAC/B,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,MAAM;YACxB,CAAC,GAAG,OAAO;QACb,CAAC;IACH,CAAC;IAED,QAAQ,EAAE,QAAQ,CAAC,CAAC,EAAE,CAAC;QACrB,EAA4C,AAA5C,0CAA4C;QAC5C,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAC9B,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GACxB,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO;cAEjC,IAAI,CAAE,CAAC;YACZ,EAA6C,AAA7C,2CAA6C;YAC7C,GAAG,CAAC,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EACvB,OAAO,GAAG,OAAO,GAAG,CAAC;YACvB,EAAyD,AAAzD,uDAAyD;YACzD,EAAU,AAAV,QAAU;YACV,GAAG,CAAC,IAAI,GAAG,IAAI;YACf,EAAqD,AAArD,mDAAqD;YACrD,EAAE,EAAE,OAAO,GAAG,MAAM,EAAE,CAAC;gBACrB,EAAoC,AAApC,kCAAoC;gBACpC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,GAC/B,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM;gBACzC,EAA4D,AAA5D,0DAA4D;gBAC5D,EAAE,EAAE,WAAW,GAAG,SAAS,EAAE,IAAI,GAAG,OAAO;YAC7C,CAAC;YACD,EAA0C,AAA1C,wCAA0C;YAC1C,EAAE,EAAE,OAAO,GAAG,MAAM,EAAE,CAAC;gBACrB,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,GAC/B,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM;gBACzC,EAAE,EAAE,WAAW,IAAI,IAAI,IAAI,IAAI,GAAG,SAAS,GAAG,WAAW,GAAG,IAAI,GAAG,OAAO;YAC5E,CAAC;YAED,EAAwC,AAAxC,sCAAwC;YACxC,EAAE,EAAE,IAAI,IAAI,IAAI,EAAE,KAAK;YAEvB,EAAgC,AAAhC,8BAAgC;YAChC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI;YACnC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,OAAO;YAC5B,CAAC,GAAG,IAAI;QACV,CAAC;IACH,CAAC;AACH,CAAC;;;;MEhGY,yCAAW,SAAQ,mBAAY;gBAC9B,GAAS,EAAE,KAAA,GAAe,GAAA,CAAI,YAAK,CAAC,QAAQ,EAAxD,CAAA;QACE,EAAkB,AAAlB,gBAAkB;QAClB,KAAA,CAAM,OAAO,GAAG,GAAA,CAAI,WAAW,CAAC,CAAE;AAAA,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;AAAE,aAAC;QAAA,CAAE;QAC1G,EAAkB,AAAlB,gBAAkB;QAClB,KAAA,CAAM,SAAS,GAAG,GAAA,CAAI,YAAY,CAAC,CAAnC;YACE,GAAG,CAAC,GAAG,CAAC,CAAC;YAAE,GAAG,CAAC,GAAG,CAAC,CAAC;YAAE,GAAG,CAAC,GAAG,CAAC,CAAC;YAC/B,GAAG,CAAC,GAAG,CAAC,CAAC;YAAE,GAAG,CAAC,GAAG,CAAC,CAAC;YAAE,GAAG,CAAC,GAAG,CAAC,CAAC;YAC/B,GAAG,CAAC,GAAG,CAAC,CAAC;YAAE,GAAG,CAAC,GAAG,CAAC,CAAC;YAAE,GAAG,CAAC,GAAG,CAAC,CAAC;YAC/B,GAAG,CAAC,GAAG,CAAC,CAAC;YAAE,GAAG,CAAC,GAAG,CAAC,CAAC;YAAE,GAAG,CAAC,GAAG,CAAC,CAAC;YAC/B,GAAG,CAAC,GAAG,CAAC,CAAC;YAAE,GAAG,CAAC,GAAG,CAAC,CAAC;YAAE,GAAG,CAAC,GAAG,CAAC,CAAC;YAC/B,GAAG,CAAC,GAAG,CAAC,CAAC;YAAE,GAAG,CAAC,GAAG,CAAC,CAAC;YAAE,GAAG,CAAC,GAAG,CAAC,CAAC;YAC/B,GAAG,CAAC,GAAG,CAAC,CAAC;YAAE,GAAG,CAAC,GAAG,CAAC,CAAC;YAAE,GAAG,CAAC,GAAG,CAAC,CAAC;YAC/B,GAAG,CAAC,GAAG,CAAC,CAAC;YAAE,GAAG,CAAC,GAAG,CAAC,CAAC;YAAE,GAAG,CAAC,GAAG,CAAC,CAAC;QAChC,CAAA;QAED,KAAA,CAAM,QAAQ,GAAG,GAAA,CAAI,qBAAc;QACnC,QAAQ,CAAC,QAAQ,CAAC,GAAA,CAAI,sBAAe,CAAC,OAAO,EAAE,CAAC;QAChD,QAAQ,CAAC,YAAY,CAAC,CAAU,WAAE,GAAA,CAAI,sBAAe,CAAC,SAAS,EAAE,CAAC;QAElE,KAAA,CAAM,QAAQ,GAAG,GAAA,CAAI,wBAAiB,CAAC,CAAA;YAAE,KAAK,EAAE,KAAK;QAAA,CAAE;QAEvD,KAAK,CAAC,QAAQ,EAAE,QAAQ;IAC1B,CAAC;;;;MEtCU,yCAAO;gBAGC,IAAU,CAA7B,CAAA;QAAmB,IAAA,CAAA,IAAI,GAAJ,IAAI;QAFvB,IAAA,CAAA,IAAI,GAAmB,IAAI;QAC3B,IAAA,CAAA,QAAQ,GAAmB,IAAI;IACC,CAAC;;MAMtB,yCAAG;gBASK,WAAA,GAAsB,OAAS,CAAlD,CAAA;QAAmB,IAAA,CAAA,WAAW,GAAX,WAAW;QAR9B,EAA+B,AAA/B,6BAA+B;QAC/B,IAAA,CAAA,KAAK,GAAmB,IAAI;QAC5B,EAA8B,AAA9B,4BAA8B;QAC9B,IAAA,CAAA,IAAI,GAAmB,IAAI;QAC3B,IAAA,CAAA,SAAS,GAAW,CAAC;QAEb,IAAA,CAAA,KAAK,GAAG,GAAA,CAAI,GAAG;IAE8B,CAAC;QAElD,IAAI,GAAR,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,KAAK,CAAC,IAAI;IACxB,CAAC;IAED,GAAG,CAAC,IAAU,EAAd,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;IAC/B,CAAC;IAED,EAGG,AAHH,8HAGG,AAHH,EAGG,CACH,KAAK,CAAC,IAAU,EAAhB,CAAA;QACE,EAAA,GAAK,IAAI,CAAC,MAAM,EACd,MAAA;QAGF,KAAA,CAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QACnC,EAAA,EAAI,IAAI,EACN,IAAI,CAAC,aAAa,CAAC,IAAI;aAEvB,IAAI,CAAC,MAAM,CAAC,IAAI;IAEpB,CAAC;IAEO,MAAM,CAAC,IAAU,EAAjB,CAAA;QACN,KAAA,CAAM,IAAI,GAAG,GAAA,CAAI,yCAAO,CAAC,IAAI;QAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI;QACzB,IAAI,CAAC,IAAI,GAAG,IAAI;QAChB,EAAA,EAAI,IAAI,CAAC,QAAQ,EACf,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI;QAG3B,EAAA,GAAK,IAAI,CAAC,KAAK,EACb,IAAI,CAAC,KAAK,GAAG,IAAI;QAGnB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI;QAC5B,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS;IAClC,CAAC;IAEO,aAAa,CAAC,IAAa,EAA3B,CAAA;QACN,EAAA,GAAK,IAAI,CAAC,QAAQ,EAChB,EAAgC,AAAhC,8BAAgC;QAChC,CAAA;YAAA,EAAA,EAAI,IAAI,CAAC,IAAI,EAAE,CAAf;gBACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI;gBACtB,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI;gBAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI;gBACzB,IAAI,CAAC,IAAI,GAAG,IAAI;gBAChB,IAAI,CAAC,IAAI,GAAG,IAAI;gBAEhB,EAAA,EAAI,IAAI,CAAC,QAAQ,EACf,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI;YAE5B,CAAA;QAAA,CAAA,MACI,EAAA,GAAK,IAAI,CAAC,IAAI;aAEd,CAAA;YACL,EAAoC,AAApC,kCAAoC;YACpC,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;YAC9B,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ;YAClC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI;YACzB,IAAI,CAAC,IAAI,GAAG,IAAI;YAChB,IAAI,CAAC,IAAI,GAAG,IAAI;YAEhB,EAAA,EAAI,IAAI,CAAC,QAAQ,EACf,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI;QAE5B,CAAA;IACH,CAAC;IAED,MAAM,CAAC,IAAU,EAAjB,CAAA;QACE,KAAA,CAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QACnC,EAAA,GAAK,IAAI,EACP,MAAA;QAGF,EAAA,EAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,EAAE,CAA3B;YACE,IAAI,CAAC,KAAK,GAAG,IAAI;YACjB,IAAI,CAAC,IAAI,GAAG,IAAI;QACjB,CAAA,MAAM,CAAA;YACL,EAAA,GAAK,IAAI,CAAC,QAAQ,EAAE,CAApB;gBACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI;gBACtB,IAAI,CAAC,KAAM,CAAC,QAAQ,GAAG,IAAI;YAC5B,CAAA;YAED,EAAA,GAAK,IAAI,CAAC,IAAI,EAAE,CAAhB;gBACE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ;gBACzB,IAAI,CAAC,IAAK,CAAC,IAAI,GAAG,IAAI;YACvB,CAAA;YAED,EAAA,EAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,EAAE,CAAhC;gBACE,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;gBAC9B,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ;YACnC,CAAA;QACF,CAAA;QAED,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;QACzB,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS;IAClC,CAAC;IAED,UAAU,GAAV,CAAA;QACE,MAAA,CAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,SAAS;IACjD,CAAC;IAED,UAAU,GAAV,CAAA;QACE,EAAA,EAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,EACtB,MAAA;cAGK,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,GAAG,CAAC,CAAE,CAA9C;YACE,KAAA,CAAM,IAAI,GAAG,IAAI,CAAC,UAAU;YAC5B,EAAA,EAAI,IAAI,EACN,IAAI,CAAC,cAAc,CAAC,IAAI;QAE3B,CAAA;IACH,CAAC;IAED,cAAc,CAAC,IAAU,EAAzB,CAAA;QACE,EAA8D,AAA9D,4DAA8D;QAC9D,KAAA,CAAM,cAAc,GAAW,CAAC;YAAA,IAAI;QAAA,CAAC;QACrC,IAAI,CAAC,QAAQ,EAAC,CAAC,GAAf,CAAA;YACE,EAAA,EAAI,CAAC,CAAC,MAAM,EACV,cAAc,CAAC,IAAI,CAAC,CAAC;QAEzB,CAAC;QAED,EAAsC,AAAtC,oCAAsC;QACtC,GAAA,EAAK,KAAA,CAAM,EAAC,IAAI,cAAc,CAAE,CAAhC;YACE,EAAC,CAAC,OAAO;YACT,IAAI,CAAC,MAAM,CAAC,EAAC;QACd,CAAA;IACH,CAAC;;;;;;;A,G,C,+B,0B,S,I,Q,C,O,E,U,E,C,E,S,E,C;a,K,C,K,E,C;Q,M,C,K,Y,C,G,K,G,G,C,C,C,Q,C,O,E,C;Y,O,C,K;Q,C;I,C;I,M,C,G,E,C,K,C,G,O,G,Q,C,O,E,M,E,C;iB,S,C,K,E,C;Y,G,C,C;gB,I,C,S,C,I,C,K;Y,C,C,K,E,C,E,C;gB,M,C,C;Y,C;Q,C;iB,Q,C,K,E,C;Y,G,C,C;gB,I,C,S,C,C,Q,K;Y,C,C,K,E,C,E,C;gB,M,C,C;Y,C;Q,C;iB,I,C,M,E,C;Y,M,C,I,G,O,C,M,C,K,I,K,C,M,C,K,E,I,C,S,E,Q;Q,C;Q,I,E,S,G,S,C,K,C,O,E,U,I,C,C,G,I;I,C;A,C;M/B1HU,yCAAS;gBAEX,eAAuB,EACvB,MAAc,EACd,IAAyB,EACzB,MAAmC,CAJ5C,CAAA;QACS,IAAA,CAAA,eAAe,GAAf,eAAe;QACf,IAAA,CAAA,MAAM,GAAN,MAAM;QACN,IAAA,CAAA,IAAI,GAAJ,IAAI;QACJ,IAAA,CAAA,MAAM,GAAN,MAAM;IACZ,CAAC;;MAGO,yCAAM;iBAAnB,CAAA;QAEU,IAAA,CAAA,YAAY,GAAW,yCAAoB;QAC3C,IAAA,CAAA,aAAa,GAAY,GAAA,CAAI,cAAO;QAE5C,IAAA,CAAA,kBAAkB,GAAW,yCAAqB;QAClD,IAAA,CAAA,QAAQ,GAAG,yCAAQ;QACnB,IAAA,CAAA,GAAG,GAAG,GAAA,CAAI,yCAAG,CAAC,IAAI,CAAC,YAAY;QA4QvB,IAAA,CAAA,0BAA0B,QAA1B,CAAA;YACN,KAAA,CAAM,aAAa,GAAG,GAAA,CAAI,cAAO;YACjC,KAAA,CAAM,kBAAkB,GAAG,GAAA,CAAI,cAAO;YACtC,KAAA,CAAM,YAAY,GAAG,GAAA,CAAI,cAAO;YAEhC,MAAA,EACE,WAA+B,EAC/B,MAAc,GAFhB,CAAA;gB,G,C,E;gBAQE,KAAA,CAAM,QAAQ,GAAc,CAAA,CAAE;gBAC9B,K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","sources":["index.ts","src/point-cloud-octree.ts","point-cloud-octree.ts","src/loading2/OctreeGeometry.ts","OctreeGeometry.ts","src/constants.ts","constants.ts","src/materials/blur-material.ts","blur-material.ts","src/materials/clipping.ts","clipping.ts","src/materials/enums.ts","enums.ts","src/materials/point-cloud-material.ts","point-cloud-material.ts","src/materials/shaders/pointcloud.vert","src/materials/shaders/pointcloud.frag","src/utils/utils.ts","utils.ts","src/materials/classification.ts","classification.ts","src/materials/gradients/grayscale.ts","grayscale.ts","src/materials/gradients/inferno.ts","inferno.ts","src/materials/gradients/plasma.ts","plasma.ts","src/materials/gradients/rainbow.ts","rainbow.ts","src/materials/gradients/spectral.ts","spectral.ts","src/materials/gradients/vidris.ts","vidris.ts","src/materials/gradients/yellow-green.ts","yellow-green.ts","src/materials/texture-generation.ts","texture-generation.ts","types.ts","src/point-cloud-octree-node.ts","point-cloud-octree-node.ts","src/point-cloud-octree-picker.ts","point-cloud-octree-picker.ts","src/utils/math.ts","math.ts","src/point-cloud-tree.ts","point-cloud-tree.ts","src/utils/bounds.ts","bounds.ts","src/potree.ts","potree.ts","src/loading2/load-octree.ts","load-octree.ts","src/loading2/OctreeLoader.ts","OctreeLoader.ts","src/loading2/PointAttributes.ts","PointAttributes.ts","src/loading2/WorkerPool.ts","WorkerPool.ts","src/loading2/OctreeGeometryNode.ts","OctreeGeometryNode.ts","src/features.ts","features.ts","src/loading/binary-loader.ts","binary-loader.ts","src/point-attributes.ts","point-attributes.ts","src/version.ts","version.ts","src/loading/load-poc.ts","load-poc.ts","src/point-cloud-octree-geometry.ts","point-cloud-octree-geometry.ts","src/point-cloud-octree-geometry-node.ts","point-cloud-octree-geometry-node.ts","src/type-predicates.ts","type-predicates.ts","src/utils/binary-heap.js","src/utils/box3-helper.ts","box3-helper.ts","src/utils/lru.ts","lru.ts"],"sourcesContent":[null,"import { OctreeGeometry } from './loading2/OctreeGeometry';\nimport { Box3, Camera, Object3D, Points, Ray, Sphere, Vector3, WebGLRenderer } from 'three';\nimport { DEFAULT_MIN_NODE_PIXEL_SIZE } from './constants';\nimport { PointCloudMaterial, PointSizeType } from './materials';\nimport { PointCloudOctreeGeometryNode } from './point-cloud-octree-geometry-node';\nimport { PointCloudOctreeNode } from './point-cloud-octree-node';\nimport { PickParams, PointCloudOctreePicker } from './point-cloud-octree-picker';\nimport { PointCloudTree } from './point-cloud-tree';\nimport { IPointCloudTreeNode, IPotree, PickPoint, PCOGeometry } from './types';\nimport { computeTransformedBoundingBox } from './utils/bounds';\n\nexport class PointCloudOctree extends PointCloudTree {\n  potree: IPotree;\n  disposed: boolean = false;\n  pcoGeometry: PCOGeometry;\n  boundingBox: Box3;\n  boundingSphere: Sphere;\n  material: PointCloudMaterial;\n  level: number = 0;\n  maxLevel: number = Infinity;\n  /**\n   * The minimum radius of a node's bounding sphere on the screen in order to be displayed.\n   */\n  minNodePixelSize: number = DEFAULT_MIN_NODE_PIXEL_SIZE;\n  root: IPointCloudTreeNode | null = null;\n  boundingBoxNodes: Object3D[] = [];\n  visibleNodes: PointCloudOctreeNode[] = [];\n  visibleGeometry: PointCloudOctreeGeometryNode[] = [];\n  numVisiblePoints: number = 0;\n  showBoundingBox: boolean = false;\n  private visibleBounds: Box3 = new Box3();\n  private picker: PointCloudOctreePicker | undefined;\n\n  constructor(\n    potree: IPotree,\n    pcoGeometry: PCOGeometry,\n    material?: PointCloudMaterial,\n  ) {\n    super();\n\n    this.name = '';\n    this.potree = potree;\n    this.root = pcoGeometry.root;\n    this.pcoGeometry = pcoGeometry;\n    this.boundingBox = pcoGeometry.boundingBox;\n    this.boundingSphere = this.boundingBox.getBoundingSphere(new Sphere());\n\n    this.position.copy(pcoGeometry.offset);\n    this.updateMatrix();\n\n    this.material = material || (pcoGeometry instanceof OctreeGeometry) ? new PointCloudMaterial({newFormat: true}) : new PointCloudMaterial();\n    this.initMaterial(this.material);\n  }\n\n  private initMaterial(material: PointCloudMaterial): void {\n    this.updateMatrixWorld(true);\n\n    const { min, max } = computeTransformedBoundingBox(\n      this.pcoGeometry.tightBoundingBox || this.getBoundingBoxWorld(),\n      this.matrixWorld,\n    );\n\n    const bWidth = max.z - min.z;\n    material.heightMin = min.z - 0.2 * bWidth;\n    material.heightMax = max.z + 0.2 * bWidth;\n  }\n\n  dispose(): void {\n    if (this.root) {\n      this.root.dispose();\n    }\n\n    this.pcoGeometry.root.traverse((n:IPointCloudTreeNode) => this.potree.lru.remove(n));\n    this.pcoGeometry.dispose();\n    this.material.dispose();\n\n    this.visibleNodes = [];\n    this.visibleGeometry = [];\n\n    if (this.picker) {\n      this.picker.dispose();\n      this.picker = undefined;\n    }\n\n    this.disposed = true;\n  }\n\n  get pointSizeType(): PointSizeType {\n    return this.material.pointSizeType;\n  }\n\n  set pointSizeType(value: PointSizeType) {\n    this.material.pointSizeType = value;\n  }\n\n  toTreeNode(\n    geometryNode: PointCloudOctreeGeometryNode,\n    parent?: PointCloudOctreeNode | null,\n  ): PointCloudOctreeNode {\n    const points = new Points(geometryNode.geometry, this.material);\n    const node = new PointCloudOctreeNode(geometryNode, points);\n    points.name = geometryNode.name;\n    points.position.copy(geometryNode.boundingBox.min);\n    points.frustumCulled = false;\n    points.onBeforeRender = PointCloudMaterial.makeOnBeforeRender(this, node);\n\n    if (parent) {\n      parent.sceneNode.add(points);\n      parent.children[geometryNode.index] = node;\n\n      geometryNode.oneTimeDisposeHandlers.push(() => {\n        node.disposeSceneNode();\n        parent.sceneNode.remove(node.sceneNode);\n        // Replace the tree node (rendered and in the GPU) with the geometry node.\n        parent.children[geometryNode.index] = geometryNode;\n      });\n    } else {\n      this.root = node;\n      this.add(points);\n    }\n\n    return node;\n  }\n\n  updateVisibleBounds() {\n    const bounds = this.visibleBounds;\n    bounds.min.set(Infinity, Infinity, Infinity);\n    bounds.max.set(-Infinity, -Infinity, -Infinity);\n\n    for (const node of this.visibleNodes) {\n      if (node.isLeafNode) {\n        bounds.expandByPoint(node.boundingBox.min);\n        bounds.expandByPoint(node.boundingBox.max);\n      }\n    }\n  }\n\n  updateBoundingBoxes(): void {\n    if (!this.showBoundingBox || !this.parent) {\n      return;\n    }\n    // Above: If we're not showing the bounding box or we don't have a parent, we can't update it.\n\n    let bbRoot: any = this.parent.getObjectByName('bbroot');\n    if (!bbRoot) {\n      bbRoot = new Object3D();\n      bbRoot.name = 'bbroot';\n      this.parent.add(bbRoot);\n    }\n    // Above: If we don't have a root object, we need to create one.\n\n    const visibleBoxes: (Object3D | null)[] = [];\n    for (const node of this.visibleNodes) {\n      if (node.boundingBoxNode !== undefined && node.isLeafNode) {\n        visibleBoxes.push(node.boundingBoxNode);\n      }\n    }\n\n    bbRoot.children = visibleBoxes;\n  }\n\n  updateMatrixWorld(force: boolean): void {\n    if (this.matrixAutoUpdate === true) {\n      this.updateMatrix();\n    }\n\n    if (this.matrixWorldNeedsUpdate === true || force === true) {\n      if (!this.parent) {\n        this.matrixWorld.copy(this.matrix);\n      } else {\n        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n      }\n\n      this.matrixWorldNeedsUpdate = false;\n\n      force = true;\n    }\n  }\n\n  hideDescendants(object: Object3D): void {\n    const toHide: Object3D[] = [];\n    addVisibleChildren(object);\n\n    while (toHide.length > 0) {\n      const objToHide = toHide.shift()!;\n      objToHide.visible = false;\n      addVisibleChildren(objToHide);\n    }\n\n    function addVisibleChildren(obj: Object3D) {\n      for (const child of obj.children) {\n        if (child.visible) {\n          toHide.push(child);\n        }\n      }\n    }\n  }\n\n  moveToOrigin(): void {\n    this.position.set(0, 0, 0); // Reset, then the matrix will be updated in getBoundingBoxWorld()\n    this.position.set(0, 0, 0).sub(this.getBoundingBoxWorld().getCenter(new Vector3()));\n  }\n\n  moveToGroundPlane(): void {\n    this.position.y += -this.getBoundingBoxWorld().min.y;\n  }\n\n  getBoundingBoxWorld(): Box3 {\n    this.updateMatrixWorld(true);\n    return computeTransformedBoundingBox(this.boundingBox, this.matrixWorld);\n  }\n\n  getVisibleExtent() {\n    return this.visibleBounds.applyMatrix4(this.matrixWorld);\n  }\n\n  pick(\n    renderer: WebGLRenderer,\n    camera: Camera,\n    ray: Ray,\n    params: Partial<PickParams> = {},\n  ): PickPoint | null {\n    this.picker = this.picker || new PointCloudOctreePicker();\n    return this.picker.pick(renderer, camera, ray, [this], params);\n  }\n\n  get progress() {\n    return this.visibleGeometry.length === 0\n      ? 0\n      : this.visibleNodes.length / this.visibleGeometry.length;\n  }\n}\n",null,"import { NodeLoader, Metadata } from './OctreeLoader';\n\n// import * as THREE from \"../../../../libs/three.js/build/three.module.js\";\nimport { Box3,Sphere, Vector3 } from \"three\";\nimport { PointAttributes } from \"./PointAttributes\";\nimport { OctreeGeometryNode } from './OctreeGeometryNode';\n\nexport class OctreeGeometry{\n\troot!: OctreeGeometryNode;\n\turl: string | null = null;\n\tpointAttributes: PointAttributes | null = null;\n\tspacing: number = 0;\n\ttightBoundingBox: Box3;\n\tnumNodesLoading: number = 0;\n\tmaxNumNodesLoading: number = 3; // I don't understand why this is also a property of IPotree then. Duplicate functionality?\n\tboundingSphere: Sphere;\n\ttightBoundingSphere: Sphere;\n\toffset!: Vector3;\n\tscale!: [number, number, number];\n\tdisposed: boolean = false;\n\n\tprojection?: Metadata[\"projection\"];\n\tconstructor(\n\t\tpublic loader: NodeLoader,\n\t\tpublic boundingBox: Box3, // Need to be get from metadata.json\n\t){\n\t\tthis.tightBoundingBox = this.boundingBox.clone();\n\t\tthis.boundingSphere = this.boundingBox.getBoundingSphere(new Sphere());\n\t\tthis.tightBoundingSphere = this.boundingBox.getBoundingSphere(new Sphere());\n\t}\n\n\tdispose(): void {\n\t\t// this.loader.dispose();\n\t\tthis.root.traverse(node => node.dispose());\n\t\tthis.disposed = true;\n\t}\n\n};",null,"import { Color, Vector4 } from 'three';\n\nexport const DEFAULT_RGB_BRIGHTNESS = 0;\nexport const DEFAULT_RGB_CONTRAST = 0;\nexport const DEFAULT_RGB_GAMMA = 1;\nexport const DEFAULT_MAX_POINT_SIZE = 50;\nexport const DEFAULT_MIN_NODE_PIXEL_SIZE = 50;\nexport const DEFAULT_MIN_POINT_SIZE = 2;\nexport const DEFAULT_PICK_WINDOW_SIZE = 15;\nexport const DEFAULT_POINT_BUDGET = 1_000_000;\nexport const MAX_LOADS_TO_GPU = 2;\nexport const MAX_NUM_NODES_LOADING = 4;\nexport const PERSPECTIVE_CAMERA = 'PerspectiveCamera';\nexport const COLOR_BLACK = new Color(0, 0, 0);\nexport const DEFAULT_HIGHLIGHT_COLOR = new Vector4(1, 0, 0, 1);\n",null,"import { ShaderMaterial, Texture } from 'three';\nimport { IUniform } from './types';\n\n// see http://john-chapman-graphics.blogspot.co.at/2013/01/ssao-tutorial.html\n\nexport interface IBlurMaterialUniforms {\n  [name: string]: IUniform<any>;\n  screenWidth: IUniform<number>;\n  screenHeight: IUniform<number>;\n  map: IUniform<Texture | null>;\n}\n\nexport class BlurMaterial extends ShaderMaterial {\n  // vertexShader = require('./shaders/blur.vert');\n  // fragmentShader = require('./shaders/blur.frag');\n  uniforms: IBlurMaterialUniforms = {\n    screenWidth: { type: 'f', value: 0 },\n    screenHeight: { type: 'f', value: 0 },\n    map: { type: 't', value: null },\n  };\n}\n",null,"import { Box3, Matrix4, Vector3 } from 'three';\n\nexport enum ClipMode {\n  DISABLED = 0,\n  CLIP_OUTSIDE = 1,\n  HIGHLIGHT_INSIDE = 2,\n}\n\nexport interface IClipBox {\n  box: Box3;\n  inverse: Matrix4;\n  matrix: Matrix4;\n  position: Vector3;\n}\n",null,"export enum PointSizeType {\n  FIXED = 0,\n  ATTENUATED = 1,\n  ADAPTIVE = 2,\n}\n\nexport enum PointShape {\n  SQUARE = 0,\n  CIRCLE = 1,\n  PARABOLOID = 2,\n}\n\nexport enum TreeType {\n  OCTREE = 0,\n  KDTREE = 1,\n}\n\nexport enum PointOpacityType {\n  FIXED = 0,\n  ATTENUATED = 1,\n}\n\nexport enum PointColorType {\n  RGB = 0,\n  COLOR = 1,\n  DEPTH = 2,\n  HEIGHT = 3,\n  ELEVATION = 3,\n  INTENSITY = 4,\n  INTENSITY_GRADIENT = 5,\n  LOD = 6,\n  LEVEL_OF_DETAIL = 6,\n  POINT_INDEX = 7,\n  CLASSIFICATION = 8,\n  RETURN_NUMBER = 9,\n  SOURCE = 10,\n  NORMAL = 11,\n  PHONG = 12,\n  RGB_HEIGHT = 13,\n  COMPOSITE = 50,\n}\n",null,"import {\n  AdditiveBlending,\n  BufferGeometry,\n  Camera,\n  Color,\n  LessEqualDepth,\n  Material,\n  NearestFilter,\n  NoBlending,\n  PerspectiveCamera,\n  RawShaderMaterial,\n  Scene,\n  Texture,\n  Vector3,\n  Vector4,\n  WebGLRenderer,\n  WebGLRenderTarget,\n} from 'three';\nimport VertShader from \"./shaders/pointcloud.vert\"\nimport FragShader from './shaders/pointcloud.frag';\nimport {\n  DEFAULT_HIGHLIGHT_COLOR,\n  DEFAULT_MAX_POINT_SIZE,\n  DEFAULT_MIN_POINT_SIZE,\n  DEFAULT_RGB_BRIGHTNESS,\n  DEFAULT_RGB_CONTRAST,\n  DEFAULT_RGB_GAMMA,\n  PERSPECTIVE_CAMERA,\n} from '../constants';\nimport { PointCloudOctree } from '../point-cloud-octree';\nimport { PointCloudOctreeNode } from '../point-cloud-octree-node';\nimport { byLevelAndIndex } from '../utils/utils';\nimport { DEFAULT_CLASSIFICATION } from './classification';\nimport { ClipMode, IClipBox } from './clipping';\nimport { PointColorType, PointOpacityType, PointShape, PointSizeType, TreeType } from './enums';\nimport { SPECTRAL } from './gradients';\nimport {\n  generateClassificationTexture,\n  generateDataTexture,\n  generateGradientTexture,\n} from './texture-generation';\nimport { IClassification, IGradient, IUniform } from './types';\n\nexport interface IPointCloudMaterialParameters {\n  size: number;\n  minSize: number;\n  maxSize: number;\n  treeType: TreeType;\n  newFormat: boolean;\n}\n\nexport interface IPointCloudMaterialUniforms {\n  bbSize: IUniform<[number, number, number]>;\n  blendDepthSupplement: IUniform<number>;\n  blendHardness: IUniform<number>;\n  classificationLUT: IUniform<Texture>;\n  clipBoxCount: IUniform<number>;\n  clipBoxes: IUniform<Float32Array>;\n  depthMap: IUniform<Texture | null>;\n  diffuse: IUniform<[number, number, number]>;\n  fov: IUniform<number>;\n  gradient: IUniform<Texture>;\n  heightMax: IUniform<number>;\n  heightMin: IUniform<number>;\n  intensityBrightness: IUniform<number>;\n  intensityContrast: IUniform<number>;\n  intensityGamma: IUniform<number>;\n  intensityRange: IUniform<[number, number]>;\n  level: IUniform<number>;\n  maxSize: IUniform<number>;\n  minSize: IUniform<number>;\n  octreeSize: IUniform<number>;\n  opacity: IUniform<number>;\n  pcIndex: IUniform<number>;\n  rgbBrightness: IUniform<number>;\n  rgbContrast: IUniform<number>;\n  rgbGamma: IUniform<number>;\n  screenHeight: IUniform<number>;\n  screenWidth: IUniform<number>;\n  size: IUniform<number>;\n  spacing: IUniform<number>;\n  toModel: IUniform<number[]>;\n  transition: IUniform<number>;\n  uColor: IUniform<Color>;\n  visibleNodes: IUniform<Texture>;\n  vnStart: IUniform<number>;\n  wClassification: IUniform<number>;\n  wElevation: IUniform<number>;\n  wIntensity: IUniform<number>;\n  wReturnNumber: IUniform<number>;\n  wRGB: IUniform<number>;\n  wSourceID: IUniform<number>;\n  opacityAttenuation: IUniform<number>;\n  filterByNormalThreshold: IUniform<number>;\n  highlightedPointCoordinate: IUniform<Vector3>;\n  highlightedPointColor: IUniform<Vector4>;\n  enablePointHighlighting: IUniform<boolean>;\n  highlightedPointScale: IUniform<number>;\n}\n\nconst TREE_TYPE_DEFS = {\n  [TreeType.OCTREE]: 'tree_type_octree',\n  [TreeType.KDTREE]: 'tree_type_kdtree',\n};\n\nconst SIZE_TYPE_DEFS = {\n  [PointSizeType.FIXED]: 'fixed_point_size',\n  [PointSizeType.ATTENUATED]: 'attenuated_point_size',\n  [PointSizeType.ADAPTIVE]: 'adaptive_point_size',\n};\n\nconst OPACITY_DEFS = {\n  [PointOpacityType.ATTENUATED]: 'attenuated_opacity',\n  [PointOpacityType.FIXED]: 'fixed_opacity',\n};\n\nconst SHAPE_DEFS = {\n  [PointShape.SQUARE]: 'square_point_shape',\n  [PointShape.CIRCLE]: 'circle_point_shape',\n  [PointShape.PARABOLOID]: 'paraboloid_point_shape',\n};\n\nconst COLOR_DEFS = {\n  [PointColorType.RGB]: 'color_type_rgb',\n  [PointColorType.COLOR]: 'color_type_color',\n  [PointColorType.DEPTH]: 'color_type_depth',\n  [PointColorType.HEIGHT]: 'color_type_height',\n  [PointColorType.INTENSITY]: 'color_type_intensity',\n  [PointColorType.INTENSITY_GRADIENT]: 'color_type_intensity_gradient',\n  [PointColorType.LOD]: 'color_type_lod',\n  [PointColorType.POINT_INDEX]: 'color_type_point_index',\n  [PointColorType.CLASSIFICATION]: 'color_type_classification',\n  [PointColorType.RETURN_NUMBER]: 'color_type_return_number',\n  [PointColorType.SOURCE]: 'color_type_source',\n  [PointColorType.NORMAL]: 'color_type_normal',\n  [PointColorType.PHONG]: 'color_type_phong',\n  [PointColorType.RGB_HEIGHT]: 'color_type_rgb_height',\n  [PointColorType.COMPOSITE]: 'color_type_composite',\n};\n\nconst CLIP_MODE_DEFS = {\n  [ClipMode.DISABLED]: 'clip_disabled',\n  [ClipMode.CLIP_OUTSIDE]: 'clip_outside',\n  [ClipMode.HIGHLIGHT_INSIDE]: 'clip_highlight_inside',\n};\n\nexport class PointCloudMaterial extends RawShaderMaterial {\n  private static helperVec3 = new Vector3();\n\n  lights = false;\n  fog = false;\n  numClipBoxes: number = 0;\n  clipBoxes: IClipBox[] = [];\n  visibleNodesTexture: Texture | undefined;\n  private visibleNodeTextureOffsets = new Map<string, number>();\n\n  private _gradient = SPECTRAL;\n  private gradientTexture: Texture | undefined = generateGradientTexture(this._gradient);\n\n  private _classification: IClassification = DEFAULT_CLASSIFICATION;\n  private classificationTexture: Texture | undefined = generateClassificationTexture(\n    this._classification,\n  );\n\n  uniforms: IPointCloudMaterialUniforms & Record<string, IUniform<any>> = {\n    bbSize: makeUniform('fv', [0, 0, 0] as [number, number, number]),\n    blendDepthSupplement: makeUniform('f', 0.0),\n    blendHardness: makeUniform('f', 2.0),\n    classificationLUT: makeUniform('t', this.classificationTexture || new Texture()),\n    clipBoxCount: makeUniform('f', 0),\n    clipBoxes: makeUniform('Matrix4fv', [] as any),\n    depthMap: makeUniform('t', null),\n    diffuse: makeUniform('fv', [1, 1, 1] as [number, number, number]),\n    fov: makeUniform('f', 1.0),\n    gradient: makeUniform('t', this.gradientTexture || new Texture()),\n    heightMax: makeUniform('f', 1.0),\n    heightMin: makeUniform('f', 0.0),\n    intensityBrightness: makeUniform('f', 0),\n    intensityContrast: makeUniform('f', 0),\n    intensityGamma: makeUniform('f', 1),\n    intensityRange: makeUniform('fv', [0, 65000] as [number, number]),\n    isLeafNode: makeUniform('b', 0),\n    level: makeUniform('f', 0.0),\n    maxSize: makeUniform('f', DEFAULT_MAX_POINT_SIZE),\n    minSize: makeUniform('f', DEFAULT_MIN_POINT_SIZE),\n    octreeSize: makeUniform('f', 0),\n    opacity: makeUniform('f', 1.0),\n    pcIndex: makeUniform('f', 0),\n    rgbBrightness: makeUniform('f', DEFAULT_RGB_BRIGHTNESS),\n    rgbContrast: makeUniform('f', DEFAULT_RGB_CONTRAST),\n    rgbGamma: makeUniform('f', DEFAULT_RGB_GAMMA),\n    screenHeight: makeUniform('f', 1.0),\n    screenWidth: makeUniform('f', 1.0),\n    size: makeUniform('f', 1),\n    spacing: makeUniform('f', 1.0),\n    toModel: makeUniform('Matrix4f', []),\n    transition: makeUniform('f', 0.5),\n    uColor: makeUniform('c', new Color(0xffffff)),\n    // @ts-ignore\n    visibleNodes: makeUniform('t', this.visibleNodesTexture || new Texture()),\n    vnStart: makeUniform('f', 0.0),\n    wClassification: makeUniform('f', 0),\n    wElevation: makeUniform('f', 0),\n    wIntensity: makeUniform('f', 0),\n    wReturnNumber: makeUniform('f', 0),\n    wRGB: makeUniform('f', 1),\n    wSourceID: makeUniform('f', 0),\n    opacityAttenuation: makeUniform('f', 1),\n    filterByNormalThreshold: makeUniform('f', 0),\n    highlightedPointCoordinate: makeUniform('fv', new Vector3()),\n    highlightedPointColor: makeUniform('fv', DEFAULT_HIGHLIGHT_COLOR.clone()),\n    enablePointHighlighting: makeUniform('b', true),\n    highlightedPointScale: makeUniform('f', 2.0),\n  };\n\n  @uniform('bbSize') bbSize!: [number, number, number];\n  @uniform('depthMap') depthMap!: Texture | undefined;\n  @uniform('fov') fov!: number;\n  @uniform('heightMax') heightMax!: number;\n  @uniform('heightMin') heightMin!: number;\n  @uniform('intensityBrightness') intensityBrightness!: number;\n  @uniform('intensityContrast') intensityContrast!: number;\n  @uniform('intensityGamma') intensityGamma!: number;\n  @uniform('intensityRange') intensityRange!: [number, number];\n  @uniform('maxSize') maxSize!: number;\n  @uniform('minSize') minSize!: number;\n  @uniform('octreeSize') octreeSize!: number;\n  @uniform('opacity', true) opacity!: number;\n  @uniform('rgbBrightness', true) rgbBrightness!: number;\n  @uniform('rgbContrast', true) rgbContrast!: number;\n  @uniform('rgbGamma', true) rgbGamma!: number;\n  @uniform('screenHeight') screenHeight!: number;\n  @uniform('screenWidth') screenWidth!: number;\n  @uniform('size') size!: number;\n  @uniform('spacing') spacing!: number;\n  @uniform('transition') transition!: number;\n  @uniform('uColor') color!: Color;\n  @uniform('wClassification') weightClassification!: number;\n  @uniform('wElevation') weightElevation!: number;\n  @uniform('wIntensity') weightIntensity!: number;\n  @uniform('wReturnNumber') weightReturnNumber!: number;\n  @uniform('wRGB') weightRGB!: number;\n  @uniform('wSourceID') weightSourceID!: number;\n  @uniform('opacityAttenuation') opacityAttenuation!: number;\n  @uniform('filterByNormalThreshold') filterByNormalThreshold!: number;\n  @uniform('highlightedPointCoordinate') highlightedPointCoordinate!: Vector3;\n  @uniform('highlightedPointColor') highlightedPointColor!: Vector4;\n  @uniform('enablePointHighlighting') enablePointHighlighting!: boolean;\n  @uniform('highlightedPointScale') highlightedPointScale!: number;\n\n  @requiresShaderUpdate() useClipBox: boolean = false;\n  @requiresShaderUpdate() weighted: boolean = false;\n  @requiresShaderUpdate() pointColorType: PointColorType = PointColorType.RGB;\n  @requiresShaderUpdate() pointSizeType: PointSizeType = PointSizeType.ADAPTIVE;\n  @requiresShaderUpdate() clipMode: ClipMode = ClipMode.DISABLED;\n  @requiresShaderUpdate() useEDL: boolean = false;\n  @requiresShaderUpdate() shape: PointShape = PointShape.SQUARE;\n  @requiresShaderUpdate() treeType: TreeType = TreeType.OCTREE;\n  @requiresShaderUpdate() pointOpacityType: PointOpacityType = PointOpacityType.FIXED;\n  @requiresShaderUpdate() useFilterByNormal: boolean = false;\n  @requiresShaderUpdate() highlightPoint: boolean = false;\n\n  attributes = {\n    position: { type: 'fv', value: [] },\n    color: { type: 'fv', value: [] },\n    normal: { type: 'fv', value: [] },\n    intensity: { type: 'f', value: [] },\n    classification: { type: 'f', value: [] },\n    returnNumber: { type: 'f', value: [] },\n    numberOfReturns: { type: 'f', value: [] },\n    pointSourceID: { type: 'f', value: [] },\n    indices: { type: 'fv', value: [] },\n  };\n  newFormat: boolean;\n\n  constructor(parameters: Partial<IPointCloudMaterialParameters> = {}) {\n    super();\n\n    const tex = (this.visibleNodesTexture = generateDataTexture(2048, 1, new Color(0xffffff)));\n    tex.minFilter = NearestFilter;\n    tex.magFilter = NearestFilter;\n    this.setUniform('visibleNodes', tex);\n\n    this.treeType = getValid(parameters.treeType, TreeType.OCTREE);\n    this.size = getValid(parameters.size, 1.0);\n    this.minSize = getValid(parameters.minSize, 2.0);\n    this.maxSize = getValid(parameters.maxSize, 50.0);\n\n    this.newFormat = !!parameters.newFormat;\n\n    this.classification = DEFAULT_CLASSIFICATION;\n\n    this.defaultAttributeValues.normal = [0, 0, 0];\n    this.defaultAttributeValues.classification = [0, 0, 0];\n    this.defaultAttributeValues.indices = [0, 0, 0, 0];\n\n    this.vertexColors = true;\n    // throw new Error('Not implemented');\n    // this.extensions.fragDepth = true;\n\n    this.updateShaderSource();\n  }\n\n  dispose(): void {\n    super.dispose();\n\n    if (this.gradientTexture) {\n      this.gradientTexture.dispose();\n      this.gradientTexture = undefined;\n    }\n\n    if (this.visibleNodesTexture) {\n      this.visibleNodesTexture.dispose();\n      this.visibleNodesTexture = undefined;\n    }\n\n    this.clearVisibleNodeTextureOffsets();\n\n    if (this.classificationTexture) {\n      this.classificationTexture.dispose();\n      this.classificationTexture = undefined;\n    }\n\n    if (this.depthMap) {\n      this.depthMap.dispose();\n      this.depthMap = undefined;\n    }\n  }\n\n  clearVisibleNodeTextureOffsets(): void {\n    this.visibleNodeTextureOffsets.clear();\n  }\n\n  updateShaderSource(): void {\n    this.vertexShader = this.applyDefines(VertShader);\n    this.fragmentShader = this.applyDefines(FragShader);\n\n    if (this.opacity === 1.0) {\n      this.blending = NoBlending;\n      this.transparent = false;\n      this.depthTest = true;\n      this.depthWrite = true;\n      this.depthFunc = LessEqualDepth;\n    } else if (this.opacity < 1.0 && !this.useEDL) {\n      this.blending = AdditiveBlending;\n      this.transparent = true;\n      this.depthTest = false;\n      this.depthWrite = true;\n    }\n\n    if (this.weighted) {\n      this.blending = AdditiveBlending;\n      this.transparent = true;\n      this.depthTest = true;\n      this.depthWrite = false;\n      this.depthFunc = LessEqualDepth;\n    }\n\n    this.needsUpdate = true;\n  }\n\n  applyDefines(shaderSrc: string): string {\n    const parts: string[] = [];\n\n    function define(value: string | undefined) {\n      if (value) {\n        parts.push(`#define ${value}`);\n      }\n    }\n\n    define(TREE_TYPE_DEFS[this.treeType]);\n    define(SIZE_TYPE_DEFS[this.pointSizeType]);\n    define(SHAPE_DEFS[this.shape]);\n    define(COLOR_DEFS[this.pointColorType]);\n    define(CLIP_MODE_DEFS[this.clipMode]);\n    define(OPACITY_DEFS[this.pointOpacityType]);\n\n    // We only perform gamma and brightness/contrast calculations per point if values are specified.\n    if (\n      this.rgbGamma !== DEFAULT_RGB_GAMMA ||\n      this.rgbBrightness !== DEFAULT_RGB_BRIGHTNESS ||\n      this.rgbContrast !== DEFAULT_RGB_CONTRAST\n    ) {\n      define('use_rgb_gamma_contrast_brightness');\n    }\n\n    if (this.useFilterByNormal) {\n      define('use_filter_by_normal');\n    }\n\n    if (this.useEDL) {\n      define('use_edl');\n    }\n\n    if (this.weighted) {\n      define('weighted_splats');\n    }\n\n    if (this.numClipBoxes > 0) {\n      define('use_clip_box');\n    }\n\n    if (this.highlightPoint) {\n      define('highlight_point');\n    }\n\n    define('MAX_POINT_LIGHTS 0');\n    define('MAX_DIR_LIGHTS 0');\n\n    if (this.newFormat) {\n      define ('new_format')\n    }\n\n\n    // If \"#version 300 es\" exists as a line in shaderSrc, remove it and add it as the first element in the parts array\n    const versionLine = shaderSrc.match(/^\\s*#version\\s+300\\s+es\\s*\\n/);\n    if (versionLine) {\n      parts.unshift(versionLine[0]);\n      shaderSrc = shaderSrc.replace(versionLine[0], '');\n    }\n    parts.push(shaderSrc);\n    return parts.join('\\n');\n  }\n\n  setClipBoxes(clipBoxes: IClipBox[]): void {\n    if (!clipBoxes) {\n      return;\n    }\n\n    this.clipBoxes = clipBoxes;\n\n    const doUpdate =\n      this.numClipBoxes !== clipBoxes.length && (clipBoxes.length === 0 || this.numClipBoxes === 0);\n\n    this.numClipBoxes = clipBoxes.length;\n    this.setUniform('clipBoxCount', this.numClipBoxes);\n\n    if (doUpdate) {\n      this.updateShaderSource();\n    }\n\n    const clipBoxesLength = this.numClipBoxes * 16;\n    const clipBoxesArray = new Float32Array(clipBoxesLength);\n\n    for (let i = 0; i < this.numClipBoxes; i++) {\n      clipBoxesArray.set(clipBoxes[i].inverse.elements, 16 * i);\n    }\n\n    for (let i = 0; i < clipBoxesLength; i++) {\n      if (isNaN(clipBoxesArray[i])) {\n        clipBoxesArray[i] = Infinity;\n      }\n    }\n\n    this.setUniform('clipBoxes', clipBoxesArray);\n  }\n\n  get gradient(): IGradient {\n    return this._gradient;\n  }\n\n  set gradient(value: IGradient) {\n    if (this._gradient !== value) {\n      this._gradient = value;\n      this.gradientTexture = generateGradientTexture(this._gradient);\n      this.setUniform('gradient', this.gradientTexture);\n    }\n  }\n\n  get classification(): IClassification {\n    return this._classification;\n  }\n\n  set classification(value: IClassification) {\n    const copy: IClassification = {} as any;\n    for (const key of Object.keys(value)) {\n      copy[key] = value[key].clone();\n    }\n\n    let isEqual = false;\n    if (this._classification === undefined) {\n      isEqual = false;\n    } else {\n      isEqual = Object.keys(copy).length === Object.keys(this._classification).length;\n\n      for (const key of Object.keys(copy)) {\n        isEqual = isEqual && this._classification[key] !== undefined;\n        isEqual = isEqual && copy[key].equals(this._classification[key]);\n      }\n    }\n\n    if (!isEqual) {\n      this._classification = copy;\n      this.recomputeClassification();\n    }\n  }\n\n  private recomputeClassification(): void {\n    this.classificationTexture = generateClassificationTexture(this._classification);\n    this.setUniform('classificationLUT', this.classificationTexture);\n  }\n\n  get elevationRange(): [number, number] {\n    return [this.heightMin, this.heightMax];\n  }\n\n  set elevationRange(value: [number, number]) {\n    this.heightMin = value[0];\n    this.heightMax = value[1];\n  }\n\n  getUniform<K extends keyof IPointCloudMaterialUniforms>(\n    name: K,\n  ): IPointCloudMaterialUniforms[K]['value'] {\n    return this.uniforms === undefined ? (undefined as any) : this.uniforms[name].value;\n  }\n\n  setUniform<K extends keyof IPointCloudMaterialUniforms>(\n    name: K,\n    value: IPointCloudMaterialUniforms[K]['value'],\n  ): void {\n    if (this.uniforms === undefined) {\n      return;\n    }\n\n    const uObj = this.uniforms[name];\n\n    if (uObj.type === 'c') {\n      (uObj.value as Color).copy(value as Color);\n    } else if (value !== uObj.value) {\n      uObj.value = value;\n    }\n  }\n\n  updateMaterial(\n    octree: PointCloudOctree,\n    visibleNodes: PointCloudOctreeNode[],\n    camera: Camera,\n    renderer: WebGLRenderer,\n  ): void {\n    const pixelRatio = renderer.getPixelRatio();\n\n    if (camera.type === PERSPECTIVE_CAMERA) {\n      this.fov = (camera as PerspectiveCamera).fov * (Math.PI / 180);\n    } else {\n      this.fov = Math.PI / 2; // will result in slope = 1 in the shader\n    }\n    const renderTarget = renderer.getRenderTarget();\n    if (renderTarget !== null && renderTarget instanceof WebGLRenderTarget) {\n      this.screenWidth = renderTarget.width;\n      this.screenHeight = renderTarget.height;\n    } else {\n      this.screenWidth = renderer.domElement.clientWidth * pixelRatio;\n      this.screenHeight = renderer.domElement.clientHeight * pixelRatio;\n    }\n\n    const maxScale = Math.max(octree.scale.x, octree.scale.y, octree.scale.z);\n    this.spacing = octree.pcoGeometry.spacing * maxScale;\n    this.octreeSize = octree.pcoGeometry.boundingBox.getSize(PointCloudMaterial.helperVec3).x;\n\n    if (\n      this.pointSizeType === PointSizeType.ADAPTIVE ||\n      this.pointColorType === PointColorType.LOD\n    ) {\n      this.updateVisibilityTextureData(visibleNodes);\n    }\n  }\n\n  private updateVisibilityTextureData(nodes: PointCloudOctreeNode[]) {\n    nodes.sort(byLevelAndIndex);\n\n    const data = new Uint8Array(nodes.length * 4);\n    const offsetsToChild = new Array(nodes.length).fill(Infinity);\n\n    this.visibleNodeTextureOffsets.clear();\n\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n\n      this.visibleNodeTextureOffsets.set(node.name, i);\n\n      if (i > 0) {\n        const parentName = node.name.slice(0, -1);\n        const parentOffset = this.visibleNodeTextureOffsets.get(parentName)!;\n        const parentOffsetToChild = i - parentOffset;\n\n        offsetsToChild[parentOffset] = Math.min(offsetsToChild[parentOffset], parentOffsetToChild);\n\n        // tslint:disable:no-bitwise\n        const offset = parentOffset * 4;\n        data[offset] = data[offset] | (1 << node.index);\n        data[offset + 1] = offsetsToChild[parentOffset] >> 8;\n        data[offset + 2] = offsetsToChild[parentOffset] % 256;\n        // tslint:enable:no-bitwise\n      }\n\n      data[i * 4 + 3] = node.name.length;\n    }\n\n    const texture = this.visibleNodesTexture;\n    if (texture) {\n      texture.image.data.set(data);\n      texture.needsUpdate = true;\n    }\n  }\n\n  static makeOnBeforeRender(\n    octree: PointCloudOctree,\n    node: PointCloudOctreeNode,\n    pcIndex?: number,\n  ) {\n    return (\n      _renderer: WebGLRenderer,\n      _scene: Scene,\n      _camera: Camera,\n      _geometry: BufferGeometry,\n      material: Material,\n    ) => {\n      const pointCloudMaterial = material as PointCloudMaterial;\n      const materialUniforms = pointCloudMaterial.uniforms;\n\n      materialUniforms.level.value = node.level;\n      materialUniforms.isLeafNode.value = node.isLeafNode;\n\n      const vnStart = pointCloudMaterial.visibleNodeTextureOffsets.get(node.name);\n      if (vnStart !== undefined) {\n        materialUniforms.vnStart.value = vnStart;\n      }\n\n      materialUniforms.pcIndex.value =\n        pcIndex !== undefined ? pcIndex : octree.visibleNodes.indexOf(node);\n\n      // Note: when changing uniforms in onBeforeRender, the flag uniformsNeedUpdate has to be\n      // set to true to instruct ThreeJS to upload them. See also\n      // https://github.com/mrdoob/three.js/issues/9870#issuecomment-368750182.\n\n      // Remove the cast to any after updating to Three.JS >= r113\n      (material as any) /*ShaderMaterial*/.uniformsNeedUpdate = true;\n    };\n  }\n}\n\nfunction makeUniform<T>(type: string, value: T): IUniform<T> {\n  return { type, value };\n}\n\nfunction getValid<T>(a: T | undefined, b: T): T {\n  return a === undefined ? b : a;\n}\n\n// tslint:disable:no-invalid-this\nfunction uniform<K extends keyof IPointCloudMaterialUniforms>(\n  uniformName: K,\n  requireSrcUpdate: boolean = false,\n): PropertyDecorator {\n  return (target: Object, propertyKey: string | symbol): void => {\n    Object.defineProperty(target, propertyKey, {\n      get() {\n        return this.getUniform(uniformName);\n      },\n      set(value: any) {\n        if (value !== this.getUniform(uniformName)) {\n          this.setUniform(uniformName, value);\n          if (requireSrcUpdate) {\n            this.updateShaderSource();\n          }\n        }\n      },\n    });\n  };\n}\n\nfunction requiresShaderUpdate() {\n  return (target: Object, propertyKey: string | symbol): void => {\n    const fieldName = `_${propertyKey.toString()}`;\n\n    Object.defineProperty(target, propertyKey, {\n      get() {\n        return this[fieldName];\n      },\n      set(value: any) {\n        if (value !== this[fieldName]) {\n          this[fieldName] = value;\n          this.updateShaderSource();\n        }\n      },\n    });\n  };\n}\n",null,"#version 300 es\n\nprecision highp float;\nprecision highp int;\n\n#define max_clip_boxes 30\n\nin vec3 position;\nin vec3 normal;\nin float intensity;\nin float classification;\nin float returnNumber;\nin float numberOfReturns;\nin float pointSourceID;\nin vec4 indices;\n\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\n\nuniform float pcIndex;\n\nuniform float screenWidth;\nuniform float screenHeight;\nuniform float fov;\nuniform float spacing;\n\n#if defined use_clip_box\n\tuniform mat4 clipBoxes[max_clip_boxes];\n#endif\n\nuniform float heightMin;\nuniform float heightMax;\nuniform float size; // pixel size factor\nuniform float minSize; // minimum pixel size\nuniform float maxSize; // maximum pixel size\nuniform float octreeSize;\nuniform vec3 bbSize;\nuniform vec3 uColor;\nuniform float opacity;\nuniform float clipBoxCount;\nuniform float level;\nuniform float vnStart;\nuniform bool isLeafNode;\n\nuniform float filterByNormalThreshold;\nuniform vec2 intensityRange;\nuniform float opacityAttenuation;\nuniform float intensityGamma;\nuniform float intensityContrast;\nuniform float intensityBrightness;\nuniform float rgbGamma;\nuniform float rgbContrast;\nuniform float rgbBrightness;\nuniform float transition;\nuniform float wRGB;\nuniform float wIntensity;\nuniform float wElevation;\nuniform float wClassification;\nuniform float wReturnNumber;\nuniform float wSourceID;\n\nuniform sampler2D visibleNodes;\nuniform sampler2D gradient;\nuniform sampler2D classificationLUT;\nuniform sampler2D depthMap;\n\n#ifdef highlight_point\n\tuniform vec3 highlightedPointCoordinate;\n\tuniform bool enablePointHighlighting;\n\tuniform float highlightedPointScale;\n#endif\n\n#ifdef new_format\n\tin vec4 rgba;\n\tout vec4 vColor;\n#else\n\tin vec3 color;\n\tout vec3 vColor;\n#endif\n\n#if !defined(color_type_point_index)\n\tout float vOpacity;\n#endif\n\n#if defined(weighted_splats)\n\tout float vLinearDepth;\n#endif\n\n#if !defined(paraboloid_point_shape) && defined(use_edl)\n\tout float vLogDepth;\n#endif\n\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\n\tout vec3 vViewPosition;\n#endif\n\n#if defined(weighted_splats) || defined(paraboloid_point_shape)\n\tout float vRadius;\n#endif\n\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\n\tout vec3 vNormal;\n#endif\n\n#ifdef highlight_point\n\tout float vHighlight;\n#endif\n \n// ---------------------\n// OCTREE\n// ---------------------\n\n#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_octree)\n\n/**\n * Rounds the specified number to the closest integer.\n */\nfloat round(float number){\n\treturn floor(number + 0.5);\n}\n\n/**\n * Gets the number of 1-bits up to inclusive index position.\n * \n * number is treated as if it were an integer in the range 0-255\n */\nint numberOfOnes(int number, int index) {\n\tint numOnes = 0;\n\tint tmp = 128;\n\tfor (int i = 7; i >= 0; i--) {\n\n\t\tif (number >= tmp) {\n\t\t\tnumber = number - tmp;\n\n\t\t\tif (i <= index) {\n\t\t\t\tnumOnes++;\n\t\t\t}\n\t\t}\n\n\t\ttmp = tmp / 2;\n\t}\n\n\treturn numOnes;\n}\n\n/**\n * Checks whether the bit at index is 1.0\n *\n * number is treated as if it were an integer in the range 0-255\n */\nbool isBitSet(int number, int index){\n\n\t// weird multi else if due to lack of proper array, int and bitwise support in WebGL 1.0\n\tint powi = 1;\n\tif (index == 0) {\n\t\tpowi = 1;\n\t} else if (index == 1) {\n\t\tpowi = 2;\n\t} else if (index == 2) {\n\t\tpowi = 4;\n\t} else if (index == 3) {\n\t\tpowi = 8;\n\t} else if (index == 4) {\n\t\tpowi = 16;\n\t} else if (index == 5) {\n\t\tpowi = 32;\n\t} else if (index == 6) {\n\t\tpowi = 64;\n\t} else if (index == 7) {\n\t\tpowi = 128;\n\t}\n\n\tint ndp = number / powi;\n\n\treturn mod(float(ndp), 2.0) != 0.0;\n}\n\n/**\n * Gets the the LOD at the point position.\n */\nfloat getLOD() {\n\tvec3 offset = vec3(0.0, 0.0, 0.0);\n\tint iOffset = int(vnStart);\n\tfloat depth = level;\n\n\tfor (float i = 0.0; i <= 30.0; i++) {\n\t\tfloat nodeSizeAtLevel = octreeSize  / pow(2.0, i + level + 0.0);\n\t\t\n\t\tvec3 index3d = (position-offset) / nodeSizeAtLevel;\n\t\tindex3d = floor(index3d + 0.5);\n\t\tint index = int(round(4.0 * index3d.x + 2.0 * index3d.y + index3d.z));\n\t\t\n\t\tvec4 value = texture(visibleNodes, vec2(float(iOffset) / 2048.0, 0.0));\n\t\tint mask = int(round(value.r * 255.0));\n\n\t\tif (isBitSet(mask, index)) {\n\t\t\t// there are more visible child nodes at this position\n\t\t\tint advanceG = int(round(value.g * 255.0)) * 256;\n\t\t\tint advanceB = int(round(value.b * 255.0));\n\t\t\tint advanceChild = numberOfOnes(mask, index - 1);\n\t\t\tint advance = advanceG + advanceB + advanceChild;\n\n\t\t\tiOffset = iOffset + advance;\n\n\t\t\tdepth++;\n\t\t} else {\n\t\t\treturn value.a * 255.0; // no more visible child nodes at this position\n\t\t}\n\t\t\n\t\toffset = offset + (vec3(1.0, 1.0, 1.0) * nodeSizeAtLevel * 0.5) * index3d;  \n\t}\n\t\t\n\treturn depth;\n}\n\nfloat getPointSizeAttenuation() {\n\treturn 0.5 * pow(2.0, getLOD());\n}\n\n#endif\n\n// ---------------------\n// KD-TREE\n// ---------------------\n\n#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_kdtree)\n\nfloat getLOD() {\n\tvec3 offset = vec3(0.0, 0.0, 0.0);\n\tfloat intOffset = 0.0;\n\tfloat depth = 0.0;\n\t\t\t\n\tvec3 size = bbSize;\t\n\tvec3 pos = position;\n\t\t\n\tfor (float i = 0.0; i <= 1000.0; i++) {\n\t\t\n\t\tvec4 value = texture(visibleNodes, vec2(intOffset / 2048.0, 0.0));\n\t\t\n\t\tint children = int(value.r * 255.0);\n\t\tfloat next = value.g * 255.0;\n\t\tint split = int(value.b * 255.0);\n\t\t\n\t\tif (next == 0.0) {\n\t\t \treturn depth;\n\t\t}\n\t\t\n\t\tvec3 splitv = vec3(0.0, 0.0, 0.0);\n\t\tif (split == 1) {\n\t\t\tsplitv.x = 1.0;\n\t\t} else if (split == 2) {\n\t\t \tsplitv.y = 1.0;\n\t\t} else if (split == 4) {\n\t\t \tsplitv.z = 1.0;\n\t\t}\n\t\t\n\t\tintOffset = intOffset + next;\n\t\t\n\t\tfloat factor = length(pos * splitv / size);\n\t\tif (factor < 0.5) {\n\t\t \t// left\n\t\t\tif (children == 0 || children == 2) {\n\t\t\t\treturn depth;\n\t\t\t}\n\t\t} else {\n\t\t\t// right\n\t\t\tpos = pos - size * splitv * 0.5;\n\t\t\tif (children == 0 || children == 1) {\n\t\t\t\treturn depth;\n\t\t\t}\n\t\t\tif (children == 3) {\n\t\t\t\tintOffset = intOffset + 1.0;\n\t\t\t}\n\t\t}\n\t\tsize = size * ((1.0 - (splitv + 1.0) / 2.0) + 0.5);\n\t\t\n\t\tdepth++;\n\t}\n\t\t\n\t\t\n\treturn depth;\t\n}\n\nfloat getPointSizeAttenuation() {\n\treturn 0.5 * pow(1.3, getLOD());\n}\n\n#endif\n\n// formula adapted from: http://www.dfstudios.co.uk/articles/programming/image-programming-algorithms/image-processing-algorithms-part-5-contrast-adjustment/\nfloat getContrastFactor(float contrast) {\n\treturn (1.0158730158730156 * (contrast + 1.0)) / (1.0158730158730156 - contrast);\n}\n\n#ifndef new_format\n\nvec3 getRGB() {\n\t#if defined(use_rgb_gamma_contrast_brightness)\n\t  vec3 rgb = color;\n\t\trgb = pow(rgb, vec3(rgbGamma));\n\t\trgb = rgb + rgbBrightness;\n\t\trgb = (rgb - 0.5) * getContrastFactor(rgbContrast) + 0.5;\n\t\trgb = clamp(rgb, 0.0, 1.0);\n\t\treturn rgb;\n\t#else\n\t\treturn color;\n\t#endif\n}\n\n#endif\n\nfloat getIntensity() {\n\tfloat w = (intensity - intensityRange.x) / (intensityRange.y - intensityRange.x);\n\tw = pow(w, intensityGamma);\n\tw = w + intensityBrightness;\n\tw = (w - 0.5) * getContrastFactor(intensityContrast) + 0.5;\n\tw = clamp(w, 0.0, 1.0);\n\t\n\treturn w;\n}\n\nvec3 getElevation() {\n\tvec4 world = modelMatrix * vec4( position, 1.0 );\n\tfloat w = (world.z - heightMin) / (heightMax-heightMin);\n\tvec3 cElevation = texture(gradient, vec2(w,1.0-w)).rgb;\n\t\n\treturn cElevation;\n}\n\nvec4 getClassification() {\n\tvec2 uv = vec2(classification / 255.0, 0.5);\n\tvec4 classColor = texture(classificationLUT, uv);\n\t\n\treturn classColor;\n}\n\nvec3 getReturnNumber() {\n\tif (numberOfReturns == 1.0) {\n\t\treturn vec3(1.0, 1.0, 0.0);\n\t} else {\n\t\tif (returnNumber == 1.0) {\n\t\t\treturn vec3(1.0, 0.0, 0.0);\n\t\t} else if (returnNumber == numberOfReturns) {\n\t\t\treturn vec3(0.0, 0.0, 1.0);\n\t\t} else {\n\t\t\treturn vec3(0.0, 1.0, 0.0);\n\t\t}\n\t}\n}\n\nvec3 getSourceID() {\n\tfloat w = mod(pointSourceID, 10.0) / 10.0;\n\treturn texture(gradient, vec2(w, 1.0 - w)).rgb;\n}\n\n#ifndef new_format\n\nvec3 getCompositeColor() {\n\tvec3 c;\n\tfloat w;\n\n\tc += wRGB * getRGB();\n\tw += wRGB;\n\t\n\tc += wIntensity * getIntensity() * vec3(1.0, 1.0, 1.0);\n\tw += wIntensity;\n\t\n\tc += wElevation * getElevation();\n\tw += wElevation;\n\t\n\tc += wReturnNumber * getReturnNumber();\n\tw += wReturnNumber;\n\t\n\tc += wSourceID * getSourceID();\n\tw += wSourceID;\n\t\n\tvec4 cl = wClassification * getClassification();\n\tc += cl.a * cl.rgb;\n\tw += wClassification * cl.a;\n\n\tc = c / w;\n\t\n\tif (w == 0.0) {\n\t\tgl_Position = vec4(100.0, 100.0, 100.0, 0.0);\n\t}\n\t\n\treturn c;\n}\n\n#endif\n\nvoid main() {\n\tvec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n\t#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\n\t\tvViewPosition = mvPosition.xyz;\n\t#endif\n\n\t#if defined weighted_splats\n\t\tvLinearDepth = gl_Position.w;\n\t#endif\n\n\t#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\n\t\tvNormal = normalize(normalMatrix * normal);\n\t#endif\n\n\t#if !defined(paraboloid_point_shape) && defined(use_edl)\n\t\tvLogDepth = log2(-mvPosition.z);\n\t#endif\n\n\t// ---------------------\n\t// POINT SIZE\n\t// ---------------------\n\n\tfloat pointSize = 1.0;\n\tfloat slope = tan(fov / 2.0);\n\tfloat projFactor =  -0.5 * screenHeight / (slope * mvPosition.z);\n\n\t#if defined fixed_point_size\n\t\tpointSize = size;\n\t#elif defined attenuated_point_size\n\t\tpointSize = size * spacing * projFactor;\n\t#elif defined adaptive_point_size\n\t\tfloat worldSpaceSize = 2.0 * size * spacing / getPointSizeAttenuation();\n\t\tpointSize = worldSpaceSize * projFactor;\n\t#endif\n\n\tpointSize = max(minSize, pointSize);\n\tpointSize = min(maxSize, pointSize);\n\n\t#if defined(weighted_splats) || defined(paraboloid_point_shape)\n\t\tvRadius = pointSize / projFactor;\n\t#endif\n\n\tgl_PointSize = pointSize;\n\n\t// ---------------------\n\t// HIGHLIGHTING\n\t// ---------------------\n\n\t#ifdef highlight_point\n\t\tvec4 mPosition = modelMatrix * vec4(position, 1.0);\n\t\tif (enablePointHighlighting && abs(mPosition.x - highlightedPointCoordinate.x) < 0.0001 &&\n\t\t\tabs(mPosition.y - highlightedPointCoordinate.y) < 0.0001 &&\n\t\t\tabs(mPosition.z - highlightedPointCoordinate.z) < 0.0001) {\n\t\t\tvHighlight = 1.0;\n\t\t\tgl_PointSize = pointSize * highlightedPointScale;\n\t\t} else {\n\t\t\tvHighlight = 0.0;\n\t\t}\n\t#endif\n\n\t// ---------------------\n\t// OPACITY\n\t// ---------------------\n\n\t#ifndef color_type_point_index\n\t\t#ifdef attenuated_opacity\n\t\t\tvOpacity = opacity * exp(-length(-mvPosition.xyz) / opacityAttenuation);\n\t\t#else\n\t\t\tvOpacity = opacity;\n\t\t#endif\n\t#endif\n\n\t// ---------------------\n\t// FILTERING\n\t// ---------------------\n\n\t#ifdef use_filter_by_normal\n\t\tif(abs((modelViewMatrix * vec4(normal, 0.0)).z) > filterByNormalThreshold) {\n\t\t\t// Move point outside clip space space to discard it.\n\t\t\tgl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n\t\t}\n\t#endif\n\n\t// ---------------------\n\t// POINT COLOR\n\t// ---------------------\t\n\t#ifdef new_format\n\t\tvColor = rgba;\n\t#elif defined color_type_rgb\n\t\tvColor = getRGB();\n\t#elif defined color_type_height\n\t\tvColor = getElevation();\n\t#elif defined color_type_rgb_height\n\t\tvec3 cHeight = getElevation();\n\t\tvColor = (1.0 - transition) * getRGB() + transition * cHeight;\n\t#elif defined color_type_depth\n\t\tfloat linearDepth = -mvPosition.z ;\n\t\tfloat expDepth = (gl_Position.z / gl_Position.w) * 0.5 + 0.5;\n\t\tvColor = vec3(linearDepth, expDepth, 0.0);\n\t#elif defined color_type_intensity\n\t\tfloat w = getIntensity();\n\t\tvColor = vec3(w, w, w);\n\t#elif defined color_type_intensity_gradient\n\t\tfloat w = getIntensity();\n\t\tvColor = texture(gradient, vec2(w, 1.0 - w)).rgb;\n\t#elif defined color_type_color\n\t\tvColor = uColor;\n\t#elif defined color_type_lod\n\tfloat w = getLOD() / 10.0;\n\tvColor = texture(gradient, vec2(w, 1.0 - w)).rgb;\n\t#elif defined color_type_point_index\n\t\tvColor = indices.rgb;\n\t#elif defined color_type_classification\n\t  vec4 cl = getClassification(); \n\t\tvColor = cl.rgb;\n\t#elif defined color_type_return_number\n\t\tvColor = getReturnNumber();\n\t#elif defined color_type_source\n\t\tvColor = getSourceID();\n\t#elif defined color_type_normal\n\t\tvColor = (modelMatrix * vec4(normal, 0.0)).xyz;\n\t#elif defined color_type_phong\n\t\tvColor = color;\n\t#elif defined color_type_composite\n\t\tvColor = getCompositeColor();\n\t#endif\n\t\n\t#if !defined color_type_composite && defined color_type_classification\n\t\tif (cl.a == 0.0) {\n\t\t\tgl_Position = vec4(100.0, 100.0, 100.0, 0.0);\n\t\t\treturn;\n\t\t}\n\t#endif\n\n\t// ---------------------\n\t// CLIPPING\n\t// ---------------------\n\n\t#if defined use_clip_box\n\t\tbool insideAny = false;\n\t\tfor (int i = 0; i < max_clip_boxes; i++) {\n\t\t\tif (i == int(clipBoxCount)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\n\t\t\tvec4 clipPosition = clipBoxes[i] * modelMatrix * vec4(position, 1.0);\n\t\t\tbool inside = -0.5 <= clipPosition.x && clipPosition.x <= 0.5;\n\t\t\tinside = inside && -0.5 <= clipPosition.y && clipPosition.y <= 0.5;\n\t\t\tinside = inside && -0.5 <= clipPosition.z && clipPosition.z <= 0.5;\n\t\t\tinsideAny = insideAny || inside;\n\t\t}\n\n\t\tif (!insideAny) {\n\t\t\t#if defined clip_outside\n\t\t\t\tgl_Position = vec4(1000.0, 1000.0, 1000.0, 1.0);\n\t\t\t#elif defined clip_highlight_inside && !defined(color_type_depth)\n\t\t\t\tfloat c = (vColor.r + vColor.g + vColor.b) / 6.0;\n\t\t\t#endif\n\t\t} else {\n\t\t\t#if defined clip_highlight_inside\n\t\t\t\tvColor.r += 0.5;\n\t\t\t#endif\n\t\t}\n\t#endif\n}\n","#version 300 es\n\nprecision highp float;\nprecision highp int;\n\nuniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n\nuniform mat4 projectionMatrix;\nuniform float opacity;\n\nuniform float blendHardness;\nuniform float blendDepthSupplement;\nuniform float fov;\nuniform float spacing;\nuniform float pcIndex;\nuniform float screenWidth;\nuniform float screenHeight;\n\nuniform sampler2D depthMap;\n\nout vec4 fragColor;\n\n#ifdef highlight_point\n\tuniform vec4 highlightedPointColor;\n#endif\n\n#ifdef new_format\n\tin vec4 vColor;\n#else\n\tin vec3 vColor;\n#endif\n\n#if !defined(color_type_point_index)\n\tin float vOpacity;\n#endif\n\n#if defined(weighted_splats)\n\tin float vLinearDepth;\n#endif\n\n#if !defined(paraboloid_point_shape) && defined(use_edl)\n\tin float vLogDepth;\n#endif\n\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\n\tin vec3 vViewPosition;\n#endif\n\n#if defined(weighted_splats) || defined(paraboloid_point_shape)\n\tin float vRadius;\n#endif\n\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\n\tin vec3 vNormal;\n#endif\n\n#ifdef highlight_point\n\tin float vHighlight;\n#endif\n\nfloat specularStrength = 1.0;\n\nvoid main() {\n\n\t#ifdef new_format\n\t\t// set actualColor vec3 from vec4 vColor\n\t\tvec3 actualColor = vColor.xyz;\n\t#else\n\t\t// set actualColor RGB from the XYZ of vColor\n\t\tvec3 actualColor = vColor;\n\t#endif\n\t\n\tvec3 color = actualColor;\n\tfloat depth = gl_FragCoord.z;\n\n\t#if defined(circle_point_shape) || defined(paraboloid_point_shape) || defined (weighted_splats)\n\t\tfloat u = 2.0 * gl_PointCoord.x - 1.0;\n\t\tfloat v = 2.0 * gl_PointCoord.y - 1.0;\n\t#endif\n\t\n\t#if defined(circle_point_shape) || defined (weighted_splats)\n\t\tfloat cc = u*u + v*v;\n\t\tif(cc > 1.0){\n\t\t\tdiscard;\n\t\t}\n\t#endif\n\n\t#if defined weighted_splats\n\t\tvec2 uv = gl_FragCoord.xy / vec2(screenWidth, screenHeight);\n\t\tfloat sDepth = texture2D(depthMap, uv).r;\n\t\tif(vLinearDepth > sDepth + vRadius + blendDepthSupplement){\n\t\t\tdiscard;\n\t\t}\n\t#endif\n\t\t\n\t#if defined color_type_point_index\n\t\tfragColor = vec4(color, pcIndex / 255.0);\n\t#else\n\t\tfragColor = vec4(color, vOpacity);\n\t#endif\n\n\t#if defined(color_type_phong)\n\t\t#if MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0\n\t\t\tvec3 normal = normalize( vNormal );\n\t\t\tnormal.z = abs(normal.z);\n\n\t\t\tvec3 viewPosition = normalize( vViewPosition );\n\t\t#endif\n\n\t\t// code taken from three.js phong light fragment shader\n\t\n\t\t#if MAX_POINT_LIGHTS > 0\n\n\t\t\tvec3 pointDiffuse = vec3( 0.0 );\n\t\t\tvec3 pointSpecular = vec3( 0.0 );\n\n\t\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\t\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\t\t\tfloat lDistance = 1.0;\n\t\t\t\tif ( pointLightDistance[ i ] > 0.0 )\n\t\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n\n\t\t\t\tlVector = normalize( lVector );\n\n\t\t\t\t\t\t// diffuse\n\n\t\t\t\tfloat dotProduct = dot( normal, lVector );\n\n\t\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\t\tfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\t\t\tvec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n\n\t\t\t\t#else\n\n\t\t\t\t\tfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t\t\t#endif\n\n\t\t\t\tpointDiffuse += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\n\n\t\t\t\t// specular\n\n\t\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\n\t\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\n\t\t\t\tfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n\n\t\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\t\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, pointHalfVector ), 0.0 ), 5.0 );\n\t\t\t\tpointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\n\t\t\t\tpointSpecular = vec3(0.0, 0.0, 0.0);\n\t\t\t}\n\t\t\n\t\t#endif\n\t\t\n\t\t#if MAX_DIR_LIGHTS > 0\n\n\t\t\tvec3 dirDiffuse = vec3( 0.0 );\n\t\t\tvec3 dirSpecular = vec3( 0.0 );\n\n\t\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n\t\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n\t\t\t\tvec3 dirVector = normalize( lDirection.xyz );\n\n\t\t\t\t\t\t// diffuse\n\n\t\t\t\tfloat dotProduct = dot( normal, dirVector );\n\n\t\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\t\tfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\t\t\tvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n\n\t\t\t\t#else\n\n\t\t\t\t\tfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t\t\t#endif\n\n\t\t\t\tdirDiffuse += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\n\n\t\t\t\t// specular\n\n\t\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\n\t\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\n\t\t\t\tfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n\n\t\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\t\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\n\t\t\t\tdirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n\t\t\t}\n\n\t\t#endif\n\t\t\n\t\tvec3 totalDiffuse = vec3( 0.0 );\n\t\tvec3 totalSpecular = vec3( 0.0 );\n\t\t\n\t\t#if MAX_POINT_LIGHTS > 0\n\n\t\t\ttotalDiffuse += pointDiffuse;\n\t\t\ttotalSpecular += pointSpecular;\n\n\t\t#endif\n\t\t\n\t\t#if MAX_DIR_LIGHTS > 0\n\n\t\t\ttotalDiffuse += dirDiffuse;\n\t\t\ttotalSpecular += dirSpecular;\n\n\t\t#endif\n\t\t\n\t\tgl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n\n\t#endif\n\t\n\t#if defined weighted_splats\n\t    //float w = pow(1.0 - (u*u + v*v), blendHardness);\n\t\t\n\t\tfloat wx = 2.0 * length(2.0 * gl_PointCoord - 1.0);\n\t\tfloat w = exp(-wx * wx * 0.5);\n\t\t\n\t\t//float distance = length(2.0 * gl_PointCoord - 1.0);\n\t\t//float w = exp( -(distance * distance) / blendHardness);\n\t\t\n\t\tgl_FragColor.rgb = gl_FragColor.rgb * w;\n\t\tgl_FragColor.a = w;\n\t#endif\n\t\n\t#if defined paraboloid_point_shape\n\t\tfloat wi = 0.0 - ( u*u + v*v);\n\t\tvec4 pos = vec4(vViewPosition, 1.0);\n\t\tpos.z += wi * vRadius;\n\t\tfloat linearDepth = -pos.z;\n\t\tpos = projectionMatrix * pos;\n\t\tpos = pos / pos.w;\n\t\tfloat expDepth = pos.z;\n\t\tdepth = (pos.z + 1.0) / 2.0;\n\t\tgl_FragDepth = depth;\n\t\t\n\t\t#if defined(color_type_depth)\n\t\t\tgl_FragColor.r = linearDepth;\n\t\t\tgl_FragColor.g = expDepth;\n\t\t#endif\n\t\t\n\t\t#if defined(use_edl)\n\t\t\tgl_FragColor.a = log2(linearDepth);\n\t\t#endif\n\t\t\n\t#else\n\t\t#if defined(use_edl)\n\t\t\tgl_FragColor.a = vLogDepth;\n\t\t#endif\n\t#endif\n\n\t#ifdef highlight_point\n\t\tif (vHighlight > 0.0) {\n\t\t\tgl_FragColor = highlightedPointColor;\n\t\t}\n\t#endif\n}\n","import { IPointCloudTreeNode } from '../types';\n\nexport function getIndexFromName(name: string) {\n  return parseInt(name.charAt(name.length - 1), 10);\n}\n\n/**\n * When passed to `[].sort`, sorts the array by level and index: r, r0, r3, r4, r01, r07, r30, ...\n */\nexport function byLevelAndIndex(a: IPointCloudTreeNode, b: IPointCloudTreeNode) {\n  const na = a.name;\n  const nb = b.name;\n  if (na.length !== nb.length) {\n    return na.length - nb.length;\n  } else if (na < nb) {\n    return -1;\n  } else if (na > nb) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n",null,"import { Vector4 } from 'three';\nimport { IClassification } from './types';\n\nexport const DEFAULT_CLASSIFICATION: IClassification = {\n  0: new Vector4(0.5, 0.5, 0.5, 1.0),\n  1: new Vector4(0.5, 0.5, 0.5, 1.0),\n  2: new Vector4(0.63, 0.32, 0.18, 1.0),\n  3: new Vector4(0.0, 1.0, 0.0, 1.0),\n  4: new Vector4(0.0, 0.8, 0.0, 1.0),\n  5: new Vector4(0.0, 0.6, 0.0, 1.0),\n  6: new Vector4(1.0, 0.66, 0.0, 1.0),\n  7: new Vector4(1.0, 0, 1.0, 1.0),\n  8: new Vector4(1.0, 0, 0.0, 1.0),\n  9: new Vector4(0.0, 0.0, 1.0, 1.0),\n  12: new Vector4(1.0, 1.0, 0.0, 1.0),\n  DEFAULT: new Vector4(0.3, 0.6, 0.6, 0.5),\n};\n",null,"import { Color } from 'three';\nimport { IGradient } from '../types';\n\nexport const GRAYSCALE: IGradient = [\n  [0, new Color(0, 0, 0)],\n  [1, new Color(1, 1, 1)],\n];\n",null,"import { Color } from 'three';\nimport { IGradient } from '../types';\n\nexport const INFERNO: IGradient = [\n  [0.0, new Color(0.077, 0.042, 0.206)],\n  [0.1, new Color(0.225, 0.036, 0.388)],\n  [0.2, new Color(0.373, 0.074, 0.432)],\n  [0.3, new Color(0.522, 0.128, 0.42)],\n  [0.4, new Color(0.665, 0.182, 0.37)],\n  [0.5, new Color(0.797, 0.255, 0.287)],\n  [0.6, new Color(0.902, 0.364, 0.184)],\n  [0.7, new Color(0.969, 0.516, 0.063)],\n  [0.8, new Color(0.988, 0.683, 0.072)],\n  [0.9, new Color(0.961, 0.859, 0.298)],\n  [1.0, new Color(0.988, 0.998, 0.645)],\n];\n",null,"import { Color } from 'three';\nimport { IGradient } from '../types';\n\nexport const PLASMA: IGradient = [\n  [0.0, new Color(0.241, 0.015, 0.61)],\n  [0.1, new Color(0.387, 0.001, 0.654)],\n  [0.2, new Color(0.524, 0.025, 0.653)],\n  [0.3, new Color(0.651, 0.125, 0.596)],\n  [0.4, new Color(0.752, 0.227, 0.513)],\n  [0.5, new Color(0.837, 0.329, 0.431)],\n  [0.6, new Color(0.907, 0.435, 0.353)],\n  [0.7, new Color(0.963, 0.554, 0.272)],\n  [0.8, new Color(0.992, 0.681, 0.195)],\n  [0.9, new Color(0.987, 0.822, 0.144)],\n  [1.0, new Color(0.94, 0.975, 0.131)],\n];\n",null,"import { Color } from 'three';\nimport { IGradient } from '../types';\n\nexport const RAINBOW: IGradient = [\n  [0, new Color(0.278, 0, 0.714)],\n  [1 / 6, new Color(0, 0, 1)],\n  [2 / 6, new Color(0, 1, 1)],\n  [3 / 6, new Color(0, 1, 0)],\n  [4 / 6, new Color(1, 1, 0)],\n  [5 / 6, new Color(1, 0.64, 0)],\n  [1, new Color(1, 0, 0)],\n];\n",null,"import { Color } from 'three';\nimport { IGradient } from '../types';\n\n// From chroma spectral http://gka.github.io/chroma.js/\nexport const SPECTRAL: IGradient = [\n  [0, new Color(0.3686, 0.3098, 0.6353)],\n  [0.1, new Color(0.1961, 0.5333, 0.7412)],\n  [0.2, new Color(0.4, 0.7608, 0.6471)],\n  [0.3, new Color(0.6706, 0.8667, 0.6431)],\n  [0.4, new Color(0.902, 0.9608, 0.5961)],\n  [0.5, new Color(1.0, 1.0, 0.749)],\n  [0.6, new Color(0.9961, 0.8784, 0.5451)],\n  [0.7, new Color(0.9922, 0.6824, 0.3804)],\n  [0.8, new Color(0.9569, 0.4275, 0.2627)],\n  [0.9, new Color(0.8353, 0.2431, 0.3098)],\n  [1, new Color(0.6196, 0.0039, 0.2588)],\n];\n",null,"import { Color } from 'three';\nimport { IGradient } from '../types';\n\nexport const VIRIDIS: IGradient = [\n  [0.0, new Color(0.267, 0.005, 0.329)],\n  [0.1, new Color(0.283, 0.141, 0.458)],\n  [0.2, new Color(0.254, 0.265, 0.53)],\n  [0.3, new Color(0.207, 0.372, 0.553)],\n  [0.4, new Color(0.164, 0.471, 0.558)],\n  [0.5, new Color(0.128, 0.567, 0.551)],\n  [0.6, new Color(0.135, 0.659, 0.518)],\n  [0.7, new Color(0.267, 0.749, 0.441)],\n  [0.8, new Color(0.478, 0.821, 0.318)],\n  [0.9, new Color(0.741, 0.873, 0.15)],\n  [1.0, new Color(0.993, 0.906, 0.144)],\n];\n",null,"import { Color } from 'three';\nimport { IGradient } from '../types';\n\nexport const YELLOW_GREEN: IGradient = [\n  [0, new Color(0.1647, 0.2824, 0.3451)],\n  [0.1, new Color(0.1338, 0.3555, 0.4227)],\n  [0.2, new Color(0.061, 0.4319, 0.4864)],\n  [0.3, new Color(0.0, 0.5099, 0.5319)],\n  [0.4, new Color(0.0, 0.5881, 0.5569)],\n  [0.5, new Color(0.137, 0.665, 0.5614)],\n  [0.6, new Color(0.2906, 0.7395, 0.5477)],\n  [0.7, new Color(0.4453, 0.8099, 0.5201)],\n  [0.8, new Color(0.6102, 0.8748, 0.485)],\n  [0.9, new Color(0.7883, 0.9323, 0.4514)],\n  [1, new Color(0.9804, 0.9804, 0.4314)],\n];\n",null,"import {\n  CanvasTexture,\n  Color,\n  DataTexture,\n  LinearFilter,\n  NearestFilter,\n  RGBAFormat,\n  Texture,\n} from 'three';\nimport { IClassification, IGradient } from '../materials/types';\n\nexport function generateDataTexture(width: number, height: number, color: Color): Texture {\n  const size = width * height;\n  const data = new Uint8Array(4 * size);\n\n  const r = Math.floor(color.r * 255);\n  const g = Math.floor(color.g * 255);\n  const b = Math.floor(color.b * 255);\n\n  for (let i = 0; i < size; i++) {\n    data[i * 3] = r;\n    data[i * 3 + 1] = g;\n    data[i * 3 + 2] = b;\n  }\n\n  const texture = new DataTexture(data, width, height, RGBAFormat);\n  texture.needsUpdate = true;\n  texture.magFilter = NearestFilter;\n\n  return texture;\n}\n\nexport function generateGradientTexture(gradient: IGradient): Texture {\n  const size = 64;\n\n  const canvas = document.createElement('canvas');\n  canvas.width = size;\n  canvas.height = size;\n\n  const context = canvas.getContext('2d')!;\n\n  context.rect(0, 0, size, size);\n  const ctxGradient = context.createLinearGradient(0, 0, size, size);\n\n  for (let i = 0; i < gradient.length; i++) {\n    const step = gradient[i];\n    ctxGradient.addColorStop(step[0], `#${step[1].getHexString()}`);\n  }\n\n  context.fillStyle = ctxGradient;\n  context.fill();\n\n  const texture = new CanvasTexture(canvas);\n  texture.needsUpdate = true;\n\n  texture.minFilter = LinearFilter;\n  // textureImage = texture.image;\n\n  return texture;\n}\n\nexport function generateClassificationTexture(classification: IClassification): Texture {\n  const width = 256;\n  const height = 256;\n  const size = width * height;\n\n  const data = new Uint8Array(4 * size);\n\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      const i = x + width * y;\n\n      let color;\n      if (classification[x]) {\n        color = classification[x];\n      } else if (classification[x % 32]) {\n        color = classification[x % 32];\n      } else {\n        color = classification.DEFAULT;\n      }\n\n      data[4 * i + 0] = 255 * color.x;\n      data[4 * i + 1] = 255 * color.y;\n      data[4 * i + 2] = 255 * color.z;\n      data[4 * i + 3] = 255 * color.w;\n    }\n  }\n\n  const texture = new DataTexture(data, width, height, RGBAFormat);\n  texture.magFilter = NearestFilter;\n  texture.needsUpdate = true;\n\n  return texture;\n}\n",null,null,"import { Box3, BufferGeometry, EventDispatcher, Object3D, Points, Sphere } from 'three';\nimport { PointCloudOctreeGeometryNode } from './point-cloud-octree-geometry-node';\nimport { IPointCloudTreeNode } from './types';\n\nexport class PointCloudOctreeNode extends EventDispatcher implements IPointCloudTreeNode {\n  geometryNode: PointCloudOctreeGeometryNode;\n  sceneNode: Points;\n  pcIndex: number | undefined = undefined;\n  boundingBoxNode: Object3D | null = null;\n  readonly children: (IPointCloudTreeNode | null)[];\n  readonly loaded = true;\n  readonly isTreeNode: boolean = true;\n  readonly isGeometryNode: boolean = false;\n\n  constructor(geometryNode: PointCloudOctreeGeometryNode, sceneNode: Points) {\n    super();\n\n    this.geometryNode = geometryNode;\n    this.sceneNode = sceneNode;\n    this.children = geometryNode.children.slice();\n  }\n\n  dispose(): void {\n    this.geometryNode.dispose();\n  }\n\n  disposeSceneNode(): void {\n    const node = this.sceneNode;\n\n    if (node.geometry instanceof BufferGeometry) {\n      const attributes = node.geometry.attributes;\n\n      // tslint:disable-next-line:forin\n      for (const key in attributes) {\n        if (key === 'position') {\n          delete (attributes[key] as any).array;\n        }\n\n        delete attributes[key];\n      }\n\n      node.geometry.dispose();\n      node.geometry = undefined as any;\n    }\n  }\n\n  traverse(cb: (node: IPointCloudTreeNode) => void, includeSelf?: boolean): void {\n    this.geometryNode.traverse(cb, includeSelf);\n  }\n\n  get id() {\n    return this.geometryNode.id;\n  }\n\n  get name() {\n    return this.geometryNode.name;\n  }\n\n  get level(): number {\n    return this.geometryNode.level;\n  }\n\n  get isLeafNode(): boolean {\n    return this.geometryNode.isLeafNode;\n  }\n\n  get numPoints(): number {\n    return this.geometryNode.numPoints;\n  }\n\n  get index() {\n    return this.geometryNode.index;\n  }\n\n  get boundingSphere(): Sphere {\n    return this.geometryNode.boundingSphere;\n  }\n\n  get boundingBox(): Box3 {\n    return this.geometryNode.boundingBox;\n  }\n\n  get spacing() {\n    return this.geometryNode.spacing;\n  }\n}\n",null,"import {\n  BufferAttribute,\n  Camera,\n  LinearFilter,\n  NearestFilter,\n  NoBlending,\n  Points,\n  Ray,\n  RGBAFormat,\n  Scene,\n  Sphere,\n  Vector3,\n  Vector4,\n  WebGLRenderer,\n  WebGLRenderTarget,\n  Color,\n} from 'three';\nimport { COLOR_BLACK, DEFAULT_PICK_WINDOW_SIZE } from './constants';\nimport { ClipMode, PointCloudMaterial, PointColorType } from './materials';\nimport { PointCloudOctree } from './point-cloud-octree';\nimport { PointCloudOctreeNode } from './point-cloud-octree-node';\nimport { PickPoint, PointCloudHit } from './types';\nimport { clamp } from './utils/math';\n\nexport interface PickParams {\n  pickWindowSize: number;\n  pickOutsideClipRegion: boolean;\n  /**\n   * If provided, the picking will use this pixel position instead of the `Ray` passed to the `pick`\n   * method.\n   */\n  pixelPosition: Vector3;\n  /**\n   * Function which gets called after a picking material has been created and setup and before the\n   * point cloud is rendered into the picking render target. This gives applications a chance to\n   * customize the renderTarget and the material.\n   *\n   * @param material\n   *    The pick material.\n   * @param renterTarget\n   *    The render target used for picking.\n   */\n  onBeforePickRender: (material: PointCloudMaterial, renterTarget: WebGLRenderTarget) => void;\n}\n\ninterface IPickState {\n  renderTarget: WebGLRenderTarget;\n  material: PointCloudMaterial;\n  scene: Scene;\n}\n\ninterface RenderedNode {\n  node: PointCloudOctreeNode;\n  octree: PointCloudOctree;\n}\n\nexport class PointCloudOctreePicker {\n  private static readonly helperVec3 = new Vector3();\n  private static readonly helperSphere = new Sphere();\n  private static readonly clearColor = new Color();\n  private pickState: IPickState | undefined;\n\n  dispose() {\n    if (this.pickState) {\n      this.pickState.material.dispose();\n      this.pickState.renderTarget.dispose();\n    }\n  }\n\n  pick(\n    renderer: WebGLRenderer,\n    camera: Camera,\n    ray: Ray,\n    octrees: PointCloudOctree[],\n    params: Partial<PickParams> = {},\n  ): PickPoint | null {\n    if (octrees.length === 0) {\n      return null;\n    }\n\n    const pickState = this.pickState\n      ? this.pickState\n      : (this.pickState = PointCloudOctreePicker.getPickState());\n\n    const pickMaterial = pickState.material;\n\n    const pixelRatio = renderer.getPixelRatio();\n    const width = Math.ceil(renderer.domElement.clientWidth * pixelRatio);\n    const height = Math.ceil(renderer.domElement.clientHeight * pixelRatio);\n    PointCloudOctreePicker.updatePickRenderTarget(this.pickState, width, height);\n\n    const pixelPosition = PointCloudOctreePicker.helperVec3; // Use helper vector to prevent extra allocations.\n\n    if (params.pixelPosition) {\n      pixelPosition.copy(params.pixelPosition);\n    } else {\n      pixelPosition.addVectors(camera.position, ray.direction).project(camera);\n      pixelPosition.x = (pixelPosition.x + 1) * width * 0.5;\n      pixelPosition.y = (pixelPosition.y + 1) * height * 0.5;\n    }\n\n    const pickWndSize = Math.floor(\n      (params.pickWindowSize || DEFAULT_PICK_WINDOW_SIZE) * pixelRatio,\n    );\n    const halfPickWndSize = (pickWndSize - 1) / 2;\n    const x = Math.floor(clamp(pixelPosition.x - halfPickWndSize, 0, width));\n    const y = Math.floor(clamp(pixelPosition.y - halfPickWndSize, 0, height));\n\n    PointCloudOctreePicker.prepareRender(renderer, x, y, pickWndSize, pickMaterial, pickState);\n\n    const renderedNodes = PointCloudOctreePicker.render(\n      renderer,\n      camera,\n      pickMaterial,\n      octrees,\n      ray,\n      pickState,\n      params,\n    );\n\n    // Cleanup\n    pickMaterial.clearVisibleNodeTextureOffsets();\n\n    // Read back image and decode hit point\n    const pixels = PointCloudOctreePicker.readPixels(renderer, x, y, pickWndSize);\n    const hit = PointCloudOctreePicker.findHit(pixels, pickWndSize);\n    return PointCloudOctreePicker.getPickPoint(hit, renderedNodes);\n  }\n\n  private static prepareRender(\n    renderer: WebGLRenderer,\n    x: number,\n    y: number,\n    pickWndSize: number,\n    pickMaterial: PointCloudMaterial,\n    pickState: IPickState,\n  ) {\n    // Render the intersected nodes onto the pick render target, clipping to a small pick window.\n    renderer.setScissor(x, y, pickWndSize, pickWndSize);\n    renderer.setScissorTest(true);\n    renderer.state.buffers.depth.setTest(pickMaterial.depthTest);\n    renderer.state.buffers.depth.setMask(pickMaterial.depthWrite);\n    renderer.state.setBlending(NoBlending);\n\n    renderer.setRenderTarget(pickState.renderTarget);\n\n    // Save the current clear color and clear the renderer with black color and alpha 0.\n    renderer.getClearColor(this.clearColor);\n    const oldClearAlpha = renderer.getClearAlpha();\n    renderer.setClearColor(COLOR_BLACK, 0);\n    renderer.clear(true, true, true);\n    renderer.setClearColor(this.clearColor, oldClearAlpha);\n  }\n\n  private static render(\n    renderer: WebGLRenderer,\n    camera: Camera,\n    pickMaterial: PointCloudMaterial,\n    octrees: PointCloudOctree[],\n    ray: Ray,\n    pickState: IPickState,\n    params: Partial<PickParams>,\n  ): RenderedNode[] {\n    const renderedNodes: RenderedNode[] = [];\n    for (const octree of octrees) {\n      // Get all the octree nodes which intersect the picking ray. We only need to render those.\n      const nodes = PointCloudOctreePicker.nodesOnRay(octree, ray);\n      if (!nodes.length) {\n        continue;\n      }\n\n      PointCloudOctreePicker.updatePickMaterial(pickMaterial, octree.material, params);\n      pickMaterial.updateMaterial(octree, nodes, camera, renderer);\n\n      if (params.onBeforePickRender) {\n        params.onBeforePickRender(pickMaterial, pickState.renderTarget);\n      }\n\n      // Create copies of the nodes so we can render them differently than in the normal point cloud.\n      pickState.scene.children = PointCloudOctreePicker.createTempNodes(\n        octree,\n        nodes,\n        pickMaterial,\n        renderedNodes.length,\n      );\n\n      renderer.render(pickState.scene, camera);\n\n      nodes.forEach(node => renderedNodes.push({ node, octree }));\n    }\n    return renderedNodes;\n  }\n\n  private static nodesOnRay(octree: PointCloudOctree, ray: Ray): PointCloudOctreeNode[] {\n    const nodesOnRay: PointCloudOctreeNode[] = [];\n\n    const rayClone = ray.clone();\n    for (const node of octree.visibleNodes) {\n      const sphere = PointCloudOctreePicker.helperSphere\n        .copy(node.boundingSphere)\n        .applyMatrix4(octree.matrixWorld);\n\n      if (rayClone.intersectsSphere(sphere)) {\n        nodesOnRay.push(node);\n      }\n    }\n\n    return nodesOnRay;\n  }\n\n  private static readPixels(\n    renderer: WebGLRenderer,\n    x: number,\n    y: number,\n    pickWndSize: number,\n  ): Uint8Array {\n    // Read the pixel from the pick render target.\n    const pixels = new Uint8Array(4 * pickWndSize * pickWndSize);\n    renderer.readRenderTargetPixels(\n      renderer.getRenderTarget()!,\n      x,\n      y,\n      pickWndSize,\n      pickWndSize,\n      pixels,\n    );\n    renderer.setScissorTest(false);\n    renderer.setRenderTarget(null!);\n    return pixels;\n  }\n\n  private static createTempNodes(\n    octree: PointCloudOctree,\n    nodes: PointCloudOctreeNode[],\n    pickMaterial: PointCloudMaterial,\n    nodeIndexOffset: number,\n  ): Points[] {\n    const tempNodes: Points[] = [];\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      const sceneNode = node.sceneNode;\n      const tempNode = new Points(sceneNode.geometry, pickMaterial);\n      tempNode.matrix = sceneNode.matrix;\n      tempNode.matrixWorld = sceneNode.matrixWorld;\n      tempNode.matrixAutoUpdate = false;\n      tempNode.frustumCulled = false;\n      const nodeIndex = nodeIndexOffset + i + 1;\n      if (nodeIndex > 255) {\n        console.error('More than 255 nodes for pick are not supported.');\n      }\n      tempNode.onBeforeRender = PointCloudMaterial.makeOnBeforeRender(octree, node, nodeIndex);\n\n      tempNodes.push(tempNode);\n    }\n    return tempNodes;\n  }\n\n  private static updatePickMaterial(\n    pickMaterial: PointCloudMaterial,\n    nodeMaterial: PointCloudMaterial,\n    params: Partial<PickParams>,\n  ): void {\n    pickMaterial.pointSizeType = nodeMaterial.pointSizeType;\n    pickMaterial.shape = nodeMaterial.shape;\n    pickMaterial.size = nodeMaterial.size;\n    pickMaterial.minSize = nodeMaterial.minSize;\n    pickMaterial.maxSize = nodeMaterial.maxSize;\n    pickMaterial.classification = nodeMaterial.classification;\n    pickMaterial.useFilterByNormal = nodeMaterial.useFilterByNormal;\n    pickMaterial.filterByNormalThreshold = nodeMaterial.filterByNormalThreshold;\n\n    if (params.pickOutsideClipRegion) {\n      pickMaterial.clipMode = ClipMode.DISABLED;\n    } else {\n      pickMaterial.clipMode = nodeMaterial.clipMode;\n      pickMaterial.setClipBoxes(\n        nodeMaterial.clipMode === ClipMode.CLIP_OUTSIDE ? nodeMaterial.clipBoxes : [],\n      );\n    }\n  }\n\n  private static updatePickRenderTarget(\n    pickState: IPickState,\n    width: number,\n    height: number,\n  ): void {\n    if (pickState.renderTarget.width === width && pickState.renderTarget.height === height) {\n      return;\n    }\n\n    pickState.renderTarget.dispose();\n    pickState.renderTarget = PointCloudOctreePicker.makePickRenderTarget();\n    pickState.renderTarget.setSize(width, height);\n  }\n\n  private static makePickRenderTarget() {\n    return new WebGLRenderTarget(1, 1, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat,\n    });\n  }\n\n  private static findHit(pixels: Uint8Array, pickWndSize: number): PointCloudHit | null {\n    const ibuffer = new Uint32Array(pixels.buffer);\n\n    // Find closest hit inside pixelWindow boundaries\n    let min = Number.MAX_VALUE;\n    let hit: PointCloudHit | null = null;\n    for (let u = 0; u < pickWndSize; u++) {\n      for (let v = 0; v < pickWndSize; v++) {\n        const offset = u + v * pickWndSize;\n        const distance =\n          Math.pow(u - (pickWndSize - 1) / 2, 2) + Math.pow(v - (pickWndSize - 1) / 2, 2);\n\n        const pcIndex = pixels[4 * offset + 3];\n        pixels[4 * offset + 3] = 0;\n        const pIndex = ibuffer[offset];\n\n        if (pcIndex > 0 && distance < min) {\n          hit = {\n            pIndex: pIndex,\n            pcIndex: pcIndex - 1,\n          };\n          min = distance;\n        }\n      }\n    }\n    return hit;\n  }\n\n  private static getPickPoint(hit: PointCloudHit | null, nodes: RenderedNode[]): PickPoint | null {\n    if (!hit) {\n      return null;\n    }\n\n    const point: PickPoint = {};\n\n    const points = nodes[hit.pcIndex] && nodes[hit.pcIndex].node.sceneNode;\n    if (!points) {\n      return null;\n    }\n\n    point.pointCloud = nodes[hit.pcIndex].octree;\n\n    const attributes: BufferAttribute[] = (points.geometry as any).attributes;\n\n    for (const property in attributes) {\n      if (!attributes.hasOwnProperty(property)) {\n        continue;\n      }\n\n      const values = attributes[property];\n\n      // tslint:disable-next-line:prefer-switch\n      if (property === 'position') {\n        PointCloudOctreePicker.addPositionToPickPoint(point, hit, values, points);\n      } else if (property === 'normal') {\n        PointCloudOctreePicker.addNormalToPickPoint(point, hit, values, points);\n      } else if (property === 'indices') {\n        // TODO\n      } else {\n        if (values.itemSize === 1) {\n          point[property] = values.array[hit.pIndex];\n        } else {\n          const value: number[] = [];\n          for (let j = 0; j < values.itemSize; j++) {\n            value.push(values.array[values.itemSize * hit.pIndex + j]);\n          }\n          point[property] = value;\n        }\n      }\n    }\n\n    return point;\n  }\n\n  private static addPositionToPickPoint(\n    point: PickPoint,\n    hit: PointCloudHit,\n    values: BufferAttribute,\n    points: Points,\n  ): void {\n    point.position = new Vector3()\n      .fromBufferAttribute(values, hit.pIndex)\n      .applyMatrix4(points.matrixWorld);\n  }\n\n  private static addNormalToPickPoint(\n    point: PickPoint,\n    hit: PointCloudHit,\n    values: BufferAttribute,\n    points: Points,\n  ): void {\n    const normal = new Vector3().fromBufferAttribute(values, hit.pIndex);\n    const normal4 = new Vector4(normal.x, normal.y, normal.z, 0).applyMatrix4(points.matrixWorld);\n    normal.set(normal4.x, normal4.y, normal4.z);\n\n    point.normal = normal;\n  }\n\n  private static getPickState() {\n    const scene = new Scene();\n    scene.autoUpdate = false;\n\n    const material = new PointCloudMaterial();\n    material.pointColorType = PointColorType.POINT_INDEX;\n\n    return {\n      renderTarget: PointCloudOctreePicker.makePickRenderTarget(),\n      material: material,\n      scene: scene,\n    };\n  }\n}\n",null,"export function clamp(value: number, min: number, max: number): number {\n  return Math.min(Math.max(min, value), max);\n}\n",null,"import { Object3D } from 'three';\nimport { IPointCloudTreeNode } from './types';\n\nexport class PointCloudTree extends Object3D {\n  root: IPointCloudTreeNode | null = null;\n\n  initialized() {\n    return this.root !== null;\n  }\n}\n",null,"import { Box3, Matrix4, Vector3 } from 'three';\n\n/**\n * adapted from mhluska at https://github.com/mrdoob/three.js/issues/1561\n */\nexport function computeTransformedBoundingBox(box: Box3, transform: Matrix4): Box3 {\n  return new Box3().setFromPoints([\n    new Vector3(box.min.x, box.min.y, box.min.z).applyMatrix4(transform),\n    new Vector3(box.min.x, box.min.y, box.min.z).applyMatrix4(transform),\n    new Vector3(box.max.x, box.min.y, box.min.z).applyMatrix4(transform),\n    new Vector3(box.min.x, box.max.y, box.min.z).applyMatrix4(transform),\n    new Vector3(box.min.x, box.min.y, box.max.z).applyMatrix4(transform),\n    new Vector3(box.min.x, box.max.y, box.max.z).applyMatrix4(transform),\n    new Vector3(box.max.x, box.max.y, box.min.z).applyMatrix4(transform),\n    new Vector3(box.max.x, box.min.y, box.max.z).applyMatrix4(transform),\n    new Vector3(box.max.x, box.max.y, box.max.z).applyMatrix4(transform),\n  ]);\n}\n\nexport function createChildAABB(aabb: Box3, index: number): Box3 {\n  const min = aabb.min.clone();\n  const max = aabb.max.clone();\n  const size = new Vector3().subVectors(max, min);\n\n  // tslint:disable-next-line:no-bitwise\n  if ((index & 0b0001) > 0) {\n    min.z += size.z / 2;\n  } else {\n    max.z -= size.z / 2;\n  }\n\n  // tslint:disable-next-line:no-bitwise\n  if ((index & 0b0010) > 0) {\n    min.y += size.y / 2;\n  } else {\n    max.y -= size.y / 2;\n  }\n\n  // tslint:disable-next-line:no-bitwise\n  if ((index & 0b0100) > 0) {\n    min.x += size.x / 2;\n  } else {\n    max.x -= size.x / 2;\n  }\n\n  return new Box3(min, max);\n}\n",null,"import { OctreeGeometry } from './loading2/OctreeGeometry';\r\nimport { loadOctree } from './loading2/load-octree';\r\nimport {\r\n  Box3,\r\n  Camera,\r\n  Frustum,\r\n  Matrix4,\r\n  OrthographicCamera,\r\n  PerspectiveCamera,\r\n  Ray,\r\n  Vector2,\r\n  Vector3,\r\n  WebGLRenderer,\r\n} from 'three';\r\nimport {\r\n  DEFAULT_POINT_BUDGET,\r\n  MAX_LOADS_TO_GPU,\r\n  MAX_NUM_NODES_LOADING,\r\n  PERSPECTIVE_CAMERA,\r\n} from './constants';\r\nimport { FEATURES } from './features';\r\nimport { GetUrlFn, loadPOC } from './loading';\r\nimport { ClipMode } from './materials';\r\nimport { PointCloudOctree } from './point-cloud-octree';\r\nimport { PointCloudOctreeGeometryNode } from './point-cloud-octree-geometry-node';\r\nimport { PointCloudOctreeNode } from './point-cloud-octree-node';\r\nimport { PickParams, PointCloudOctreePicker } from './point-cloud-octree-picker';\r\nimport { isGeometryNode, isTreeNode } from './type-predicates';\r\nimport { IPointCloudTreeNode, IPotree, IVisibilityUpdateResult, PickPoint } from './types';\r\nimport { BinaryHeap } from './utils/binary-heap';\r\nimport { Box3Helper } from './utils/box3-helper';\r\nimport { LRU } from './utils/lru';\r\n\r\n\r\nexport class QueueItem {\r\n  constructor(\r\n    public pointCloudIndex: number,\r\n    public weight: number,\r\n    public node: IPointCloudTreeNode,\r\n    public parent?: IPointCloudTreeNode | null,\r\n  ) {}\r\n}\r\n\r\nexport class Potree implements IPotree {\r\n  private static picker: PointCloudOctreePicker | undefined;\r\n  private _pointBudget: number = DEFAULT_POINT_BUDGET;\r\n  private _rendererSize: Vector2 = new Vector2();\r\n\r\n  maxNumNodesLoading: number = MAX_NUM_NODES_LOADING;\r\n  features = FEATURES;\r\n  lru = new LRU(this._pointBudget);\r\n\r\n  async loadPointCloud(\r\n    url: string,\r\n    getUrl: GetUrlFn,\r\n    xhrRequest = (input: RequestInfo, init?: RequestInit) => fetch(input, init),\r\n  ): Promise<PointCloudOctree> {\r\n    if (url === \"cloud.js\") {\r\n      return await loadPOC(url, getUrl, xhrRequest).then(geometry => new PointCloudOctree(this, geometry));\r\n    } else if (url === \"metadata.json\") {\r\n      // throw new Error(\"Not implemented\")\r\n      return await loadOctree(url, getUrl, xhrRequest).then((geometry:OctreeGeometry) => new PointCloudOctree(this, geometry));\r\n    }\r\n    throw new Error(\"Unsupported file type\");\r\n  }\r\n\r\n  updatePointClouds(\r\n    pointClouds: PointCloudOctree[],\r\n    camera: Camera,\r\n    renderer: WebGLRenderer,\r\n  ): IVisibilityUpdateResult {\r\n    const result = this.updateVisibility(pointClouds, camera, renderer);\r\n\r\n    for (let i = 0; i < pointClouds.length; i++) {\r\n      const pointCloud = pointClouds[i];\r\n      if (pointCloud.disposed) {\r\n        continue;\r\n      }\r\n\r\n      pointCloud.material.updateMaterial(pointCloud, pointCloud.visibleNodes, camera, renderer);\r\n      pointCloud.updateVisibleBounds();\r\n      pointCloud.updateBoundingBoxes();\r\n    }\r\n\r\n    this.lru.freeMemory();\r\n\r\n    return result;\r\n  }\r\n\r\n  static pick(\r\n    pointClouds: PointCloudOctree[],\r\n    renderer: WebGLRenderer,\r\n    camera: Camera,\r\n    ray: Ray,\r\n    params: Partial<PickParams> = {},\r\n  ): PickPoint | null {\r\n    Potree.picker = Potree.picker || new PointCloudOctreePicker();\r\n    return Potree.picker.pick(renderer, camera, ray, pointClouds, params);\r\n  }\r\n\r\n  get pointBudget(): number {\r\n    return this._pointBudget;\r\n  }\r\n\r\n  set pointBudget(value: number) {\r\n    if (value !== this._pointBudget) {\r\n      this._pointBudget = value;\r\n      this.lru.pointBudget = value;\r\n      this.lru.freeMemory();\r\n    }\r\n  }\r\n\r\n  private updateVisibility(\r\n    pointClouds: PointCloudOctree[],\r\n    camera: Camera,\r\n    renderer: WebGLRenderer,\r\n  ): IVisibilityUpdateResult {\r\n    let numVisiblePoints = 0;\r\n\r\n    const visibleNodes: PointCloudOctreeNode[] = [];\r\n    const unloadedGeometry: PointCloudOctreeGeometryNode[] = [];\r\n\r\n    // calculate object space frustum and cam pos and setup priority queue\r\n    const { frustums, cameraPositions, priorityQueue } = this.updateVisibilityStructures(\r\n      pointClouds,\r\n      camera,\r\n    );\r\n\r\n    let loadedToGPUThisFrame = 0;\r\n    let exceededMaxLoadsToGPU = false;\r\n    let nodeLoadFailed = false;\r\n    let queueItem: QueueItem | undefined;\r\n\r\n    while ((queueItem = priorityQueue.pop()) !== undefined) {\r\n      let node = queueItem.node;\r\n\r\n      // If we will end up with too many points, we stop right away.\r\n      if (numVisiblePoints + node.numPoints > this.pointBudget) {\r\n        break;\r\n      }\r\n\r\n      const pointCloudIndex = queueItem.pointCloudIndex;\r\n      const pointCloud = pointClouds[pointCloudIndex];\r\n\r\n      const maxLevel = pointCloud.maxLevel !== undefined ? pointCloud.maxLevel : Infinity;\r\n\r\n      if (\r\n        node.level > maxLevel ||\r\n        !frustums[pointCloudIndex].intersectsBox(node.boundingBox) ||\r\n        this.shouldClip(pointCloud, node.boundingBox)\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      numVisiblePoints += node.numPoints;\r\n      pointCloud.numVisiblePoints += node.numPoints;\r\n\r\n      const parentNode = queueItem.parent;\r\n\r\n      if (isGeometryNode(node) && (!parentNode || isTreeNode(parentNode))) {\r\n        if (node.loaded && loadedToGPUThisFrame < MAX_LOADS_TO_GPU) {\r\n          node = pointCloud.toTreeNode(node, parentNode);\r\n          loadedToGPUThisFrame++;\r\n        } else if (!node.failed) {\r\n          if (node.loaded && loadedToGPUThisFrame >= MAX_LOADS_TO_GPU) {\r\n            exceededMaxLoadsToGPU = true;\r\n          }\r\n          unloadedGeometry.push(node);\r\n          pointCloud.visibleGeometry.push(node);\r\n        } else {\r\n          nodeLoadFailed = true;\r\n          continue;\r\n        }\r\n      }\r\n\r\n      if (isTreeNode(node)) {\r\n        this.updateTreeNodeVisibility(pointCloud, node, visibleNodes);\r\n        pointCloud.visibleGeometry.push(node.geometryNode);\r\n      }\r\n\r\n      const halfHeight =\r\n        0.5 * renderer.getSize(this._rendererSize).height * renderer.getPixelRatio();\r\n\r\n      this.updateChildVisibility(\r\n        queueItem,\r\n        priorityQueue,\r\n        pointCloud,\r\n        node,\r\n        cameraPositions[pointCloudIndex],\r\n        camera,\r\n        halfHeight,\r\n      );\r\n    } // end priority queue loop\r\n\r\n    const numNodesToLoad = Math.min(this.maxNumNodesLoading, unloadedGeometry.length);\r\n    const nodeLoadPromises: Promise<void>[] = [];\r\n    for (let i = 0; i < numNodesToLoad; i++) {\r\n      nodeLoadPromises.push(unloadedGeometry[i].load());\r\n    }\r\n\r\n    return {\r\n      visibleNodes: visibleNodes,\r\n      numVisiblePoints: numVisiblePoints,\r\n      exceededMaxLoadsToGPU: exceededMaxLoadsToGPU,\r\n      nodeLoadFailed: nodeLoadFailed,\r\n      nodeLoadPromises: nodeLoadPromises,\r\n    };\r\n  }\r\n\r\n  private updateTreeNodeVisibility(\r\n    pointCloud: PointCloudOctree,\r\n    node: PointCloudOctreeNode,\r\n    visibleNodes: IPointCloudTreeNode[],\r\n  ): void {\r\n    this.lru.touch(node.geometryNode);\r\n\r\n    const sceneNode = node.sceneNode;\r\n    sceneNode.visible = true;\r\n    sceneNode.material = pointCloud.material;\r\n    sceneNode.updateMatrix();\r\n    sceneNode.matrixWorld.multiplyMatrices(pointCloud.matrixWorld, sceneNode.matrix);\r\n\r\n    visibleNodes.push(node);\r\n    pointCloud.visibleNodes.push(node);\r\n\r\n    this.updateBoundingBoxVisibility(pointCloud, node);\r\n  }\r\n\r\n  private updateChildVisibility(\r\n    queueItem: QueueItem,\r\n    priorityQueue: BinaryHeap<QueueItem>,\r\n    pointCloud: PointCloudOctree,\r\n    node: IPointCloudTreeNode,\r\n    cameraPosition: Vector3,\r\n    camera: Camera,\r\n    halfHeight: number,\r\n  ): void {\r\n    const children = node.children;\r\n    for (let i = 0; i < children.length; i++) {\r\n      const child = children[i];\r\n      if (child === null) {\r\n        continue;\r\n      }\r\n\r\n      const sphere = child.boundingSphere;\r\n      const distance = sphere.center.distanceTo(cameraPosition);\r\n      const radius = sphere.radius;\r\n\r\n      let projectionFactor = 0.0;\r\n\r\n      if (camera.type === PERSPECTIVE_CAMERA) {\r\n        const perspective = camera as PerspectiveCamera;\r\n        const fov = (perspective.fov * Math.PI) / 180.0;\r\n        const slope = Math.tan(fov / 2.0);\r\n        projectionFactor = halfHeight / (slope * distance);\r\n      } else {\r\n        const orthographic = camera as OrthographicCamera;\r\n        projectionFactor = (2 * halfHeight) / (orthographic.top - orthographic.bottom);\r\n      }\r\n\r\n      const screenPixelRadius = radius * projectionFactor;\r\n\r\n      // Don't add the node if it'll be too small on the screen.\r\n      if (screenPixelRadius < pointCloud.minNodePixelSize) {\r\n        continue;\r\n      }\r\n\r\n      // Nodes which are larger will have priority in loading/displaying.\r\n      const weight = distance < radius ? Number.MAX_VALUE : screenPixelRadius + 1 / distance;\r\n\r\n      priorityQueue.push(new QueueItem(queueItem.pointCloudIndex, weight, child, node));\r\n    }\r\n  }\r\n\r\n  private updateBoundingBoxVisibility(\r\n    pointCloud: PointCloudOctree,\r\n    node: PointCloudOctreeNode,\r\n  ): void {\r\n    if (pointCloud.showBoundingBox && !node.boundingBoxNode) {\r\n      const boxHelper = new Box3Helper(node.boundingBox);\r\n      boxHelper.matrixAutoUpdate = false;\r\n      pointCloud.boundingBoxNodes.push(boxHelper);\r\n      node.boundingBoxNode = boxHelper;\r\n      node.boundingBoxNode.matrix.copy(pointCloud.matrixWorld);\r\n    } else if (pointCloud.showBoundingBox && node.boundingBoxNode) {\r\n      node.boundingBoxNode.visible = true;\r\n      node.boundingBoxNode.matrix.copy(pointCloud.matrixWorld);\r\n    } else if (!pointCloud.showBoundingBox && node.boundingBoxNode) {\r\n      node.boundingBoxNode.visible = false;\r\n    }\r\n  }\r\n\r\n  private shouldClip(pointCloud: PointCloudOctree, boundingBox: Box3): boolean {\r\n    const material = pointCloud.material;\r\n\r\n    if (material.numClipBoxes === 0 || material.clipMode !== ClipMode.CLIP_OUTSIDE) {\r\n      return false;\r\n    }\r\n\r\n    const box2 = boundingBox.clone();\r\n    pointCloud.updateMatrixWorld(true);\r\n    box2.applyMatrix4(pointCloud.matrixWorld);\r\n\r\n    const clipBoxes = material.clipBoxes;\r\n    for (let i = 0; i < clipBoxes.length; i++) {\r\n      const clipMatrixWorld = clipBoxes[i].matrix;\r\n      const clipBoxWorld = new Box3(\r\n        new Vector3(-0.5, -0.5, -0.5),\r\n        new Vector3(0.5, 0.5, 0.5),\r\n      ).applyMatrix4(clipMatrixWorld);\r\n      if (box2.intersectsBox(clipBoxWorld)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private updateVisibilityStructures = (() => {\r\n    const frustumMatrix = new Matrix4();\r\n    const inverseWorldMatrix = new Matrix4();\r\n    const cameraMatrix = new Matrix4();\r\n\r\n    return (\r\n      pointClouds: PointCloudOctree[],\r\n      camera: Camera,\r\n    ): {\r\n      frustums: Frustum[];\r\n      cameraPositions: Vector3[];\r\n      priorityQueue: BinaryHeap<QueueItem>;\r\n    } => {\r\n      const frustums: Frustum[] = [];\r\n      const cameraPositions: Vector3[] = [];\r\n      const priorityQueue = new BinaryHeap<QueueItem>(x => 1 / x.weight);\r\n\r\n      for (let i = 0; i < pointClouds.length; i++) {\r\n        const pointCloud = pointClouds[i];\r\n\r\n        if (!pointCloud.initialized()) {\r\n          continue;\r\n        }\r\n\r\n        pointCloud.numVisiblePoints = 0;\r\n        pointCloud.visibleNodes = [];\r\n        pointCloud.visibleGeometry = [];\r\n\r\n        camera.updateMatrixWorld(false);\r\n\r\n        // Furstum in object space.\r\n        const inverseViewMatrix = camera.matrixWorldInverse;\r\n        const worldMatrix = pointCloud.matrixWorld;\r\n        frustumMatrix\r\n          .identity()\r\n          .multiply(camera.projectionMatrix)\r\n          .multiply(inverseViewMatrix)\r\n          .multiply(worldMatrix);\r\n        frustums.push(new Frustum().setFromProjectionMatrix(frustumMatrix));\r\n\r\n        // Camera position in object space\r\n        inverseWorldMatrix.copy(worldMatrix).invert();\r\n        cameraMatrix\r\n          .identity()\r\n          .multiply(inverseWorldMatrix)\r\n          .multiply(camera.matrixWorld);\r\n        cameraPositions.push(new Vector3().setFromMatrixPosition(cameraMatrix));\r\n\r\n        if (pointCloud.visible && pointCloud.root !== null) {\r\n          const weight = Number.MAX_VALUE;\r\n          priorityQueue.push(new QueueItem(i, weight, pointCloud.root));\r\n        }\r\n\r\n        // Hide any previously visible nodes. We will later show only the needed ones.\r\n        if (isTreeNode(pointCloud.root)) {\r\n          pointCloud.hideDescendants(pointCloud?.root?.sceneNode);\r\n        }\r\n\r\n        for (const boundingBoxNode of pointCloud.boundingBoxNodes) {\r\n          boundingBoxNode.visible = false;\r\n        }\r\n      }\r\n\r\n      return { frustums, cameraPositions, priorityQueue };\r\n    };\r\n  })();\r\n}\r\n",null,"import { OctreeLoader } from './OctreeLoader';\nimport { GetUrlFn, XhrRequest } from '../loading/types';\n\nexport async function loadOctree(\n    url: string,\n    getUrl: GetUrlFn,\n    xhrRequest: XhrRequest,\n) {\n    const trueUrl = await getUrl(url);\n    const loader = new OctreeLoader()\n    const {geometry} = await loader.load(trueUrl, xhrRequest)\n    return geometry\n}",null,"import { XhrRequest } from './../loading/types';\nimport { BufferAttribute, BufferGeometry, Vector3 } from \"three\";\nimport {PointAttribute, PointAttributes, PointAttributeTypes} from \"./PointAttributes\";\nimport { Box3, Sphere } from \"three\";\nimport { WorkerPool, WorkerType } from \"./WorkerPool\";\nimport { OctreeGeometryNode } from './OctreeGeometryNode';\nimport { OctreeGeometry } from './OctreeGeometry';\n\nexport class NodeLoader{\n\n\tattributes?: PointAttributes;\n\tscale?: [number, number, number];\n\toffset?: [number, number, number];\n\t\n\n\tconstructor(public url:string, public workerPool:WorkerPool, public metadata: Metadata){\n\t}\n\n\tasync load(node: OctreeGeometryNode){\n\n\t\tif(node.loaded || node.loading){\n\t\t\treturn;\n\t\t}\n\n\t\tnode.loading = true;\n\t\t// TODO: Need to put the numNodesLoading to the pco\n\t\tnode.octreeGeometry.numNodesLoading++;\n\n\t\ttry{\n\t\t\tif(node.nodeType === 2){ // TODO: Investigate\n\t\t\t\tawait this.loadHierarchy(node);\n\t\t\t}\n\n\t\t\tlet {byteOffset, byteSize} = node;\n\t\t\t\n\t\t\tif (byteOffset === undefined || byteSize === undefined) {\n\t\t\t\tthrow new Error(\"byteOffset and byteSize are required\");\n\t\t\t}\n\n\t\t\tlet urlOctree = `${this.url}/../octree.bin`;\n\n\t\t\tlet first = byteOffset;\n\t\t\tlet last = byteOffset + byteSize - BigInt(1);\n\n\t\t\tlet buffer;\n\n\t\t\tif(byteSize === BigInt(0)){\n\t\t\t\tbuffer = new ArrayBuffer(0);\n\t\t\t\tconsole.warn(`loaded node with 0 bytes: ${node.name}`);\n\t\t\t}else{\n\t\t\t\tlet response = await fetch(urlOctree, {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'content-type': 'multipart/byteranges',\n\t\t\t\t\t\t'Range': `bytes=${first}-${last}`,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tbuffer = await response.arrayBuffer();\n\t\t\t}\n\n\t\t\tconst workerType = (this.metadata.encoding === \"BROTLI\") ? WorkerType.DECODER_WORKER_BROTLI : WorkerType.DECODER_WORKER;\n\t\t\tconst worker = this.workerPool.getWorker(workerType)\n\n\t\t\tworker.onmessage = (e) => {\n\n\t\t\t\tlet data = e.data;\n\t\t\t\tlet buffers = data.attributeBuffers;\n\n\t\t\t\tthis.workerPool.returnWorker(workerType, worker);\n\n\t\t\t\tlet geometry = new BufferGeometry();\n\t\t\t\t\n\t\t\t\tfor(let property in buffers){\n\n\t\t\t\t\tlet buffer = buffers[property].buffer;\n\n\t\t\t\t\tif(property === \"position\"){\n\t\t\t\t\t\tgeometry.setAttribute('position', new BufferAttribute(new Float32Array(buffer), 3));\n\t\t\t\t\t}else if(property === \"rgba\"){\n\t\t\t\t\t\tgeometry.setAttribute('rgba', new BufferAttribute(new Uint8Array(buffer), 4, true));\n\t\t\t\t\t}else if(property === \"NORMAL\"){\n\t\t\t\t\t\t//geometry.setAttribute('rgba', new BufferAttribute(new Uint8Array(buffer), 4, true));\n\t\t\t\t\t\tgeometry.setAttribute('normal', new BufferAttribute(new Float32Array(buffer), 3));\n\t\t\t\t\t}else if (property === \"INDICES\") {\n\t\t\t\t\t\tlet bufferAttribute = new BufferAttribute(new Uint8Array(buffer), 4);\n\t\t\t\t\t\tbufferAttribute.normalized = true;\n\t\t\t\t\t\tgeometry.setAttribute('indices', bufferAttribute);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tconst bufferAttribute: BufferAttribute & {\n\t\t\t\t\t\t\tpotree?: object\n\t\t\t\t\t\t} = new BufferAttribute(new Float32Array(buffer), 1);\n\n\t\t\t\t\t\tlet batchAttribute = buffers[property].attribute;\n\t\t\t\t\t\tbufferAttribute.potree = {\n\t\t\t\t\t\t\toffset: buffers[property].offset,\n\t\t\t\t\t\t\tscale: buffers[property].scale,\n\t\t\t\t\t\t\tpreciseBuffer: buffers[property].preciseBuffer,\n\t\t\t\t\t\t\trange: batchAttribute.range,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tgeometry.setAttribute(property, bufferAttribute);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// indices ??\n\n\t\t\t\tnode.density = data.density;\n\t\t\t\tnode.geometry = geometry;\n\t\t\t\tnode.loaded = true;\n\t\t\t\tnode.loading = false;\n\t\t\t\t// Potree.numNodesLoading--;\n\t\t\t\tnode.octreeGeometry.numNodesLoading--;\n\t\t\t};\n\n\t\t\tlet pointAttributes = node.octreeGeometry.pointAttributes;\n\t\t\tlet scale = node.octreeGeometry.scale;\n\n\t\t\tlet box = node.boundingBox;\n\t\t\tlet min = node.octreeGeometry.offset.clone().add(box.min);\n\t\t\tlet size = box.max.clone().sub(box.min);\n\t\t\tlet max = min.clone().add(size);\n\t\t\tlet numPoints = node.numPoints;\n\n\t\t\tlet offset = node.octreeGeometry.loader.offset;\n\n\t\t\tlet message = {\n\t\t\t\tname: node.name,\n\t\t\t\tbuffer: buffer,\n\t\t\t\tpointAttributes: pointAttributes,\n\t\t\t\tscale: scale,\n\t\t\t\tmin: min,\n\t\t\t\tmax: max,\n\t\t\t\tsize: size,\n\t\t\t\toffset: offset,\n\t\t\t\tnumPoints: numPoints\n\t\t\t};\n\n\t\t\tworker.postMessage(message, [message.buffer]);\n\t\t}catch(e){\n\t\t\tnode.loaded = false;\n\t\t\tnode.loading = false;\n\t\t\tnode.octreeGeometry.numNodesLoading--;\n\n\t\t\t// console.log(`failed to load ${node.name}`);\n\t\t\t// console.log(e);\n\t\t\t// console.log(`trying again!`);\n\t\t}\n\t}\n\n\tparseHierarchy(node:OctreeGeometryNode, buffer:ArrayBuffer){\n\n\t\tlet view = new DataView(buffer);\n\n\t\tlet bytesPerNode = 22;\n\t\tlet numNodes = buffer.byteLength / bytesPerNode;\n\n\t\tlet octree = node.octreeGeometry;\n\t\t// let nodes = [node];\n\t\tlet nodes: OctreeGeometryNode[] = new Array(numNodes);\n\t\tnodes[0] = node;\n\t\tlet nodePos = 1;\n\n\t\tfor(let i = 0; i < numNodes; i++){\n\t\t\tlet current = nodes[i];\n\n\t\t\tlet type = view.getUint8(i * bytesPerNode + 0);\n\t\t\tlet childMask = view.getUint8(i * bytesPerNode + 1);\n\t\t\tlet numPoints = view.getUint32(i * bytesPerNode + 2, true);\n\t\t\tlet byteOffset = view.getBigInt64(i * bytesPerNode + 6, true);\n\t\t\tlet byteSize = view.getBigInt64(i * bytesPerNode + 14, true);\n\n\t\t\t// if(byteSize === 0n){\n\t\t\t// \t// debugger;\n\t\t\t// }\n\n\n\t\t\tif(current.nodeType === 2){\n\t\t\t\t// replace proxy with real node\n\t\t\t\tcurrent.byteOffset = byteOffset;\n\t\t\t\tcurrent.byteSize = byteSize;\n\t\t\t\tcurrent.numPoints = numPoints;\n\t\t\t}else if(type === 2){\n\t\t\t\t// load proxy\n\t\t\t\tcurrent.hierarchyByteOffset = byteOffset;\n\t\t\t\tcurrent.hierarchyByteSize = byteSize;\n\t\t\t\tcurrent.numPoints = numPoints;\n\t\t\t}else{\n\t\t\t\t// load real node \n\t\t\t\tcurrent.byteOffset = byteOffset;\n\t\t\t\tcurrent.byteSize = byteSize;\n\t\t\t\tcurrent.numPoints = numPoints;\n\t\t\t}\n\t\t\t\n\t\t\tcurrent.nodeType = type;\n\n\t\t\tif(current.nodeType === 2){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor(let childIndex = 0; childIndex < 8; childIndex++){\n\t\t\t\tlet childExists = ((1 << childIndex) & childMask) !== 0;\n\n\t\t\t\tif(!childExists){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet childName = current.name + childIndex;\n\n\t\t\t\tlet childAABB = createChildAABB(current.boundingBox, childIndex);\n\t\t\t\tlet child = new OctreeGeometryNode(childName, octree, childAABB);\n\t\t\t\tchild.name = childName;\n\t\t\t\tchild.spacing = current.spacing / 2;\n\t\t\t\tchild.level = current.level + 1;\n\n\t\t\t\t(current.children as any)[childIndex] = child;\n\t\t\t\tchild.parent = current;\n\n\t\t\t\t// nodes.push(child);\n\t\t\t\tnodes[nodePos] = child;\n\t\t\t\tnodePos++;\n\t\t\t}\n\n\t\t\t// if((i % 500) === 0){\n\t\t\t// \tyield;\n\t\t\t// }\n\t\t}\n\n\t\t// if(duration > 20){\n\t\t// \tlet msg = `duration: ${duration}ms, numNodes: ${numNodes}`;\n\t\t// \tconsole.log(msg);\n\t\t// }\n\t}\n\n\tasync loadHierarchy(node: OctreeGeometryNode){\n\n\t\tlet {hierarchyByteOffset, hierarchyByteSize} = node;\n\n\t\tif (hierarchyByteOffset === undefined || hierarchyByteSize === undefined) {\n\t\t\tthrow new Error(`hierarchyByteOffset and hierarchyByteSize are undefined for node ${node.name}`);\n\t\t}\n\n\t\tlet hierarchyPath = `${this.url}/../hierarchy.bin`;\n\t\t\n\t\tlet first = hierarchyByteOffset;\n\t\tlet last = first + hierarchyByteSize - BigInt(1);\n\n\t\tlet response = await fetch(hierarchyPath, {\n\t\t\theaders: {\n\t\t\t\t'content-type': 'multipart/byteranges',\n\t\t\t\t'Range': `bytes=${first}-${last}`,\n\t\t\t},\n\t\t});\n\n\t\tlet buffer = await response.arrayBuffer();\n\n\t\tthis.parseHierarchy(node, buffer);\n\t}\n\n}\n\nlet tmpVec3 = new Vector3();\nfunction createChildAABB(aabb:Box3, index:number){\n\tlet min = aabb.min.clone();\n\tlet max = aabb.max.clone();\n\tlet size = tmpVec3.subVectors(max, min);\n\n\tif ((index & 0b0001) > 0) {\n\t\tmin.z += size.z / 2;\n\t} else {\n\t\tmax.z -= size.z / 2;\n\t}\n\n\tif ((index & 0b0010) > 0) {\n\t\tmin.y += size.y / 2;\n\t} else {\n\t\tmax.y -= size.y / 2;\n\t}\n\t\n\tif ((index & 0b0100) > 0) {\n\t\tmin.x += size.x / 2;\n\t} else {\n\t\tmax.x -= size.x / 2;\n\t}\n\n\treturn new Box3(min, max);\n}\n\nlet typenameTypeattributeMap = {\n\t\"double\": PointAttributeTypes.DATA_TYPE_DOUBLE,\n\t\"float\": PointAttributeTypes.DATA_TYPE_FLOAT,\n\t\"int8\": PointAttributeTypes.DATA_TYPE_INT8,\n\t\"uint8\": PointAttributeTypes.DATA_TYPE_UINT8,\n\t\"int16\": PointAttributeTypes.DATA_TYPE_INT16,\n\t\"uint16\": PointAttributeTypes.DATA_TYPE_UINT16,\n\t\"int32\": PointAttributeTypes.DATA_TYPE_INT32,\n\t\"uint32\": PointAttributeTypes.DATA_TYPE_UINT32,\n\t\"int64\": PointAttributeTypes.DATA_TYPE_INT64,\n\t\"uint64\": PointAttributeTypes.DATA_TYPE_UINT64,\n}\n\ntype AttributeType = keyof typeof typenameTypeattributeMap;\n\nexport interface Attribute {\n\tname: string;\n\tdescription: string;\n\tsize: number;\n\tnumElements: number;\n\ttype: AttributeType;\n\tmin: number[];\n\tmax: number[];\n}\n\nexport interface Metadata {\n\tversion: string;\n\tname: string;\n\tdescription: string;\n\tpoints: number;\n\tprojection: string;\n\thierarchy: {\n\t\tfirstChunkSize: number;\n\t\tstepSize: number;\n\t\tdepth: number;\n\t},\n\toffset: [number, number, number],\n\tscale: [number, number, number],\n\tspacing: number,\n\tboundingBox: {\n\t\tmin: [number, number, number],\n\t\tmax: [number, number, number],\n\t},\n\tencoding: string;\n\tattributes: Attribute[];\n}\n\nexport class OctreeLoader{\n\n\tworkerPool: WorkerPool = new WorkerPool();\n\n\tconstructor() {\n\t}\n\n\tstatic parseAttributes(jsonAttributes:Attribute[]){\n\n\t\tlet attributes = new PointAttributes();\n\n\t\t// Replacements object for string to string\n\t\tlet replacements: {[key: string]: string} = {\n\t\t\t\"rgb\": \"rgba\",\n\t\t};\n\n\t\tfor (const jsonAttribute of jsonAttributes) {\n\t\t\tlet {name, numElements, min, max} = jsonAttribute;\n\n\t\t\tlet type = typenameTypeattributeMap[jsonAttribute.type]; // Fix the typing, currently jsonAttribute has type \"never\"\n\n\t\t\tlet potreeAttributeName = replacements[name] ? replacements[name] : name;\n\n\t\t\tlet attribute = new PointAttribute(potreeAttributeName, type, numElements);\n\n\t\t\tif(numElements === 1){\n\t\t\t\tattribute.range = [min[0], max[0]];\n\t\t\t}else{\n\t\t\t\tattribute.range = [min, max];\n\t\t\t}\n\n\t\t\tif (name === \"gps-time\") { // HACK: Guard against bad gpsTime range in metadata, see potree/potree#909\n\t\t\t\tif (typeof attribute.range[0] === \"number\" && attribute.range[0] === attribute.range[1]) {\n\t\t\t\t\tattribute.range[1] += 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tattribute.initialRange = attribute.range;\n\n\t\t\tattributes.add(attribute);\n\t\t}\n\n\t\t{\n\t\t\t// check if it has normals\n\t\t\tlet hasNormals = \n\t\t\t\tattributes.attributes.find(a => a.name === \"NormalX\") !== undefined &&\n\t\t\t\tattributes.attributes.find(a => a.name === \"NormalY\") !== undefined &&\n\t\t\t\tattributes.attributes.find(a => a.name === \"NormalZ\") !== undefined;\n\n\t\t\tif(hasNormals){\n\t\t\t\tlet vector = {\n\t\t\t\t\tname: \"NORMAL\",\n\t\t\t\t\tattributes: [\"NormalX\", \"NormalY\", \"NormalZ\"],\n\t\t\t\t};\n\t\t\t\tattributes.addVector(vector);\n\t\t\t}\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tasync load(url:string, xhrRequest: XhrRequest){ // Previously a static method\n\n\t\tlet response = await xhrRequest(url);\n\t\tlet metadata: Metadata = await response.json();\n\n\t\tlet attributes = OctreeLoader.parseAttributes(metadata.attributes);\n\t\t// console.log(attributes)\n\n\t\tlet loader = new NodeLoader(url, this.workerPool, metadata);\n\t\tloader.attributes = attributes;\n\t\tloader.scale = metadata.scale;\n\t\tloader.offset = metadata.offset;\n\n\t\tlet octree = new OctreeGeometry(loader, new Box3(new Vector3(...metadata.boundingBox.min), new Vector3(...metadata.boundingBox.max)));\n\t\toctree.url = url;\n\t\toctree.spacing = metadata.spacing;\n\t\toctree.scale = metadata.scale;\n\n\t\tlet min = new Vector3(...metadata.boundingBox.min);\n\t\tlet max = new Vector3(...metadata.boundingBox.max);\n\t\tlet boundingBox = new Box3(min, max);\n\n\t\tlet offset = min.clone();\n\t\tboundingBox.min.sub(offset);\n\t\tboundingBox.max.sub(offset);\n\n\t\toctree.projection = metadata.projection;\n\t\toctree.boundingBox = boundingBox;\n\t\toctree.tightBoundingBox = boundingBox.clone();\n\t\toctree.boundingSphere = boundingBox.getBoundingSphere(new Sphere());\n\t\toctree.tightBoundingSphere = boundingBox.getBoundingSphere(new Sphere());\n\t\toctree.offset = offset;\n\t\toctree.pointAttributes = OctreeLoader.parseAttributes(metadata.attributes);\n\n\t\tlet root = new OctreeGeometryNode(\"r\", octree, boundingBox);\n\t\troot.level = 0;\n\t\troot.nodeType = 2;\n\t\troot.hierarchyByteOffset = BigInt(0);\n\t\troot.hierarchyByteSize = BigInt(metadata.hierarchy.firstChunkSize);\n\t\troot.spacing = octree.spacing;\n\t\troot.byteOffset = BigInt(0); // Originally 0\n\n\t\toctree.root = root;\n\n\t\tloader.load(root);\n\n\t\tlet result = {\n\t\t\tgeometry: octree,\n\t\t};\n\n\t\treturn result;\n\n\t}\n\n};",null,"/**\n * Some types of possible point attribute data formats\n *\n * @class\n */\nconst PointAttributeTypes:PointAttributeTypesType = {\n\tDATA_TYPE_DOUBLE: {ordinal: 0, name: \"double\", size: 8},\n\tDATA_TYPE_FLOAT:  {ordinal: 1, name: \"float\",  size: 4},\n\tDATA_TYPE_INT8:   {ordinal: 2, name: \"int8\",   size: 1},\n\tDATA_TYPE_UINT8:  {ordinal: 3, name: \"uint8\",  size: 1},\n\tDATA_TYPE_INT16:  {ordinal: 4, name: \"int16\",  size: 2},\n\tDATA_TYPE_UINT16: {ordinal: 5, name: \"uint16\", size: 2},\n\tDATA_TYPE_INT32:  {ordinal: 6, name: \"int32\",  size: 4},\n\tDATA_TYPE_UINT32: {ordinal: 7, name: \"uint32\", size: 4},\n\tDATA_TYPE_INT64:  {ordinal: 8, name: \"int64\",  size: 8},\n\tDATA_TYPE_UINT64: {ordinal: 9, name: \"uint64\", size: 8}\n};\n\ntype PointAttributeTypesType = {\n\t[key: string]: PointAttributeTypeType;\n};\n\ntype PointAttributeTypeType = {\n\tordinal: number;\n\tname: string;\n\tsize: number;\n};\n\nlet i = 0;\nfor (let obj in PointAttributeTypes) {\n\tPointAttributeTypes[i] = PointAttributeTypes[obj];\n\ti++;\n}\n\nexport {PointAttributeTypes};\n\ntype RangeType = number[] | [number[], number[]]\n\n// Class that represents a certain point attribute\nclass PointAttribute{\n\tbyteSize: number;\n\tdescription: string;\n\tpublic initialRange?: RangeType\n\n\tconstructor(\n\t\tpublic name:string,\n\t\tpublic type:PointAttributeTypeType,\n\t\tpublic numElements:number,\n\t\tpublic range: RangeType = [Infinity, -Infinity]\n\t){\n\t\tthis.byteSize = this.numElements * this.type.size;\n\t\tthis.description = \"\";\n\t}\n};\n\nexport {PointAttribute};\n\n// Map that represents all point attributes, these were previoiusly properties of the PointAttribute class\nexport const POINT_ATTRIBUTES:{[key:string]:PointAttribute} = {\n\tPOSITION_CARTESIAN: new PointAttribute(\"POSITION_CARTESIAN\", PointAttributeTypes.DATA_TYPE_FLOAT, 3),\n\tRGBA_PACKED: new PointAttribute(\"COLOR_PACKED\", PointAttributeTypes.DATA_TYPE_INT8, 4),\n\tCOLOR_PACKED: new PointAttribute(\"COLOR_PACKED\", PointAttributeTypes.DATA_TYPE_INT8, 4),\n\tRGB_PACKED: new PointAttribute(\"COLOR_PACKED\", PointAttributeTypes.DATA_TYPE_INT8, 3),\n\tNORMAL_FLOATS: new PointAttribute(\"NORMAL_FLOATS\", PointAttributeTypes.DATA_TYPE_FLOAT, 3),\n\tINTENSITY: new PointAttribute(\"INTENSITY\", PointAttributeTypes.DATA_TYPE_UINT16, 1),\n\tCLASSIFICATION: new PointAttribute(\"CLASSIFICATION\", PointAttributeTypes.DATA_TYPE_UINT8, 1),\n\tNORMAL_SPHEREMAPPED: new PointAttribute(\"NORMAL_SPHEREMAPPED\", PointAttributeTypes.DATA_TYPE_UINT8, 2),\n\tNORMAL_OCT16: new PointAttribute(\"NORMAL_OCT16\", PointAttributeTypes.DATA_TYPE_UINT8, 2),\n\tNORMAL: new PointAttribute(\"NORMAL\", PointAttributeTypes.DATA_TYPE_FLOAT, 3),\n\tRETURN_NUMBER: new PointAttribute(\"RETURN_NUMBER\", PointAttributeTypes.DATA_TYPE_UINT8, 1),\n\tNUMBER_OF_RETURNS: new PointAttribute(\"NUMBER_OF_RETURNS\", PointAttributeTypes.DATA_TYPE_UINT8, 1),\n\tSOURCE_ID: new PointAttribute(\"SOURCE_ID\", PointAttributeTypes.DATA_TYPE_UINT16, 1),\n\tINDICES: new PointAttribute(\"INDICES\", PointAttributeTypes.DATA_TYPE_UINT32, 1),\n\tSPACING: new PointAttribute(\"SPACING\", PointAttributeTypes.DATA_TYPE_FLOAT, 1),\n\tGPS_TIME: new PointAttribute(\"GPS_TIME\", PointAttributeTypes.DATA_TYPE_DOUBLE, 1)\n}\n\ntype PAVectorType = {\n\tname: string;\n\tattributes: string[];\n}\n\n// Instantiated during loading\nexport class PointAttributes{\n\n\n\n\t// pointAttributes will be a list of strings\n\tconstructor(pointAttributes?:string[],\n\t\t\t\tpublic attributes:PointAttribute[] = [],\n\t\t\t\tpublic byteSize:number = 0,\n\t\t\t\tpublic size:number = 0,\n\t\t\t\tpublic vectors:PAVectorType[]=[]\n\t\t){\n\n\t\tif (pointAttributes != null) {\n\t\t\tfor (let i = 0; i < pointAttributes.length; i++) {\n\t\t\t\tlet pointAttributeName = pointAttributes[i];\n\t\t\t\tlet pointAttribute = POINT_ATTRIBUTES[pointAttributeName];\n\t\t\t\tthis.attributes.push(pointAttribute);\n\t\t\t\tthis.byteSize += pointAttribute.byteSize;\n\t\t\t\tthis.size++;\n\t\t\t}\n\t\t}\n\t}\n\n\t// I hate these argument names that are so similar to each other but have completely different types\n\tadd(pointAttribute:PointAttribute){\n\t\tthis.attributes.push(pointAttribute);\n\t\tthis.byteSize += pointAttribute.byteSize;\n\t\tthis.size++;\n\t};\n\n\taddVector(vector:PAVectorType){\n\t\tthis.vectors.push(vector);\n\t}\n\n\thasNormals(){\n\t\tfor (let name in this.attributes) {\n\t\t\tlet pointAttribute = this.attributes[name];\n\t\t\tif (\n\t\t\t\tpointAttribute === POINT_ATTRIBUTES.NORMAL_SPHEREMAPPED ||\n\t\t\t\tpointAttribute === POINT_ATTRIBUTES.NORMAL_FLOATS ||\n\t\t\t\tpointAttribute === POINT_ATTRIBUTES.NORMAL ||\n\t\t\t\tpointAttribute === POINT_ATTRIBUTES.NORMAL_OCT16) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t};\n\n}\n",null,"// Create enums for different types of workers\nexport enum WorkerType {\n\tDECODER_WORKER_BROTLI = \"DECODER_WORKER_BROTLI\",\n\tDECODER_WORKER = \"DECODER_WORKER\",\n}\n\n// Worker JS names: \"BinaryDecoderWorker.js\", \"DEMWorker.js\", \"EptBinaryDecoderWorker.js\", \"EptLaszipDecoderWorker.js\",\n// EptZstandardDecoder_preamble.js\", \"EptZstandardDecoderWorker.js\", \"LASDecoderWorker.js\", \"LASLAZWorker.js\", \"LazLoaderWorker.js\"\n\nfunction createWorker(type: WorkerType): Worker {\n\t// console.log(type)\n\tswitch (type) {\n\t\tcase WorkerType.DECODER_WORKER_BROTLI: {\n            // const worker = require(\"./brotli-decoder.worker.js\");\n            // return new worker();\n\t\t\treturn new Worker(\n\t\t\t\tnew URL('./brotli-decoder.worker.js', import.meta.url),\n\t\t\t\t{ type: 'module' },\n\t\t\t)\n        }\n\t\tcase WorkerType.DECODER_WORKER: {\n            // let ctor = require(\"./decoder.worker.js\");\n            // return new ctor();\n\t\t\treturn new Worker(\n\t\t\t\tnew URL('./decoder.worker.js', import.meta.url),\n\t\t\t\t{ type: 'module' },\n\t\t\t)\n        }\n\t\tdefault:\n\t\t\tthrow new Error(\"Unknown worker type\");\n\t}\n}\n\n\nexport class WorkerPool{\n    // Workers will be an object that has a key for each worker type and the value is an array of Workers that can be empty\n\tprivate workers: { [key in WorkerType]: Worker[] } = {DECODER_WORKER: [], DECODER_WORKER_BROTLI: []};\n\n\tgetWorker(workerType: WorkerType): Worker{\n\t\t// Throw error if workerType is not recognized\n\t\tif (this.workers[workerType] === undefined) {\n\t\t\tthrow new Error(\"Unknown worker type\");\n\t\t}\n\t\t// Given a worker URL, if URL does not exist in the worker object, create a new array with the URL as a key\n\t\tif (this.workers[workerType].length === 0){\n\t\t\tlet worker = createWorker(workerType);\n\t\t\tthis.workers[workerType].push(worker);\n\t\t}\n\t\tlet worker = this.workers[workerType].pop();\n\t\tif (worker === undefined) { // Typescript needs this\n\t\t\tthrow new Error(\"No workers available\");\n\t\t}\n\t\t// Return the last worker in the array and remove it from the array\n\t\treturn worker;\n\t}\n\n\treturnWorker(workerType: WorkerType, worker:Worker){\n\t\tthis.workers[workerType].push(worker);\n\t}\n};\n",null,"import { IPointCloudTreeNode } from './../types';\n\n// import * as THREE from \"../../../../libs/three.js/build/three.module.js\";\nimport { Box3,Sphere } from \"three\";\nimport { OctreeGeometry } from './OctreeGeometry';\n\nexport class OctreeGeometryNode implements IPointCloudTreeNode{\n\n\tconstructor(public name:string, public octreeGeometry:OctreeGeometry, public boundingBox:Box3){\n\t\tthis.id = OctreeGeometryNode.IDCount++;\n\t\tthis.index = parseInt(name.charAt(name.length - 1));\n\t\tthis.boundingSphere = boundingBox.getBoundingSphere(new Sphere());\n\t\tthis.numPoints = 0;\n\t\tthis.oneTimeDisposeHandlers = [];\n\t}\n\n\tloaded: boolean = false;\n\tloading: boolean = false;\n\tparent: OctreeGeometryNode | null = null;\n\tgeometry: THREE.BufferGeometry | null = null;\n\tnodeType?: number;\n\tbyteOffset?: bigint ;\n\tbyteSize?: bigint;\n\thierarchyByteOffset?: bigint;\n\thierarchyByteSize?: bigint;\n\thasChildren: boolean = false;\n\tspacing!: number;\n\tdensity?: number;\n\tisLeafNode: boolean = true;\n\treadonly isTreeNode: boolean = false;\n  \treadonly isGeometryNode: boolean = true;\n\treadonly children: ReadonlyArray<OctreeGeometryNode | null> = [\n\t\tnull,\n\t\tnull,\n\t\tnull,\n\t\tnull,\n\t\tnull,\n\t\tnull,\n\t\tnull,\n\t\tnull,\n\t];\n\n\t// create static IDCount variable\n\tstatic IDCount = 0;\n\tid: number;\n\tindex: number;\n\tboundingSphere: Sphere;\n\tnumPoints: number;\n\tlevel!: number;\n\toneTimeDisposeHandlers: Function[];\n\n\t// isGeometryNode(){\n\t// \treturn true;\n\t// }\n\n\tgetLevel(){\n\t\treturn this.level;\n\t}\n\n\t// isTreeNode(){\n\t// \treturn false;\n\t// } // Converted to property\n\n\tisLoaded(){\n\t\treturn this.loaded;\n\t}\n\n\tgetBoundingSphere(){\n\t\treturn this.boundingSphere;\n\t}\n\n\t// getChildren(){\n\t// \tlet children = [];\n\n\t// \tfor (let i = 0; i < 8; i++) {\n\t// \t\tif (this.children[i]) {\n\t// \t\t\tchildren.push(this.children[i]);\n\t// \t\t}\n\t// \t}\n\n\t// \treturn children;\n\t// }\n\n\tgetBoundingBox(){\n\t\treturn this.boundingBox;\n\t}\n\n\tload(){\n\n\t\tif (this.octreeGeometry.numNodesLoading >= this.octreeGeometry.maxNumNodesLoading) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.octreeGeometry.loader) {\n\t\t\tthis.octreeGeometry.loader.load(this);\n\t\t}\n\t}\n\n\tgetNumPoints(){\n\t\treturn this.numPoints;\n\t}\n\n\tdispose(): void{\n\t\tif (this.geometry && this.parent != null) {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.geometry = null;\n\t\t\tthis.loaded = false;\n\n\t\t\t// this.dispatchEvent( { type: 'dispose' } );\n\t\t\tfor (let i = 0; i < this.oneTimeDisposeHandlers.length; i++) {\n\t\t\t\tlet handler = this.oneTimeDisposeHandlers[i];\n\t\t\t\thandler();\n\t\t\t}\n\t\t\tthis.oneTimeDisposeHandlers = [];\n\t\t}\n\t}\n\n\ttraverse(cb: (node: OctreeGeometryNode) => void, includeSelf = true): void {\n\t\tconst stack: OctreeGeometryNode[] = includeSelf ? [this] : [];\n\t\n\t\tlet current: OctreeGeometryNode | undefined;\n\t\n\t\twhile ((current = stack.pop()) !== undefined) {\n\t\t\tcb(current);\n\t\t\n\t\t\tfor (const child of current.children) {\n\t\t\t\t\tif (child !== null) {\n\t\t\t\t\tstack.push(child);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\n};\n\nOctreeGeometryNode.IDCount = 0;",null,"const canvas = document.createElement('canvas');\nconst gl: WebGLRenderingContext | null = canvas.getContext('webgl');\n\nexport const FEATURES = {\n  SHADER_INTERPOLATION: hasExtension('EXT_frag_depth') && hasMinVaryingVectors(8),\n  SHADER_SPLATS:\n    hasExtension('EXT_frag_depth') && hasExtension('OES_texture_float') && hasMinVaryingVectors(8),\n  SHADER_EDL: hasExtension('OES_texture_float') && hasMinVaryingVectors(8),\n  precision: getPrecision(),\n};\n\nfunction hasExtension(ext: string) {\n  return gl !== null && Boolean(gl.getExtension(ext));\n}\n\nfunction hasMinVaryingVectors(value: number) {\n  return gl !== null && gl.getParameter(gl.MAX_VARYING_VECTORS) >= value;\n}\n\nfunction getPrecision() {\n  if (gl === null) {\n    return '';\n  }\n\n  const vsHighpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT);\n  const vsMediumpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT);\n\n  const fsHighpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);\n  const fsMediumpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT);\n\n  const highpAvailable =\n    vsHighpFloat && fsHighpFloat && vsHighpFloat.precision > 0 && fsHighpFloat.precision > 0;\n\n  const mediumpAvailable =\n    vsMediumpFloat &&\n    fsMediumpFloat &&\n    vsMediumpFloat.precision > 0 &&\n    fsMediumpFloat.precision > 0;\n\n  return highpAvailable ? 'highp' : mediumpAvailable ? 'mediump' : 'lowp';\n}\n",null,"// -------------------------------------------------------------------------------------------------\n// Converted to Typescript and adapted from https://github.com/potree/potree\n// -------------------------------------------------------------------------------------------------\n\nimport { Box3, BufferAttribute, BufferGeometry, Uint8BufferAttribute, Vector3 } from 'three';\nimport { PointAttributeName, PointAttributeType } from '../point-attributes';\nimport { PointCloudOctreeGeometryNode } from '../point-cloud-octree-geometry-node';\nimport { Version } from '../version';\nimport { GetUrlFn, XhrRequest } from './types';\n\ninterface AttributeData {\n  attribute: {\n    name: PointAttributeName;\n    type: PointAttributeType;\n    byteSize: number;\n    numElements: number;\n  };\n  buffer: ArrayBuffer;\n}\n\ninterface WorkerResponse {\n  data: {\n    attributeBuffers: { [name: string]: AttributeData };\n    indices: ArrayBuffer;\n    tightBoundingBox: { min: number[]; max: number[] };\n    mean: number[];\n  };\n}\n\ninterface BinaryLoaderOptions {\n  getUrl?: GetUrlFn;\n  version: string;\n  boundingBox: Box3;\n  scale: number;\n  xhrRequest: XhrRequest;\n}\n\ntype Callback = (node: PointCloudOctreeGeometryNode) => void;\n\nexport class BinaryLoader {\n  version: Version;\n  boundingBox: Box3;\n  scale: number;\n  getUrl: GetUrlFn;\n  disposed: boolean = false;\n  xhrRequest: XhrRequest;\n  callbacks: Callback[];\n\n  private workers: Worker[] = [];\n\n  constructor({\n    getUrl = s => Promise.resolve(s),\n    version,\n    boundingBox,\n    scale,\n    xhrRequest,\n  }: BinaryLoaderOptions) {\n    console.log([getUrl, version, boundingBox, scale, xhrRequest])\n    if (typeof version === 'string') {\n      this.version = new Version(version);\n    } else {\n      this.version = version;\n    }\n\n    this.xhrRequest = xhrRequest;\n    this.getUrl = getUrl;\n    this.boundingBox = boundingBox;\n    this.scale = scale;\n    this.callbacks = [];\n  }\n\n  dispose(): void {\n    this.workers.forEach(worker => worker.terminate());\n    this.workers = [];\n\n    this.disposed = true;\n  }\n\n  load(node: PointCloudOctreeGeometryNode): Promise<void> {\n    if (node.loaded || this.disposed) {\n      return Promise.resolve();\n    }\n\n    return Promise.resolve(this.getUrl(this.getNodeUrl(node)))\n      .then(url => this.xhrRequest(url, { mode: 'cors' }))\n      .then(res => res.arrayBuffer())\n      .then(buffer => {\n        return new Promise(resolve => this.parse(node, buffer, resolve));\n      });\n  }\n\n  private getNodeUrl(node: PointCloudOctreeGeometryNode): string {\n    let url = node.getUrl();\n    if (this.version.equalOrHigher('1.4')) {\n      url += '.bin';\n    }\n\n    return url;\n  }\n\n  private parse(\n    node: PointCloudOctreeGeometryNode,\n    buffer: ArrayBuffer,\n    resolve: () => void,\n  ): void {\n    if (this.disposed) {\n      resolve();\n      return;\n    }\n\n    const worker = this.getWorker();\n\n    const pointAttributes = node.pcoGeometry.pointAttributes;\n    const numPoints = buffer.byteLength / pointAttributes.byteSize;\n\n    if (this.version.upTo('1.5')) {\n      node.numPoints = numPoints;\n    }\n\n    worker.onmessage = (e: WorkerResponse) => {\n      if (this.disposed) {\n        resolve();\n        return;\n      }\n\n      const data = e.data;\n\n      const geometry = (node.geometry = node.geometry || new BufferGeometry());\n      geometry.boundingBox = node.boundingBox;\n\n      this.addBufferAttributes(geometry, data.attributeBuffers);\n      this.addIndices(geometry, data.indices);\n      this.addNormalAttribute(geometry, numPoints);\n\n      node.mean = new Vector3().fromArray(data.mean);\n      node.tightBoundingBox = this.getTightBoundingBox(data.tightBoundingBox);\n      node.loaded = true;\n      node.loading = false;\n      node.failed = false;\n      node.pcoGeometry.numNodesLoading--;\n      node.pcoGeometry.needsUpdate = true;\n\n      this.releaseWorker(worker);\n\n      this.callbacks.forEach(callback => callback(node));\n      resolve();\n    };\n\n    const message = {\n      buffer,\n      pointAttributes,\n      version: this.version.version,\n      min: node.boundingBox.min.toArray(),\n      offset: node.pcoGeometry.offset.toArray(),\n      scale: this.scale,\n      spacing: node.spacing,\n      hasChildren: node.hasChildren,\n    };\n\n    worker.postMessage(message, [message.buffer]);\n  }\n\n  private getWorker(): Worker {\n    const worker = this.workers.pop();\n    if (worker) {\n      return worker;\n    }\n\n    return new Worker(\n      new URL('../workers/binary-decoder.worker.js', import.meta.url),\n      { type: 'module' },\n    )\n  }\n\n  private releaseWorker(worker: Worker): void {\n    this.workers.push(worker);\n  }\n\n  private getTightBoundingBox({ min, max }: { min: number[]; max: number[] }): Box3 {\n    const box = new Box3(new Vector3().fromArray(min), new Vector3().fromArray(max));\n    box.max.sub(box.min);\n    box.min.set(0, 0, 0);\n\n    return box;\n  }\n\n  private addBufferAttributes(\n    geometry: BufferGeometry,\n    buffers: { [name: string]: { buffer: ArrayBuffer } },\n  ): void {\n    Object.keys(buffers).forEach(property => {\n      const buffer = buffers[property].buffer;\n\n      if (this.isAttribute(property, PointAttributeName.POSITION_CARTESIAN)) {\n        geometry.setAttribute('position', new BufferAttribute(new Float32Array(buffer), 3));\n      } else if (this.isAttribute(property, PointAttributeName.COLOR_PACKED)) {\n        geometry.setAttribute('color', new BufferAttribute(new Uint8Array(buffer), 3, true));\n      } else if (this.isAttribute(property, PointAttributeName.INTENSITY)) {\n        geometry.setAttribute('intensity', new BufferAttribute(new Float32Array(buffer), 1));\n      } else if (this.isAttribute(property, PointAttributeName.CLASSIFICATION)) {\n        geometry.setAttribute('classification', new BufferAttribute(new Uint8Array(buffer), 1));\n      } else if (this.isAttribute(property, PointAttributeName.NORMAL_SPHEREMAPPED)) {\n        geometry.setAttribute('normal', new BufferAttribute(new Float32Array(buffer), 3));\n      } else if (this.isAttribute(property, PointAttributeName.NORMAL_OCT16)) {\n        geometry.setAttribute('normal', new BufferAttribute(new Float32Array(buffer), 3));\n      } else if (this.isAttribute(property, PointAttributeName.NORMAL)) {\n        geometry.setAttribute('normal', new BufferAttribute(new Float32Array(buffer), 3));\n      }\n    });\n  }\n\n  private addIndices(geometry: BufferGeometry, indices: ArrayBuffer): void {\n    const indicesAttribute = new Uint8BufferAttribute(indices, 4);\n    indicesAttribute.normalized = true;\n    geometry.setAttribute('indices', indicesAttribute);\n  }\n\n  private addNormalAttribute(geometry: BufferGeometry, numPoints: number): void {\n    if (!geometry.getAttribute('normal')) {\n      const buffer = new Float32Array(numPoints * 3);\n      geometry.setAttribute('normal', new BufferAttribute(new Float32Array(buffer), 3));\n    }\n  }\n\n  private isAttribute(property: string, name: PointAttributeName): boolean {\n    return parseInt(property, 10) === name;\n  }\n}\n",null,"// -------------------------------------------------------------------------------------------------\n// Converted to Typescript and adapted from https://github.com/potree/potree\n// -------------------------------------------------------------------------------------------------\n\nexport enum PointAttributeName {\n  POSITION_CARTESIAN = 0, // float x, y, z;\n  COLOR_PACKED = 1, // byte r, g, b, a; \tI = [0,1]\n  COLOR_FLOATS_1 = 2, // float r, g, b; \t\tI = [0,1]\n  COLOR_FLOATS_255 = 3, // float r, g, b; \t\tI = [0,255]\n  NORMAL_FLOATS = 4, // float x, y, z;\n  FILLER = 5,\n  INTENSITY = 6,\n  CLASSIFICATION = 7,\n  NORMAL_SPHEREMAPPED = 8,\n  NORMAL_OCT16 = 9,\n  NORMAL = 10,\n}\n\nexport interface PointAttributeType {\n  ordinal: number;\n  size: number;\n}\n\nexport const POINT_ATTRIBUTE_TYPES: Record<string, PointAttributeType> = {\n  DATA_TYPE_DOUBLE: { ordinal: 0, size: 8 },\n  DATA_TYPE_FLOAT: { ordinal: 1, size: 4 },\n  DATA_TYPE_INT8: { ordinal: 2, size: 1 },\n  DATA_TYPE_UINT8: { ordinal: 3, size: 1 },\n  DATA_TYPE_INT16: { ordinal: 4, size: 2 },\n  DATA_TYPE_UINT16: { ordinal: 5, size: 2 },\n  DATA_TYPE_INT32: { ordinal: 6, size: 4 },\n  DATA_TYPE_UINT32: { ordinal: 7, size: 4 },\n  DATA_TYPE_INT64: { ordinal: 8, size: 8 },\n  DATA_TYPE_UINT64: { ordinal: 9, size: 8 },\n};\n\nexport interface IPointAttribute {\n  name: PointAttributeName;\n  type: PointAttributeType;\n  numElements: number;\n  byteSize: number;\n}\n\nexport interface IPointAttributes {\n  attributes: IPointAttribute[];\n  byteSize: number;\n  size: number;\n}\n\nfunction makePointAttribute(\n  name: PointAttributeName,\n  type: PointAttributeType,\n  numElements: number,\n): IPointAttribute {\n  return {\n    name,\n    type,\n    numElements,\n    byteSize: numElements * type.size,\n  };\n}\n\nconst RGBA_PACKED = makePointAttribute(\n  PointAttributeName.COLOR_PACKED,\n  POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8,\n  4,\n);\n\nexport const POINT_ATTRIBUTES = {\n  POSITION_CARTESIAN: makePointAttribute(\n    PointAttributeName.POSITION_CARTESIAN,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT,\n    3,\n  ),\n  RGBA_PACKED,\n  COLOR_PACKED: RGBA_PACKED,\n  RGB_PACKED: makePointAttribute(\n    PointAttributeName.COLOR_PACKED,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8,\n    3,\n  ),\n  NORMAL_FLOATS: makePointAttribute(\n    PointAttributeName.NORMAL_FLOATS,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT,\n    3,\n  ),\n  FILLER_1B: makePointAttribute(\n    PointAttributeName.FILLER,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\n    1,\n  ),\n  INTENSITY: makePointAttribute(\n    PointAttributeName.INTENSITY,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT16,\n    1,\n  ),\n  CLASSIFICATION: makePointAttribute(\n    PointAttributeName.CLASSIFICATION,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\n    1,\n  ),\n  NORMAL_SPHEREMAPPED: makePointAttribute(\n    PointAttributeName.NORMAL_SPHEREMAPPED,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\n    2,\n  ),\n  NORMAL_OCT16: makePointAttribute(\n    PointAttributeName.NORMAL_OCT16,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\n    2,\n  ),\n  NORMAL: makePointAttribute(PointAttributeName.NORMAL, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\n};\n\nexport type PointAttributeStringName = keyof typeof POINT_ATTRIBUTES;\n\nexport class PointAttributes implements IPointAttributes {\n  attributes: IPointAttribute[] = [];\n  byteSize: number = 0;\n  size: number = 0;\n\n  constructor(pointAttributeNames: PointAttributeStringName[] = []) {\n    for (let i = 0; i < pointAttributeNames.length; i++) {\n      const pointAttributeName = pointAttributeNames[i];\n      const pointAttribute = POINT_ATTRIBUTES[pointAttributeName];\n      this.attributes.push(pointAttribute);\n      this.byteSize += pointAttribute.byteSize;\n      this.size++;\n    }\n  }\n\n  add(pointAttribute: IPointAttribute): void {\n    this.attributes.push(pointAttribute);\n    this.byteSize += pointAttribute.byteSize;\n    this.size++;\n  }\n\n  hasColors(): boolean {\n    return this.attributes.find(isColorAttribute) !== undefined;\n  }\n\n  hasNormals(): boolean {\n    return this.attributes.find(isNormalAttribute) !== undefined;\n  }\n}\n\nfunction isColorAttribute({ name }: IPointAttribute): boolean {\n  return name === PointAttributeName.COLOR_PACKED;\n}\n\nfunction isNormalAttribute({ name }: IPointAttribute): boolean {\n  return (\n    name === PointAttributeName.NORMAL_SPHEREMAPPED ||\n    name === PointAttributeName.NORMAL_FLOATS ||\n    name === PointAttributeName.NORMAL ||\n    name === PointAttributeName.NORMAL_OCT16\n  );\n}\n",null,"export class Version {\n  version: string;\n  versionMajor: number;\n  versionMinor: number = 0;\n\n  constructor(version: string) {\n    this.version = version;\n\n    const vmLength = version.indexOf('.') === -1 ? version.length : version.indexOf('.');\n    this.versionMajor = parseInt(version.substr(0, vmLength), 10);\n    this.versionMinor = parseInt(version.substr(vmLength + 1), 10);\n    if (isNaN(this.versionMinor)) {\n      this.versionMinor = 0;\n    }\n  }\n\n  newerThan(version: string): boolean {\n    const v = new Version(version);\n\n    if (this.versionMajor > v.versionMajor) {\n      return true;\n    } else if (this.versionMajor === v.versionMajor && this.versionMinor > v.versionMinor) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  equalOrHigher(version: string): boolean {\n    const v = new Version(version);\n\n    if (this.versionMajor > v.versionMajor) {\n      return true;\n    } else if (this.versionMajor === v.versionMajor && this.versionMinor >= v.versionMinor) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  upTo(version: string): boolean {\n    return !this.newerThan(version);\n  }\n}\n",null,"// -------------------------------------------------------------------------------------------------\n// Converted to Typescript and adapted from https://github.com/potree/potree\n// -------------------------------------------------------------------------------------------------\n\nimport { Box3, Vector3 } from 'three';\nimport { PointAttributes, PointAttributeStringName } from '../point-attributes';\nimport { PointCloudOctreeGeometry } from '../point-cloud-octree-geometry';\nimport { PointCloudOctreeGeometryNode } from '../point-cloud-octree-geometry-node';\nimport { createChildAABB } from '../utils/bounds';\nimport { getIndexFromName } from '../utils/utils';\nimport { Version } from '../version';\nimport { BinaryLoader } from './binary-loader';\nimport { GetUrlFn, XhrRequest } from './types';\n\ninterface BoundingBoxData {\n  lx: number;\n  ly: number;\n  lz: number;\n  ux: number;\n  uy: number;\n  uz: number;\n}\n\ninterface POCJson {\n  version: string;\n  octreeDir: string;\n  projection: string;\n  points: number;\n  boundingBox: BoundingBoxData;\n  tightBoundingBox?: BoundingBoxData;\n  pointAttributes: PointAttributeStringName[];\n  spacing: number;\n  scale: number;\n  hierarchyStepSize: number;\n  hierarchy: [string, number][]; // [name, numPoints][]\n}\n\n/**\n *\n * @param url\n *    The url of the point cloud file (usually cloud.js).\n * @param getUrl\n *    Function which receives the relative URL of a point cloud chunk file which is to be loaded\n *    and shoud return a new url (e.g. signed) in the form of a string or a promise.\n * @param xhrRequest An arrow function for a fetch request\n * @returns\n *    An observable which emits once when the first LOD of the point cloud is loaded.\n */\nexport function loadPOC(\n  url: string,\n  getUrl: GetUrlFn,\n  xhrRequest: XhrRequest,\n): Promise<PointCloudOctreeGeometry> {\n  return Promise.resolve(getUrl(url)).then(transformedUrl => { // 1. Make a request to the URL\n    return xhrRequest(transformedUrl, { mode: 'cors' })\n      .then(res => res.json())\n      .then(parse(transformedUrl, getUrl, xhrRequest)); // 2. Parse the response\n  });\n}\n\nfunction parse(url: string, getUrl: GetUrlFn, xhrRequest: XhrRequest) {\n  return (data: POCJson): Promise<PointCloudOctreeGeometry> => { // Note: The response gets passed from loadPOC()\n    const { offset, boundingBox, tightBoundingBox } = getBoundingBoxes(data);\n    const loader = new BinaryLoader({\n      getUrl,\n      version: data.version,\n      boundingBox,\n      scale: data.scale,\n      xhrRequest,\n    }); // 3. Create a BinaryLoader with the bounding box and scale\n\n    const pco = new PointCloudOctreeGeometry(\n      loader,\n      boundingBox,\n      tightBoundingBox,\n      offset,\n      xhrRequest,\n    ); // 4. Create a PointCloudOctreeGeometry\n\n    // 5. Fill in Geometry with the data from the POCJson\n    pco.url = url;\n    pco.octreeDir = data.octreeDir;\n    pco.needsUpdate = true;\n    pco.spacing = data.spacing;\n    pco.hierarchyStepSize = data.hierarchyStepSize;\n    pco.projection = data.projection;\n    pco.offset = offset;\n    pco.pointAttributes = new PointAttributes(data.pointAttributes);\n    console.log(pco.pointAttributes)\n    \n    \n\n    const nodes: Record<string, PointCloudOctreeGeometryNode> = {}; // HMM! Juicy! 6. Create a map of nodes\n\n    const version = new Version(data.version);\n\n    return loadRoot(pco, data, nodes, version).then(() => { // 7. Load the root node\n      if (version.upTo('1.4')) {\n        loadRemainingHierarchy(pco, data, nodes);\n      }\n\n      pco.nodes = nodes;\n      return pco;\n    });\n  };\n}\n\nfunction getBoundingBoxes(\n  data: POCJson,\n): { offset: Vector3; boundingBox: Box3; tightBoundingBox: Box3 } {\n  const min = new Vector3(data.boundingBox.lx, data.boundingBox.ly, data.boundingBox.lz);\n  const max = new Vector3(data.boundingBox.ux, data.boundingBox.uy, data.boundingBox.uz);\n  const boundingBox = new Box3(min, max);\n  const tightBoundingBox = boundingBox.clone();\n\n  const offset = min.clone();\n\n  if (data.tightBoundingBox) {\n    const { lx, ly, lz, ux, uy, uz } = data.tightBoundingBox;\n    tightBoundingBox.min.set(lx, ly, lz);\n    tightBoundingBox.max.set(ux, uy, uz);\n  }\n\n  boundingBox.min.sub(offset);\n  boundingBox.max.sub(offset);\n  tightBoundingBox.min.sub(offset);\n  tightBoundingBox.max.sub(offset);\n\n  return { offset, boundingBox, tightBoundingBox };\n}\n\nfunction loadRoot(\n  pco: PointCloudOctreeGeometry,\n  data: POCJson,\n  nodes: Record<string, PointCloudOctreeGeometryNode>,\n  version: Version,\n): Promise<void> {\n  const name = 'r';\n\n  const root = new PointCloudOctreeGeometryNode(name, pco, pco.boundingBox);\n  root.hasChildren = true;\n  root.spacing = pco.spacing; // Fill in root info from the POCJson\n\n  if (version.upTo('1.5')) {\n    root.numPoints = data.hierarchy[0][1];\n  } else {\n    root.numPoints = 0;\n  }\n\n  pco.root = root;\n  nodes[name] = root;\n  return pco.root.load();\n}\n\nfunction loadRemainingHierarchy(\n  pco: PointCloudOctreeGeometry,\n  data: POCJson,\n  nodes: Record<string, PointCloudOctreeGeometryNode>,\n): void {\n  for (let i = 1; i < data.hierarchy.length; i++) {\n    const [name, numPoints] = data.hierarchy[i];\n    const { index, parentName, level } = parseName(name);\n    const parentNode = nodes[parentName];\n\n    const boundingBox = createChildAABB(parentNode.boundingBox, index);\n    const node = new PointCloudOctreeGeometryNode(name, pco, boundingBox);\n    node.level = level;\n    node.numPoints = numPoints;\n    node.spacing = pco.spacing / Math.pow(2, node.level);\n\n    nodes[name] = node;\n    parentNode.addChild(node);\n  }\n}\n\nfunction parseName(name: string): { index: number; parentName: string; level: number } {\n  return {\n    index: getIndexFromName(name),\n    parentName: name.substring(0, name.length - 1),\n    level: name.length - 1,\n  };\n}\n",null,"import { Box3, Vector3 } from 'three';\nimport { BinaryLoader, XhrRequest } from './loading';\nimport { PointAttributes } from './point-attributes';\nimport { PointCloudOctreeGeometryNode } from './point-cloud-octree-geometry-node';\n\nexport class PointCloudOctreeGeometry {\n  disposed: boolean = false;\n  needsUpdate: boolean = true;\n  root!: PointCloudOctreeGeometryNode;\n  octreeDir: string = '';\n  hierarchyStepSize: number = -1;\n  nodes: Record<string, PointCloudOctreeGeometryNode> = {};\n  numNodesLoading: number = 0;\n  maxNumNodesLoading: number = 3;\n  spacing: number = 0;\n  pointAttributes: PointAttributes = new PointAttributes([]);\n  projection: any = null;\n  url: string | null = null;\n\n  constructor(\n    public loader: BinaryLoader,\n    public boundingBox: Box3,\n    public tightBoundingBox: Box3,\n    public offset: Vector3,\n    public xhrRequest: XhrRequest,\n  ) {}\n\n  dispose(): void {\n    this.loader.dispose();\n    this.root.traverse(node => node.dispose());\n\n    this.disposed = true;\n  }\n\n  addNodeLoadedCallback(callback: (node: PointCloudOctreeGeometryNode) => void): void {\n    this.loader.callbacks.push(callback);\n  }\n\n  clearNodeLoadedCallbacks(): void {\n    this.loader.callbacks = [];\n  }\n}\n",null,"/**\n * Adapted from Potree.js http://potree.org\n * Potree License: https://github.com/potree/potree/blob/1.5/LICENSE\n */\n\nimport { Box3, BufferGeometry, EventDispatcher, Sphere, Vector3 } from 'three';\nimport { PointCloudOctreeGeometry } from './point-cloud-octree-geometry';\nimport { IPointCloudTreeNode } from './types';\nimport { createChildAABB } from './utils/bounds';\nimport { getIndexFromName } from './utils/utils';\n\nexport interface NodeData {\n  children: number;\n  numPoints: number;\n  name: string;\n}\n\nconst NODE_STRIDE = 5;\n\nexport class PointCloudOctreeGeometryNode extends EventDispatcher implements IPointCloudTreeNode {\n  id: number = PointCloudOctreeGeometryNode.idCount++;\n  name: string;\n  pcoGeometry: PointCloudOctreeGeometry;\n  index: number;\n  level: number = 0;\n  spacing: number = 0;\n  hasChildren: boolean = false;\n  readonly children: ReadonlyArray<PointCloudOctreeGeometryNode | null> = [\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n  ];\n  boundingBox: Box3;\n  tightBoundingBox: Box3;\n  boundingSphere: Sphere;\n  mean: Vector3 = new Vector3();\n  numPoints: number = 0;\n  geometry: BufferGeometry | undefined;\n  loaded: boolean = false;\n  loading: boolean = false;\n  failed: boolean = false;\n  parent: PointCloudOctreeGeometryNode | null = null;\n  oneTimeDisposeHandlers: (() => void)[] = [];\n  isLeafNode: boolean = true;\n  readonly isTreeNode: boolean = false;\n  readonly isGeometryNode: boolean = true;\n\n  private static idCount = 0;\n\n  constructor(name: string, pcoGeometry: PointCloudOctreeGeometry, boundingBox: Box3) {\n    super();\n\n    this.name = name;\n    this.index = getIndexFromName(name);\n    this.pcoGeometry = pcoGeometry;\n    this.boundingBox = boundingBox;\n    this.tightBoundingBox = boundingBox.clone();\n    this.boundingSphere = boundingBox.getBoundingSphere(new Sphere());\n  }\n\n  dispose(): void {\n    if (!this.geometry || !this.parent) {\n      return;\n    }\n\n    this.geometry.dispose();\n    this.geometry = undefined;\n    this.loaded = false;\n\n    this.oneTimeDisposeHandlers.forEach(handler => handler());\n    this.oneTimeDisposeHandlers = [];\n  }\n\n  /**\n   * Gets the url of the binary file for this node.\n   */\n  getUrl(): string {\n    const geometry = this.pcoGeometry;\n    const version = geometry.loader.version;\n    const pathParts = [geometry.octreeDir];\n\n    if (geometry.loader && version.equalOrHigher('1.5')) {\n      pathParts.push(this.getHierarchyBaseUrl());\n      pathParts.push(this.name);\n    } else if (version.equalOrHigher('1.4')) {\n      pathParts.push(this.name);\n    } else if (version.upTo('1.3')) {\n      pathParts.push(this.name);\n    }\n\n    return pathParts.join('/');\n  }\n\n  /**\n   * Gets the url of the hierarchy file for this node.\n   */\n  getHierarchyUrl(): string {\n    return `${this.pcoGeometry.octreeDir}/${this.getHierarchyBaseUrl()}/${this.name}.hrc`;\n  }\n\n  /**\n   * Adds the specified node as a child of the current node.\n   *\n   * @param child\n   *    The node which is to be added as a child.\n   */\n  addChild(child: PointCloudOctreeGeometryNode): void {\n    (this.children as any)[child.index] = child;\n    this.isLeafNode = false;\n    child.parent = this;\n  }\n\n  /**\n   * Calls the specified callback for the current node (if includeSelf is set to true) and all its\n   * children.\n   *\n   * @param cb\n   *    The function which is to be called for each node.\n   */\n  traverse(cb: (node: PointCloudOctreeGeometryNode) => void, includeSelf = true): void {\n    const stack: PointCloudOctreeGeometryNode[] = includeSelf ? [this] : [];\n\n    let current: PointCloudOctreeGeometryNode | undefined;\n\n    while ((current = stack.pop()) !== undefined) {\n      cb(current);\n\n      for (const child of current.children) {\n        if (child !== null) {\n          stack.push(child);\n        }\n      }\n    }\n  }\n\n  load(): Promise<void> {\n    if (!this.canLoad()) {\n      return Promise.resolve();\n    }\n\n    this.loading = true;\n    this.pcoGeometry.numNodesLoading++;\n    this.pcoGeometry.needsUpdate = true;\n\n    let promise: Promise<void>;\n\n    if (\n      this.pcoGeometry.loader.version.equalOrHigher('1.5') &&\n      this.level % this.pcoGeometry.hierarchyStepSize === 0 &&\n      this.hasChildren\n    ) { \n      promise = this.loadHierachyThenPoints();\n    } else {\n      promise = this.loadPoints();\n    }\n\n    return promise.catch(reason => {\n      this.loading = false;\n      this.failed = true;\n      this.pcoGeometry.numNodesLoading--;\n      throw reason;\n    });\n  }\n\n  private canLoad(): boolean {\n    return (\n      !this.loading &&\n      !this.loaded &&\n      !this.pcoGeometry.disposed &&\n      !this.pcoGeometry.loader.disposed &&\n      this.pcoGeometry.numNodesLoading < this.pcoGeometry.maxNumNodesLoading\n    );\n  }\n\n  private loadPoints(): Promise<void> {\n    this.pcoGeometry.needsUpdate = true;\n    return this.pcoGeometry.loader.load(this);\n  }\n\n  private loadHierachyThenPoints(): Promise<any> {\n    if (this.level % this.pcoGeometry.hierarchyStepSize !== 0) {\n      return Promise.resolve();\n    }\n\n    return Promise.resolve(this.pcoGeometry.loader.getUrl(this.getHierarchyUrl()))\n      .then(url => this.pcoGeometry.xhrRequest(url, { mode: 'cors' }))\n      .then(res => res.arrayBuffer())\n      .then(data => this.loadHierarchy(this, data));\n  }\n\n  /**\n   * Gets the url of the folder where the hierarchy is, relative to the octreeDir.\n   */\n  private getHierarchyBaseUrl(): string {\n    const hierarchyStepSize = this.pcoGeometry.hierarchyStepSize;\n    const indices = this.name.substr(1);\n    const numParts = Math.floor(indices.length / hierarchyStepSize);\n\n    let path = 'r/';\n    for (let i = 0; i < numParts; i++) {\n      path += `${indices.substr(i * hierarchyStepSize, hierarchyStepSize)}/`;\n    }\n\n    return path.slice(0, -1);\n  }\n\n  // tslint:disable:no-bitwise\n  private loadHierarchy(node: PointCloudOctreeGeometryNode, buffer: ArrayBuffer) {\n    const view = new DataView(buffer);\n\n    const firstNodeData = this.getNodeData(node.name, 0, view);\n    node.numPoints = firstNodeData.numPoints;\n\n    // Nodes which need be visited.\n    const stack: NodeData[] = [firstNodeData];\n    // Nodes which have already been decoded. We will take nodes from the stack and place them here.\n    const decoded: NodeData[] = [];\n\n    let offset = NODE_STRIDE;\n    while (stack.length > 0) {\n      const stackNodeData = stack.shift()!;\n\n      // From the last bit, all the way to the 8th one from the right.\n      let mask = 1;\n      for (let i = 0; i < 8 && offset + 1 < buffer.byteLength; i++) {\n        if ((stackNodeData.children & mask) !== 0) {\n          const nodeData = this.getNodeData(stackNodeData.name + i, offset, view);\n\n          decoded.push(nodeData); // Node is decoded.\n          stack.push(nodeData); // Need to check its children.\n\n          offset += NODE_STRIDE; // Move over to the next node in the buffer.\n        }\n\n        mask = mask * 2;\n      }\n    }\n\n    node.pcoGeometry.needsUpdate = true;\n\n    // Map containing all the nodes.\n    const nodes = new Map<string, PointCloudOctreeGeometryNode>();\n    nodes.set(node.name, node);\n    decoded.forEach(nodeData => this.addNode(nodeData, node.pcoGeometry, nodes));\n\n    node.loadPoints();\n  }\n\n  // tslint:enable:no-bitwise\n\n  private getNodeData(name: string, offset: number, view: DataView): NodeData {\n    const children = view.getUint8(offset);\n    const numPoints = view.getUint32(offset + 1, true);\n    return { children: children, numPoints: numPoints, name };\n  }\n\n  addNode(\n    { name, numPoints, children }: NodeData,\n    pco: PointCloudOctreeGeometry,\n    nodes: Map<string, PointCloudOctreeGeometryNode>,\n  ): void {\n    const index = getIndexFromName(name);\n    const parentName = name.substring(0, name.length - 1);\n    const parentNode = nodes.get(parentName)!;\n    const level = name.length - 1;\n    const boundingBox = createChildAABB(parentNode.boundingBox, index);\n\n    const node = new PointCloudOctreeGeometryNode(name, pco, boundingBox);\n    node.level = level;\n    node.numPoints = numPoints;\n    node.hasChildren = children > 0;\n    node.spacing = pco.spacing / Math.pow(2, level);\n\n    parentNode.addChild(node);\n    nodes.set(name, node);\n  }\n}\n",null,"import { PointCloudOctreeGeometryNode } from './point-cloud-octree-geometry-node';\n// import { PointCloudOctreeNode } from './point-cloud-octree-node';\n\nexport function isGeometryNode(node?: any): node is PointCloudOctreeGeometryNode { // \"node is\" in this case \n  return node !== undefined && node !== null && node.isGeometryNode;\n}\n\n// export function isTreeNode(node?: any): node is PointCloudOctreeNode { // Problem is here! Pnext modified isTreeNode to be one function when it's normally attached as a method to the root node.\n//   return node !== undefined && node !== null && node.isTreeNode;\n// }\n\nexport function isTreeNode(node?: any) {\n  return node !== undefined && node !== null && node.isTreeNode;\n}\n",null,"/**\n * from: http://eloquentjavascript.net/1st_edition/appendix2.html\n *\n */\n\nexport function BinaryHeap(scoreFunction) {\n  this.content = [];\n  this.scoreFunction = scoreFunction;\n}\n\nBinaryHeap.prototype = {\n  push: function(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n    // Allow it to bubble up.\n    this.bubbleUp(this.content.length - 1);\n  },\n\n  pop: function() {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it sink down.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.sinkDown(0);\n    }\n    return result;\n  },\n\n  remove: function(node) {\n    var length = this.content.length;\n    // To remove a value, we must search through the array to find\n    // it.\n    for (var i = 0; i < length; i++) {\n      if (this.content[i] != node) continue;\n      // When it is found, the process seen in 'pop' is repeated\n      // to fill up the hole.\n      var end = this.content.pop();\n      // If the element we popped was the one we needed to remove,\n      // we're done.\n      if (i == length - 1) break;\n      // Otherwise, we replace the removed element with the popped\n      // one, and allow it to float up or sink down as appropriate.\n      this.content[i] = end;\n      this.bubbleUp(i);\n      this.sinkDown(i);\n      break;\n    }\n  },\n\n  size: function() {\n    return this.content.length;\n  },\n\n  bubbleUp: function(n) {\n    // Fetch the element that has to be moved.\n    var element = this.content[n],\n      score = this.scoreFunction(element);\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      var parentN = Math.floor((n + 1) / 2) - 1,\n        parent = this.content[parentN];\n      // If the parent has a lesser score, things are in order and we\n      // are done.\n      if (score >= this.scoreFunction(parent)) break;\n\n      // Otherwise, swap the parent with the current element and\n      // continue.\n      this.content[parentN] = element;\n      this.content[n] = parent;\n      n = parentN;\n    }\n  },\n\n  sinkDown: function(n) {\n    // Look up the target element and its score.\n    var length = this.content.length,\n      element = this.content[n],\n      elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) * 2,\n        child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      var swap = null;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N],\n          child1Score = this.scoreFunction(child1);\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) swap = child1N;\n      }\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N],\n          child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap == null ? elemScore : child1Score)) swap = child2N;\n      }\n\n      // No need to swap further, we are done.\n      if (swap == null) break;\n\n      // Otherwise, swap and continue.\n      this.content[n] = this.content[swap];\n      this.content[swap] = element;\n      n = swap;\n    }\n  },\n};\n","import {\n  Box3,\n  BufferAttribute,\n  BufferGeometry,\n  Color,\n  LineBasicMaterial,\n  LineSegments,\n} from 'three';\n\n/**\n *\n * code adapted from three.js BoxHelper.js\n * https://github.com/mrdoob/three.js/blob/dev/src/helpers/BoxHelper.js\n *\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / http://github.com/Mugen87\n * @author mschuetz / http://potree.org\n */\n\nexport class Box3Helper extends LineSegments {\n  constructor(box: Box3, color: Color = new Color(0xffff00)) {\n    // prettier-ignore\n    const indices = new Uint16Array([ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ]);\n    // prettier-ignore\n    const positions = new Float32Array([\n      box.min.x, box.min.y, box.min.z,\n      box.max.x, box.min.y, box.min.z,\n      box.max.x, box.min.y, box.max.z,\n      box.min.x, box.min.y, box.max.z,\n      box.min.x, box.max.y, box.min.z,\n      box.max.x, box.max.y, box.min.z,\n      box.max.x, box.max.y, box.max.z,\n      box.min.x, box.max.y, box.max.z\n    ]);\n\n    const geometry = new BufferGeometry();\n    geometry.setIndex(new BufferAttribute(indices, 1));\n    geometry.setAttribute('position', new BufferAttribute(positions, 3));\n\n    const material = new LineBasicMaterial({ color: color });\n\n    super(geometry, material);\n  }\n}\n",null,"import { IPointCloudTreeNode } from '../types';\n\nexport type Node = IPointCloudTreeNode;\n\nexport class LRUItem {\n  next: LRUItem | null = null;\n  previous: LRUItem | null = null;\n  constructor(public node: Node) {}\n}\n\n/**\n * A doubly-linked-list of the least recently used elements.\n */\nexport class LRU {\n  // the least recently used item\n  first: LRUItem | null = null;\n  // the most recently used item\n  last: LRUItem | null = null;\n  numPoints: number = 0;\n\n  private items = new Map<number, LRUItem>();\n\n  constructor(public pointBudget: number = 1_000_000) {}\n\n  get size(): number {\n    return this.items.size;\n  }\n\n  has(node: Node): boolean {\n    return this.items.has(node.id);\n  }\n\n  /**\n   * Makes the specified the most recently used item. if the list does not contain node, it will\n   * be added.\n   */\n  touch(node: Node) {\n    if (!node.loaded) {\n      return;\n    }\n\n    const item = this.items.get(node.id);\n    if (item) {\n      this.touchExisting(item);\n    } else {\n      this.addNew(node);\n    }\n  }\n\n  private addNew(node: Node): void {\n    const item = new LRUItem(node);\n    item.previous = this.last;\n    this.last = item;\n    if (item.previous) {\n      item.previous.next = item;\n    }\n\n    if (!this.first) {\n      this.first = item;\n    }\n\n    this.items.set(node.id, item);\n    this.numPoints += node.numPoints;\n  }\n\n  private touchExisting(item: LRUItem): void {\n    if (!item.previous) {\n      // handle touch on first element\n      if (item.next) {\n        this.first = item.next;\n        this.first.previous = null;\n        item.previous = this.last;\n        item.next = null;\n        this.last = item;\n\n        if (item.previous) {\n          item.previous.next = item;\n        }\n      }\n    } else if (!item.next) {\n      // handle touch on last element\n    } else {\n      // handle touch on any other element\n      item.previous.next = item.next;\n      item.next.previous = item.previous;\n      item.previous = this.last;\n      item.next = null;\n      this.last = item;\n\n      if (item.previous) {\n        item.previous.next = item;\n      }\n    }\n  }\n\n  remove(node: Node) {\n    const item = this.items.get(node.id);\n    if (!item) {\n      return;\n    }\n\n    if (this.items.size === 1) {\n      this.first = null;\n      this.last = null;\n    } else {\n      if (!item.previous) {\n        this.first = item.next;\n        this.first!.previous = null;\n      }\n\n      if (!item.next) {\n        this.last = item.previous;\n        this.last!.next = null;\n      }\n\n      if (item.previous && item.next) {\n        item.previous.next = item.next;\n        item.next.previous = item.previous;\n      }\n    }\n\n    this.items.delete(node.id);\n    this.numPoints -= node.numPoints;\n  }\n\n  getLRUItem(): Node | undefined {\n    return this.first ? this.first.node : undefined;\n  }\n\n  freeMemory(): void {\n    if (this.items.size <= 1) {\n      return;\n    }\n\n    while (this.numPoints > this.pointBudget * 2) {\n      const node = this.getLRUItem();\n      if (node) {\n        this.disposeSubtree(node);\n      }\n    }\n  }\n\n  disposeSubtree(node: Node): void {\n    // Collect all the nodes which are to be disposed and removed.\n    const nodesToDispose: Node[] = [node];\n    node.traverse(n => {\n      if (n.loaded) {\n        nodesToDispose.push(n);\n      }\n    });\n\n    // Dispose of all the nodes in one go.\n    for (const n of nodesToDispose) {\n      n.dispose();\n      this.remove(n);\n    }\n  }\n}\n",null],"names":[],"version":3,"file":"module.js.map"}