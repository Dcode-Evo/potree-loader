{"mappings":"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","sources":["src/workers/binary-decoder.worker.js","src/workers/binary-decoder-worker-internal.ts","binary-decoder-worker-internal.ts","src/point-attributes.ts","point-attributes.ts","src/version.ts","version.ts","src/workers/custom-array-view.ts","custom-array-view.ts"],"sourcesContent":["import { handleMessage } from './binary-decoder-worker-internal';\n\n/*eslint-disable */\nonmessage = handleMessage;\n","/**\n * Adapted from Potree.js http://potree.org\n * Potree License: https://github.com/potree/potree/blob/1.5/LICENSE\n */\n\nimport {\n  IPointAttribute,\n  IPointAttributes,\n  PointAttributeName,\n  POINT_ATTRIBUTES,\n} from '../point-attributes';\nimport { Version } from '../version';\nimport { CustomArrayView } from './custom-array-view';\n\n// IE11 does not have Math.sign(), this has been adapted from CoreJS es6.math.sign.js for TypeScript\nconst mathSign =\n  Math.sign ||\n  function(x: number): number {\n    // tslint:disable-next-line:triple-equals\n    return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n  };\n\ninterface DecodedAttribute {\n  buffer: ArrayBuffer;\n  attribute: IPointAttribute;\n}\n\ninterface Ctx {\n  attributeBuffers: Record<string, DecodedAttribute>;\n  currentOffset: number;\n  data: CustomArrayView;\n  mean: [number, number, number];\n  nodeOffset: [number, number, number];\n  numPoints: number;\n  pointAttributes: IPointAttributes;\n  scale: number;\n  tightBoxMax: [number, number, number];\n  tightBoxMin: [number, number, number];\n  transferables: ArrayBuffer[];\n  version: Version;\n}\n\nexport function handleMessage(event: MessageEvent) {\n  const buffer = event.data.buffer;\n  const pointAttributes: IPointAttributes = event.data.pointAttributes;\n\n  const ctx: Ctx = {\n    attributeBuffers: {},\n    currentOffset: 0,\n    data: new CustomArrayView(buffer),\n    mean: [0, 0, 0],\n    nodeOffset: event.data.offset,\n    numPoints: event.data.buffer.byteLength / pointAttributes.byteSize,\n    pointAttributes,\n    scale: event.data.scale,\n    tightBoxMax: [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY],\n    tightBoxMin: [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY],\n    transferables: [],\n    version: new Version(event.data.version),\n  };\n\n  for (const pointAttribute of ctx.pointAttributes.attributes) {\n    decodeAndAddAttribute(pointAttribute, ctx);\n    ctx.currentOffset += pointAttribute.byteSize;\n  }\n\n  const indices = new ArrayBuffer(ctx.numPoints * 4);\n  const iIndices = new Uint32Array(indices);\n  for (let i = 0; i < ctx.numPoints; i++) {\n    iIndices[i] = i;\n  }\n\n  if (!ctx.attributeBuffers[PointAttributeName.CLASSIFICATION]) {\n    addEmptyClassificationBuffer(ctx);\n  }\n\n  const message = {\n    buffer: buffer,\n    mean: ctx.mean,\n    attributeBuffers: ctx.attributeBuffers,\n    tightBoundingBox: { min: ctx.tightBoxMin, max: ctx.tightBoxMax },\n    indices,\n  };\n\n  // console.log(\"old\", message)\n  postMessage(message, ctx.transferables as any);\n}\n\nfunction addEmptyClassificationBuffer(ctx: Ctx): void {\n  const buffer = new ArrayBuffer(ctx.numPoints * 4);\n  const classifications = new Float32Array(buffer);\n\n  for (let i = 0; i < ctx.numPoints; i++) {\n    classifications[i] = 0;\n  }\n\n  ctx.attributeBuffers[PointAttributeName.CLASSIFICATION] = {\n    buffer,\n    attribute: POINT_ATTRIBUTES.CLASSIFICATION,\n  };\n}\n\nfunction decodeAndAddAttribute(attribute: IPointAttribute, ctx: Ctx): void {\n  const decodedAttribute = decodePointAttribute(attribute, ctx);\n  if (decodedAttribute === undefined) {\n    return;\n  }\n\n  ctx.attributeBuffers[decodedAttribute.attribute.name] = decodedAttribute;\n  ctx.transferables.push(decodedAttribute.buffer);\n}\n\nfunction decodePointAttribute(attribute: IPointAttribute, ctx: Ctx): DecodedAttribute | undefined {\n  switch (attribute.name) {\n    case PointAttributeName.POSITION_CARTESIAN:\n      return decodePositionCartesian(attribute, ctx);\n    case PointAttributeName.COLOR_PACKED:\n      return decodeColor(attribute, ctx);\n    case PointAttributeName.INTENSITY:\n      return decodeIntensity(attribute, ctx);\n    case PointAttributeName.CLASSIFICATION:\n      return decodeClassification(attribute, ctx);\n    case PointAttributeName.NORMAL_SPHEREMAPPED:\n      return decodeNormalSphereMapped(attribute, ctx);\n    case PointAttributeName.NORMAL_OCT16:\n      return decodeNormalOct16(attribute, ctx);\n    case PointAttributeName.NORMAL:\n      return decodeNormal(attribute, ctx);\n    default:\n      return undefined;\n  }\n}\n\nfunction decodePositionCartesian(attribute: IPointAttribute, ctx: Ctx): DecodedAttribute {\n  const buffer = new ArrayBuffer(ctx.numPoints * 4 * 3);\n  const positions = new Float32Array(buffer);\n\n  for (let i = 0; i < ctx.numPoints; i++) {\n    let x;\n    let y;\n    let z;\n\n    if (ctx.version.newerThan('1.3')) {\n      x = ctx.data.getUint32(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 0) * ctx.scale;\n      y = ctx.data.getUint32(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 4) * ctx.scale;\n      z = ctx.data.getUint32(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 8) * ctx.scale;\n    } else {\n      x = ctx.data.getFloat32(i * ctx.pointAttributes.byteSize + 0) + ctx.nodeOffset[0];\n      y = ctx.data.getFloat32(i * ctx.pointAttributes.byteSize + 4) + ctx.nodeOffset[1];\n      z = ctx.data.getFloat32(i * ctx.pointAttributes.byteSize + 8) + ctx.nodeOffset[2];\n    }\n\n    positions[3 * i + 0] = x;\n    positions[3 * i + 1] = y;\n    positions[3 * i + 2] = z;\n\n    ctx.mean[0] += x / ctx.numPoints;\n    ctx.mean[1] += y / ctx.numPoints;\n    ctx.mean[2] += z / ctx.numPoints;\n\n    ctx.tightBoxMin[0] = Math.min(ctx.tightBoxMin[0], x);\n    ctx.tightBoxMin[1] = Math.min(ctx.tightBoxMin[1], y);\n    ctx.tightBoxMin[2] = Math.min(ctx.tightBoxMin[2], z);\n\n    ctx.tightBoxMax[0] = Math.max(ctx.tightBoxMax[0], x);\n    ctx.tightBoxMax[1] = Math.max(ctx.tightBoxMax[1], y);\n    ctx.tightBoxMax[2] = Math.max(ctx.tightBoxMax[2], z);\n  }\n\n  return { buffer, attribute };\n}\n\nfunction decodeColor(attribute: IPointAttribute, ctx: Ctx): DecodedAttribute {\n  const buffer = new ArrayBuffer(ctx.numPoints * 3);\n  const colors = new Uint8Array(buffer);\n\n  for (let i = 0; i < ctx.numPoints; i++) {\n    colors[3 * i + 0] = ctx.data.getUint8(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 0);\n    colors[3 * i + 1] = ctx.data.getUint8(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 1);\n    colors[3 * i + 2] = ctx.data.getUint8(ctx.currentOffset + i * ctx.pointAttributes.byteSize + 2);\n  }\n\n  return { buffer, attribute };\n}\n\nfunction decodeIntensity(attribute: IPointAttribute, ctx: Ctx): DecodedAttribute {\n  const buffer = new ArrayBuffer(ctx.numPoints * 4);\n  const intensities = new Float32Array(buffer);\n\n  for (let i = 0; i < ctx.numPoints; i++) {\n    intensities[i] = ctx.data.getUint16(ctx.currentOffset + i * ctx.pointAttributes.byteSize);\n  }\n\n  return { buffer, attribute };\n}\n\nfunction decodeClassification(attribute: IPointAttribute, ctx: Ctx): DecodedAttribute {\n  const buffer = new ArrayBuffer(ctx.numPoints);\n  const classifications = new Uint8Array(buffer);\n\n  for (let j = 0; j < ctx.numPoints; j++) {\n    classifications[j] = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize);\n  }\n\n  return { buffer, attribute };\n}\n\nfunction decodeNormalSphereMapped(attribute: IPointAttribute, ctx: Ctx): DecodedAttribute {\n  const buffer = new ArrayBuffer(ctx.numPoints * 4 * 3);\n  const normals = new Float32Array(buffer);\n\n  for (let j = 0; j < ctx.numPoints; j++) {\n    const bx = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 0);\n    const by = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 1);\n\n    const ex = bx / 255;\n    const ey = by / 255;\n\n    let nx = ex * 2 - 1;\n    let ny = ey * 2 - 1;\n    let nz = 1;\n    const nw = -1;\n\n    const l = nx * -nx + ny * -ny + nz * -nw;\n    nz = l;\n    nx = nx * Math.sqrt(l);\n    ny = ny * Math.sqrt(l);\n\n    nx = nx * 2;\n    ny = ny * 2;\n    nz = nz * 2 - 1;\n\n    normals[3 * j + 0] = nx;\n    normals[3 * j + 1] = ny;\n    normals[3 * j + 2] = nz;\n  }\n\n  return { buffer, attribute };\n}\n\nfunction decodeNormalOct16(attribute: IPointAttribute, ctx: Ctx): DecodedAttribute {\n  const buff = new ArrayBuffer(ctx.numPoints * 4 * 3);\n  const normals = new Float32Array(buff);\n\n  for (let j = 0; j < ctx.numPoints; j++) {\n    const bx = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 0);\n    const by = ctx.data.getUint8(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 1);\n\n    const u = (bx / 255) * 2 - 1;\n    const v = (by / 255) * 2 - 1;\n\n    let z = 1 - Math.abs(u) - Math.abs(v);\n\n    let x = 0;\n    let y = 0;\n    if (z >= 0) {\n      x = u;\n      y = v;\n    } else {\n      x = -(v / mathSign(v) - 1) / mathSign(u);\n      y = -(u / mathSign(u) - 1) / mathSign(v);\n    }\n\n    const length = Math.sqrt(x * x + y * y + z * z);\n    x = x / length;\n    y = y / length;\n    z = z / length;\n\n    normals[3 * j + 0] = x;\n    normals[3 * j + 1] = y;\n    normals[3 * j + 2] = z;\n  }\n\n  return { buffer: buff, attribute };\n}\n\nfunction decodeNormal(attribute: IPointAttribute, ctx: Ctx): DecodedAttribute {\n  const buffer = new ArrayBuffer(ctx.numPoints * 4 * 3);\n  const normals = new Float32Array(buffer);\n\n  for (let j = 0; j < ctx.numPoints; j++) {\n    const x = ctx.data.getFloat32(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 0);\n    const y = ctx.data.getFloat32(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 4);\n    const z = ctx.data.getFloat32(ctx.currentOffset + j * ctx.pointAttributes.byteSize + 8);\n\n    normals[3 * j + 0] = x;\n    normals[3 * j + 1] = y;\n    normals[3 * j + 2] = z;\n  }\n\n  return { buffer, attribute };\n}\n",null,"// -------------------------------------------------------------------------------------------------\n// Converted to Typescript and adapted from https://github.com/potree/potree\n// -------------------------------------------------------------------------------------------------\n\nexport enum PointAttributeName {\n  POSITION_CARTESIAN = 0, // float x, y, z;\n  COLOR_PACKED = 1, // byte r, g, b, a; \tI = [0,1]\n  COLOR_FLOATS_1 = 2, // float r, g, b; \t\tI = [0,1]\n  COLOR_FLOATS_255 = 3, // float r, g, b; \t\tI = [0,255]\n  NORMAL_FLOATS = 4, // float x, y, z;\n  FILLER = 5,\n  INTENSITY = 6,\n  CLASSIFICATION = 7,\n  NORMAL_SPHEREMAPPED = 8,\n  NORMAL_OCT16 = 9,\n  NORMAL = 10,\n}\n\nexport interface PointAttributeType {\n  ordinal: number;\n  size: number;\n}\n\nexport const POINT_ATTRIBUTE_TYPES: Record<string, PointAttributeType> = {\n  DATA_TYPE_DOUBLE: { ordinal: 0, size: 8 },\n  DATA_TYPE_FLOAT: { ordinal: 1, size: 4 },\n  DATA_TYPE_INT8: { ordinal: 2, size: 1 },\n  DATA_TYPE_UINT8: { ordinal: 3, size: 1 },\n  DATA_TYPE_INT16: { ordinal: 4, size: 2 },\n  DATA_TYPE_UINT16: { ordinal: 5, size: 2 },\n  DATA_TYPE_INT32: { ordinal: 6, size: 4 },\n  DATA_TYPE_UINT32: { ordinal: 7, size: 4 },\n  DATA_TYPE_INT64: { ordinal: 8, size: 8 },\n  DATA_TYPE_UINT64: { ordinal: 9, size: 8 },\n};\n\nexport interface IPointAttribute {\n  name: PointAttributeName;\n  type: PointAttributeType;\n  numElements: number;\n  byteSize: number;\n}\n\nexport interface IPointAttributes {\n  attributes: IPointAttribute[];\n  byteSize: number;\n  size: number;\n}\n\nfunction makePointAttribute(\n  name: PointAttributeName,\n  type: PointAttributeType,\n  numElements: number,\n): IPointAttribute {\n  return {\n    name,\n    type,\n    numElements,\n    byteSize: numElements * type.size,\n  };\n}\n\nconst RGBA_PACKED = makePointAttribute(\n  PointAttributeName.COLOR_PACKED,\n  POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8,\n  4,\n);\n\nexport const POINT_ATTRIBUTES = {\n  POSITION_CARTESIAN: makePointAttribute(\n    PointAttributeName.POSITION_CARTESIAN,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT,\n    3,\n  ),\n  RGBA_PACKED,\n  COLOR_PACKED: RGBA_PACKED,\n  RGB_PACKED: makePointAttribute(\n    PointAttributeName.COLOR_PACKED,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_INT8,\n    3,\n  ),\n  NORMAL_FLOATS: makePointAttribute(\n    PointAttributeName.NORMAL_FLOATS,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT,\n    3,\n  ),\n  FILLER_1B: makePointAttribute(\n    PointAttributeName.FILLER,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\n    1,\n  ),\n  INTENSITY: makePointAttribute(\n    PointAttributeName.INTENSITY,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT16,\n    1,\n  ),\n  CLASSIFICATION: makePointAttribute(\n    PointAttributeName.CLASSIFICATION,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\n    1,\n  ),\n  NORMAL_SPHEREMAPPED: makePointAttribute(\n    PointAttributeName.NORMAL_SPHEREMAPPED,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\n    2,\n  ),\n  NORMAL_OCT16: makePointAttribute(\n    PointAttributeName.NORMAL_OCT16,\n    POINT_ATTRIBUTE_TYPES.DATA_TYPE_UINT8,\n    2,\n  ),\n  NORMAL: makePointAttribute(PointAttributeName.NORMAL, POINT_ATTRIBUTE_TYPES.DATA_TYPE_FLOAT, 3),\n};\n\nexport type PointAttributeStringName = keyof typeof POINT_ATTRIBUTES;\n\nexport class PointAttributes implements IPointAttributes {\n  attributes: IPointAttribute[] = [];\n  byteSize: number = 0;\n  size: number = 0;\n\n  constructor(pointAttributeNames: PointAttributeStringName[] = []) {\n    for (let i = 0; i < pointAttributeNames.length; i++) {\n      const pointAttributeName = pointAttributeNames[i];\n      const pointAttribute = POINT_ATTRIBUTES[pointAttributeName];\n      this.attributes.push(pointAttribute);\n      this.byteSize += pointAttribute.byteSize;\n      this.size++;\n    }\n  }\n\n  add(pointAttribute: IPointAttribute): void {\n    this.attributes.push(pointAttribute);\n    this.byteSize += pointAttribute.byteSize;\n    this.size++;\n  }\n\n  hasColors(): boolean {\n    return this.attributes.find(isColorAttribute) !== undefined;\n  }\n\n  hasNormals(): boolean {\n    return this.attributes.find(isNormalAttribute) !== undefined;\n  }\n}\n\nfunction isColorAttribute({ name }: IPointAttribute): boolean {\n  return name === PointAttributeName.COLOR_PACKED;\n}\n\nfunction isNormalAttribute({ name }: IPointAttribute): boolean {\n  return (\n    name === PointAttributeName.NORMAL_SPHEREMAPPED ||\n    name === PointAttributeName.NORMAL_FLOATS ||\n    name === PointAttributeName.NORMAL ||\n    name === PointAttributeName.NORMAL_OCT16\n  );\n}\n",null,"export class Version {\n  version: string;\n  versionMajor: number;\n  versionMinor: number = 0;\n\n  constructor(version: string) {\n    this.version = version;\n\n    const vmLength = version.indexOf('.') === -1 ? version.length : version.indexOf('.');\n    this.versionMajor = parseInt(version.substr(0, vmLength), 10);\n    this.versionMinor = parseInt(version.substr(vmLength + 1), 10);\n    if (isNaN(this.versionMinor)) {\n      this.versionMinor = 0;\n    }\n  }\n\n  newerThan(version: string): boolean {\n    const v = new Version(version);\n\n    if (this.versionMajor > v.versionMajor) {\n      return true;\n    } else if (this.versionMajor === v.versionMajor && this.versionMinor > v.versionMinor) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  equalOrHigher(version: string): boolean {\n    const v = new Version(version);\n\n    if (this.versionMajor > v.versionMajor) {\n      return true;\n    } else if (this.versionMajor === v.versionMajor && this.versionMinor >= v.versionMinor) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  upTo(version: string): boolean {\n    return !this.newerThan(version);\n  }\n}\n",null,"/**\n * Adapted from Potree.js http://potree.org\n * Potree License: https://github.com/potree/potree/blob/1.5/LICENSE\n */\n\n// http://jsperf.com/uint8array-vs-dataview3/3\n// tslint:disable:no-bitwise\nexport class CustomArrayView {\n  private u8: Uint8Array;\n  private tmp = new ArrayBuffer(4);\n  private tmpf = new Float32Array(this.tmp);\n  private tmpu8 = new Uint8Array(this.tmp);\n\n  constructor(buffer: ArrayBuffer) {\n    this.u8 = new Uint8Array(buffer);\n  }\n\n  getUint32(i: number) {\n    return (this.u8[i + 3] << 24) | (this.u8[i + 2] << 16) | (this.u8[i + 1] << 8) | this.u8[i];\n  }\n\n  getUint16(i: number): number {\n    return (this.u8[i + 1] << 8) | this.u8[i];\n  }\n\n  getFloat32(i: number): number {\n    const tmpu8 = this.tmpu8;\n    const u8 = this.u8;\n    const tmpf = this.tmpf;\n\n    tmpu8[0] = u8[i + 0];\n    tmpu8[1] = u8[i + 1];\n    tmpu8[2] = u8[i + 2];\n    tmpu8[3] = u8[i + 3];\n\n    return tmpf[0];\n  }\n\n  getUint8(i: number): number {\n    return this.u8[i];\n  }\n}\n// tslint:enable:no-bitwise\n",null],"names":[],"version":3,"file":"binary-decoder.worker.c2d44a5e.js.map"}